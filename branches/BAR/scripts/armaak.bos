#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece pelvis, rthigh, rleg, lthigh, lleg, torso, lfoot, rfoot, lturret, rturret, lflare1,lflare2,rflare1,rflare2;

static-var bMoving, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
  Static_Var_6, Static_Var_7;


walk()
{
	while( bMoving )
	{
	
		//maxvelocity = 1.57, speed = 47.4 elmos/sec
		//animspeed 36 elmos per cycle

		if( bMoving )
		{	
		//step 0 
		turn lthigh to x-axis <0> speed <465.000000>;
		turn lleg to x-axis <49> speed <487.500000>;
		turn lfoot to x-axis <-51> speed <202.500000>;

		turn rthigh to x-axis <0> speed <202.500000>;
		turn rleg to x-axis <0> speed <60.000000>;
		turn rfoot to x-axis <0> speed <270.000000>;

		move pelvis to y-axis [0] speed [11.250000];
		turn pelvis to z-axis <-2> speed <15.000000>;

		sleep 130;
	}
		if( bMoving )
		{
		//step 1
		turn lthigh to x-axis <-58> speed <435.000000>;
		turn lleg to x-axis <48> speed <7.500000>;
		turn lfoot to x-axis <0> speed <382.500000>;
		turn rthigh to x-axis <46> speed <345.000000>;
		turn rleg to x-axis <-29> speed <217.500000>;
		turn rfoot to x-axis <-17> speed <127.500000>;

		move pelvis to y-axis [-1] speed [7.500000];
		turn pelvis to z-axis <2> speed <30.000000>;

		sleep 130;
	}
		if( bMoving )
		{
		//step 2 
		turn lthigh to x-axis <-27> speed <232.500000>;
		turn lleg to x-axis <-8> speed <420.000000>;
		turn lfoot to x-axis <36> speed <270.000000>;
		turn rthigh to x-axis <62> speed <120.000000>;
		turn rleg to x-axis <-16> speed <97.500000>;
		turn rfoot to x-axis <-24> speed <52.500000>;

		move pelvis to y-axis [-1.5] speed [3.750000];
		turn pelvis to z-axis <4> speed <15.000000>;

		sleep 130;
			}
		if( bMoving )
		{
		//step 3 
		turn lthigh to x-axis <0> speed <202.500000>;
		turn lleg to x-axis <0> speed <60.000000>;
		turn lfoot to x-axis <0> speed <270.000000>;
		turn rthigh to x-axis <0> speed <465.000000>;
		turn rleg to x-axis <49> speed <487.500000>;
		turn rfoot to x-axis <-51> speed <202.500000>;

		move pelvis to y-axis [0] speed [11.250000];
		turn pelvis to z-axis <2> speed <15.000000>;

		sleep 130;
			}
		if( bMoving )
		{
		//step 4 
		turn lthigh to x-axis <46> speed <345.000000>;
		turn lleg to x-axis <-29> speed <217.500000>;
		turn lfoot to x-axis <-17> speed <127.500000>;
		turn rthigh to x-axis <-58> speed <435.000000>;
		turn rleg to x-axis <48> speed <7.500000>;
		turn rfoot to x-axis <0> speed <382.500000>;

		move pelvis to y-axis [-1] speed [7.500000];
		turn pelvis to z-axis <-2> speed <30.000000>;

		sleep 130;
			}
	
		//step 5 
		turn lthigh to x-axis <62> speed <120.000000>;
		turn lleg to x-axis <-16> speed <97.500000>;
		turn lfoot to x-axis <-24> speed <52.500000>;
		turn rthigh to x-axis <-27> speed <232.500000>;
		turn rleg to x-axis <-8> speed <420.000000>;
		turn rfoot to x-axis <36> speed <270.000000>;

		move pelvis to y-axis [-1.5] speed [3.750000];
		turn pelvis to z-axis <-4> speed <15.000000>;
		sleep 130;
		


	}
	return (0);
}

HitByWeapon(anglex, anglez)
{
	turn pelvis to z-axis <0> - anglez speed <105.000000>;
	turn pelvis to x-axis <0> - anglex speed <105.000000>;
	wait-for-turn pelvis around z-axis;
	wait-for-turn pelvis around x-axis;
	turn pelvis to z-axis <0.000000> speed <30.000000>;
	turn pelvis to x-axis <0.000000> speed <30.000000>;
}



MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = Static_Var_2;
		if( moving )
		{
			call-script walk();
			justmoved = TRUE;
		}
		if( !moving )
		{
			if( justmoved )
			{
				move pelvis to y-axis [0.000000] speed [2.500000];

				//step 0 
		
				turn rthigh to x-axis <0> speed <202.500000>;
				turn rleg to x-axis <0> speed <60.000000>;
				turn rfoot to x-axis <0> speed <270.000000>;
		
				turn lthigh to x-axis <0> speed <202.500000>;
				turn lleg to x-axis <0> speed <60.000000>;
				turn lfoot to x-axis <0> speed <270.000000>;
		
				move pelvis to y-axis [0] speed [11.250000];
				turn pelvis to z-axis <0> speed <15.000000>;
		
				sleep 130;

				if( !aiming )
				{
					turn torso to y-axis <0.000000> speed <90.000000>;
				}
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{

	bMoving = FALSE;
	start-script MotionControl();
	start-script SmokeUnit();
	return (0);
}

StartMoving()
{
	bMoving = TRUE;
	return (0);
}

StopMoving()
{
	bMoving = FALSE;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = torso;
	return (0);
}

RestoreAfterDelay()
{
	sleep 5000;
	set-signal-mask 0;
	turn torso to y-axis <0> speed <250.000000>;
	turn lturret to x-axis <0> speed <400>;
	turn rturret to x-axis <0> speed <400>;
	return (0);
}

QueryWeapon1(piecenum)
{
	piecenum = lflare1;
}

AimFromWeapon1(piecenum)
{
	piecenum = torso;
}

QueryWeapon2(piecenum)
{
	piecenum=lflare2;
}

AimFromWeapon2(piecenum)
{
	piecenum=torso;
}

AimWeapon2(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn torso to y-axis heading speed <250.000000>;
	turn lturret to x-axis -1* pitch speed <400>;
	turn rturret to x-axis -1* pitch speed <400>;
	wait-for-turn torso around y-axis;
	wait-for-turn lturret around x-axis;
	wait-for-turn rturret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon2()
{
}

QueryWeapon3(piecenum)
{
	piecenum=rflare2;
}

AimFromWeapon3(piecenum)
{
	piecenum=torso;
}

AimWeapon3(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	turn torso to y-axis heading speed <250.000000>;
	turn lturret to x-axis -1* pitch speed <400>;
	turn rturret to x-axis -1* pitch speed <400>;
	wait-for-turn torso around y-axis;
	wait-for-turn lturret around x-axis;
	wait-for-turn rturret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon3()
{
}


QueryWeapon4(piecenum)
{
	piecenum=rflare1;
}

AimFromWeapon4(piecenum)
{
	piecenum=torso;
}


AimWeapon4(heading, pitch)
{
	signal 8;
	set-signal-mask 8;
	turn torso to y-axis heading speed <250.000000>;
	turn lturret to x-axis -1* pitch speed <400>;
	turn rturret to x-axis -1* pitch speed <400>;
	wait-for-turn torso around y-axis;
	wait-for-turn lturret around x-axis;
	wait-for-turn rturret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon4()
{
}


QueryWeapon5(piecenum)
{
	piecenum=lflare2;
}

AimFromWeapon5(piecenum)
{
	piecenum=torso;
}
AimWeapon5(heading, pitch)
{
	signal 16;
	set-signal-mask 16;
	turn torso to y-axis heading speed <250.000000>;
	turn lturret to x-axis -1* pitch speed <400>;
	turn rturret to x-axis -1* pitch speed <400>;
	wait-for-turn torso around y-axis;
	wait-for-turn lturret around x-axis;
	wait-for-turn rturret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon5()
{

}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode pelvis type BITMAPONLY;
		explode rthigh type BITMAPONLY;
		explode rleg type BITMAPONLY;
		explode rfoot type FIRE | SMOKE | FALL;
		explode lthigh type BITMAPONLY;
		explode lleg type BITMAPONLY;
		explode lfoot type BITMAPONLY;
		explode torso type BITMAPONLY;
		explode rturret type BITMAPONLY;
		explode rflare1 type BITMAPONLY;
		explode rflare2 type BITMAPONLY;
		explode lturret type BITMAPONLY;
		explode lflare1 type BITMAPONLY;
		explode lflare2 type BITMAPONLY;
		return(0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode pelvis type FALL;
		explode rthigh type FIRE | SMOKE | FALL;
		explode rleg type FIRE | SMOKE | FALL;
		explode rfoot type FIRE | SMOKE | FALL;
		explode lthigh type FALL;
		explode lleg type FALL;
		explode lfoot type FALL;
		explode torso type FIRE | SMOKE | FALL;
		explode rturret type FIRE | SMOKE | FALL;
		explode rflare1 type FIRE | SMOKE | FALL;
		explode rflare2 type FIRE | SMOKE | FALL;
		explode lturret type FIRE | SMOKE | FALL;
		explode lflare1 type FIRE | SMOKE | FALL;
		explode lflare2 type FIRE | SMOKE | FALL;
		return(0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode pelvis type FIRE | SMOKE | FALL;
		explode rthigh type FIRE | SMOKE | FALL;
		explode rleg type EXPLODE_ON_HIT | SMOKE | FALL;
		explode rfoot type SMOKE | FALL;
		explode lthigh type EXPLODE_ON_HIT | SMOKE | FALL;
		explode lleg type EXPLODE_ON_HIT | SMOKE | FALL;
		explode lfoot type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode torso type EXPLODE_ON_HIT | SMOKE | FALL;
		explode rturret type EXPLODE_ON_HIT | SMOKE | FALL;
		explode rflare1 type SMOKE | FALL;
		explode rflare2 type SMOKE | FALL;
		explode lturret type SMOKE | FALL;
		explode lflare1 type EXPLODE_ON_HIT | SMOKE | FALL;
		explode lflare2 type SMOKE | FALL;
		return(0);
	}
	corpsetype = 3 ;
		explode pelvis type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode rthigh type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode rleg type EXPLODE_ON_HIT | FIRE | FALL;
		explode rfoot type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode lthigh type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode lleg type EXPLODE_ON_HIT | FIRE | FALL;
		explode lfoot type EXPLODE_ON_HIT | FIRE | FALL;
		explode torso type EXPLODE_ON_HIT | FIRE | FALL;
		explode rturret type EXPLODE_ON_HIT | FIRE | FALL;
		explode rflare1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode rflare2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode lturret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode lflare1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode lflare2 type EXPLODE_ON_HIT | FIRE | FALL;
}
