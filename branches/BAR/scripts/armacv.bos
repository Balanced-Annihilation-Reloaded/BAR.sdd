#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SIG_BUILD		4	


piece  base, ldoor, rdoor, lturret, rturret, lplate, rplate, lnano, rnano;

static-var  statechg_DesiredState, statechg_StateChanging, notBuilding, nano;


activatescr()
{
	turn ldoor to z-axis <90> speed <180>;
	turn rdoor to z-axis <-90> speed <180>;
	move lplate to x-axis [7.5] speed [15];
	move rplate to x-axis [-7.5] speed [15;
	sleep 400;
}

deactivatescr()
{
	set INBUILDSTANCE to 0;

	turn rturret to x-axis <0> speed <160.038462>;
	turn lturret to x-axis <0> speed <160.038462>;
	wait-for-turn lturret around y-axis;
	wait-for-turn rturret around y-axis;
	sleep 300;
	turn ldoor to z-axis <0> speed <180>;
	turn rdoor to z-axis <0> speed <180>;
	move lplate to x-axis [0] speed [15];
	move rplate to x-axis [0] speed [15;
	sleep 400;

}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script deactivatescr();
			notBuilding = 1;
			currentstate = 1;
		}
		else
		{
			call-script activatescr();
			notBuilding = 0;
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	notBuilding = 1;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(heading, pitch)
{
	start-script RequestState(0);
	while( notBuilding ) sleep 100;
	signal SIG_BUILD;
	turn rturret to x-axis heading speed <160.038462>;
	turn lturret to x-axis <0> - heading speed <160.038462>;
	wait-for-turn rturret around y-axis;
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	signal SIG_BUILD;	
	set-signal-mask SIG_BUILD;
	sleep 6000;
	set-signal-mask 0;
	signal SIG_BUILD;	
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	if (nano==1){
		piecenum = lnano;
	}
	else{
		piecenum = rnano;
	}
	nano= !nano;
}


SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP2;

		return (0);
	}
	corpsetype = 3;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;

}
