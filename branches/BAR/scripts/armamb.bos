#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare, door1, door2, door3, door4, stand,
       turret, barrel;

static-var  IsClosed, restore_delay, statechg_DesiredState, statechg_StateChanging, Static_Var_5;


activatescr()
{
	if( TRUE )
	{
		turn door1 to x-axis <90.000000> speed <227.093407>;
		turn door2 to z-axis <90.000000> speed <227.093407>;
		turn door3 to x-axis <-90.000000> speed <227.093407>;
		turn door4 to z-axis <-90.000000> speed <227.093407>;
		move stand to y-axis [6] speed [34];
		sleep 500;
	}
	if( TRUE )
	{
		move door1 to y-axis [-15] speed [45.000000];
		move door2 to y-axis [-15] speed [45.000000];
		move door3 to y-axis [-15] speed [45.000000];
		move door4 to y-axis [-15] speed [45.000000];
		sleep 250;
	}
	if( TRUE )
	{
		move barrel to z-axis [7] speed [51];
		sleep 300;
	
	}
	sleep 25;
	return (0);
}

deactivatescr()
{
	if(TRUE)
	{
		turn stand to y-axis <0> speed <100>;
		turn turret to x-axis <0> speed <50>;
		wait-for-turn stand around y-axis;
		wait-for-turn turret around x-axis;
	}
	if( TRUE )
	{
		move barrel to z-axis [0] speed [51];
		sleep 300;
	
	}
	if( TRUE )
	{
		move door1 to y-axis [0] speed [45.000000];
		move door2 to y-axis [0] speed [45.000000];
		move door3 to y-axis [0] speed [45.000000];
		move door4 to y-axis [0] speed [45.000000];
		sleep 250;
	}
		if( TRUE )
	{
		turn door1 to x-axis <0.000000> speed <227.093407>;
		turn door2 to z-axis <0.000000> speed <227.093407>;
		turn door3 to x-axis <0.000000> speed <227.093407>;
		turn door4 to z-axis <0.000000> speed <227.093407>;
		move stand to y-axis [0] speed [34];
		sleep 500;
	}
	sleep 17;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Go()
{
	if( IsClosed )
	{
		call-script activatescr();
	}
	IsClosed = 0;
	set ARMORED to 0;
	return (0);
}

Stop()
{
	set ARMORED to 1;
	IsClosed = 1;
	call-script deactivatescr();

	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

RestoreAfterDelay()
{
	signal 8;
	set-signal-mask 8;
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
	return (0);
}

Create()
{

	hide flare;
	IsClosed = 1;
	Static_Var_5 = 0;
	restore_delay = 3000;
	start-script SmokeUnit();
	call-script InitState();
	start-script RequestState(0);
	set-signal-mask 2;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script RestoreAfterDelay();
	return (0);
}

Reload1()
{
	sleep 1800;
	Static_Var_5 = 0;
	return (0);
}

Reload2()
{
	sleep 3240;
	Static_Var_5 = 0;
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

AimWeapon1(Func_Var_1, Func_Var_2)
{
	start-script RequestState(0);
	signal 2;
	set-signal-mask 2;
	if( Func_Var_2 >= 10012 OR Static_Var_5 == 1 )
	{
		return (0);
	}
	while( IsClosed )
	{
		sleep 250;
	}
	turn stand to y-axis Func_Var_1 speed <100.016484>;
	turn turret to x-axis <0.000000> - Func_Var_2 speed <50.005495>;
	wait-for-turn stand around y-axis;
	wait-for-turn turret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	Static_Var_5 = 1;
	start-script Reload1();
	move barrel to z-axis [2.500000] speed [1250.000000];
	show flare;
	sleep 250;
	hide flare;
	move barrel to z-axis [7.000000] speed [7.500000];
	return (0);
}

AimFromWeapon1(Func_Var_1)
{
	Func_Var_1 = 2;
	return (0);
}

QueryWeapon1(Func_Var_1)
{
	Func_Var_1 = 1;
	return (0);
}

AimWeapon2(Func_Var_1, Func_Var_2)
{
	start-script RequestState(0);
	signal 4;
	set-signal-mask 4;
	if( Func_Var_2 < 10012 OR Static_Var_5 == 1 )
	{
		return (0);
	}
	while( IsClosed )
	{
		sleep 250;
	}
	turn stand to y-axis Func_Var_1 speed <100.016484>;
	turn turret to x-axis <0.000000> - Func_Var_2 speed <50.005495>;
	wait-for-turn stand around y-axis;
	wait-for-turn turret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon2()
{
	Static_Var_5 = 1;
	start-script Reload2();
	move barrel to z-axis [2.500000] speed [1250.000000];
	show flare;
	sleep 250;
	hide flare;
	move barrel to z-axis [7.000000] speed [7.500000];
	return (0);
}

AimFromWeapon2(Func_Var_1)
{
	Func_Var_1 = 2;
	return (0);
}

QueryWeapon2(Func_Var_1)
{
	Func_Var_1 = 1;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		explode stand type BITMAPONLY;
		explode turret type BITMAPONLY;
		explode barrel type FIRE | SMOKE | FALL;
		explode flare type BITMAPONLY;
		explode door1 type BITMAPONLY;
		explode door2 type BITMAPONLY;
		explode door3 type BITMAPONLY;
		explode door4 type BITMAPONLY;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY;
		explode stand type FALL;
		explode turret type FIRE | SMOKE | FALL;
		explode barrel type FIRE | SMOKE | FALL;
		explode flare type FIRE | SMOKE | FALL;
		explode door1 type FIRE | SMOKE | FALL;
		explode door2 type FIRE | SMOKE | FALL;
		explode door3 type FIRE | SMOKE | FALL;
		explode door4 type FALL;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode stand type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode turret type FIRE | SMOKE | FALL;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode door1 type SHATTER;
		explode door2 type SHATTER;
		explode door3 type SHATTER;
		explode door4 type SHATTER;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode stand type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode barrel type EXPLODE_ON_HIT | FIRE | FALL;
		explode flare type EXPLODE_ON_HIT | FIRE | FALL;
		explode door1 type SHATTER;
		explode door2 type SHATTER;
		explode door3 type SHATTER;
		explode door4 type SHATTER;
	return corpsetype;
}
