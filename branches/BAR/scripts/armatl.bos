#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare, launcher, turret, hinge, door;

static-var  restore_delay;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	restore_delay = 3000;
	start-script SmokeUnit();
	return (0);
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <90.021978>;
	turn launcher to x-axis <0.000000> speed <50.010989>;
	
	turn hinge to x-axis <0> speed <270>;
	
	wait-for-turn hinge around x-axis;
	move door to z-axis [0] speed [10];
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	move door to z-axis [3.5] speed [15];
	turn hinge to x-axis <75> speed <270>;
	turn turret to y-axis heading speed <80.016484>;
	wait-for-turn turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx 256 | 3 from flare;
	sleep 250;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = launcher;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode flare type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode flare type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode flare type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode flare type BITMAPONLY | BITMAP2;
	return (0);
}
