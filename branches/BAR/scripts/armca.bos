#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"


#define SIG_BUILD		4	

piece  base, wingbr, wingbl, wingfr, wingfl, arm1, arm2, nano, emit, doorbl, doorbr;

static-var  statechg_DesiredState, statechg_StateChanging;


activatescr()
{
	if( TRUE )
	{
		turn wingbr to x-axis <-90> speed <90>;
		turn wingbl to x-axis <-90> speed <90>;
		turn wingfr to x-axis <90> speed <90>;
		turn wingfl to x-axis <-90> speed <90>;
		sleep 908;
	}
	sleep 40;
	return (0);
}

deactivatescr()
{
	if( TRUE )
	{
		turn wingbr to x-axis <0> speed <90>;
		turn wingbl to x-axis <0> speed <90>;
		turn wingfr to x-axis <0> speed <90>;
		turn wingfl to x-axis <0> speed <90>;
		turn doorbl to z-axis <0> speed <270>;
		turn doorbr to z-axis  <0> speed <270>;
		turn arm1 to x-axis <0> speed <60>;
		turn arm2 to x-axis <0> speed <-500>;
		turn nano to x-axis <0> speed <300>;  
		wait-for-turn arm1 around x-axis;
		sleep 908;
	}
	sleep 40;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	call-script InitState();
	start-script SmokeUnit();
	return (0);
}

Activate()
{
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	start-script RequestState(1);
	return (0);
}


StartBuilding(heading, pitch)
{
	
	start-script RequestState(0);
	signal SIG_BUILD;
	turn doorbl to z-axis <-135> speed <270>;
	turn doorbr to z-axis  <135> speed <270>;
	turn arm1 to x-axis <-60> speed <60>;
	turn arm2 to x-axis <-250> speed <-500>;
	turn nano to x-axis <150> speed <300>;  
	wait-for-turn arm1 around x-axis;
	set INBUILDSTANCE to 1;
}


StopBuilding()
{
	signal SIG_BUILD;	
	set-signal-mask SIG_BUILD;
	sleep 6000;
	set-signal-mask 0;
	signal SIG_BUILD;	
	start-script RequestState(1);

	set INBUILDSTANCE to 0;
	return (0);
}

QueryNanoPiece(piecenum)
{
	piecenum = emit;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP2;
	return (0);
}
