#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, beam, nanogun, doorr, doorl, post, wake, turret;

static-var  Static_Var_1, notBuilding, statechg_DesiredState, statechg_StateChanging, Wobble_status;

// Signal definitions
#define SIG_MOVE		2
#define SIG_BUILD		4	

WobbleUnit()
{
	while( TRUE )
	{
		if( Wobble_status)
		{
			if( get GROUND_WATER_HEIGHT(get UNIT_XZ) < 0 ) //Over Water
			{
				move base to y-axis [-0.500000] speed [0.50000];
			}
			else
			{
				move base to y-axis [-0.500000] speed [0.50000];
			}
		}
		else
		{
			if( get GROUND_WATER_HEIGHT(get UNIT_XZ) < 0 ) //Over Water
			{
				move base to y-axis [0.500000] speed [0.50000];
			}
			else
			{
				move base to y-axis [0.000000] speed [0.50000];
			}
		}
		Wobble_status = !Wobble_status;
		sleep 260;
	}
}

BankControl()
{
	var lastHeading, currHeading, diffHeading;
	lastHeading = GET HEADING;
	while (TRUE)
	{
		currHeading = GET HEADING;
		diffHeading = currHeading - lastHeading;
		// Set values for tilt

		//Remove Extreme values
		if ( diffHeading > 1500 ) diffHeading = 1500;
		if ( diffHeading < -1500 ) diffHeading = -1500;
		//get PRINT(diffHeading);
		turn base to z-axis 1.0 * diffHeading speed <23>;
		
		lastHeading = currHeading;
		sleep 67;
	}
}

activatescr()
{
	turn doorr to z-axis <0.000000> now;
	turn doorr to z-axis <-67.010989> speed <99.000000>;
	turn doorl to z-axis <0.000000> now;
	turn doorl to z-axis <67.010989> speed <99.000000>;
	sleep 677;

	move doorr to y-axis [-2.000000] speed [2.000000];
	move doorl to y-axis [-2.000000] speed [2.000000];
	sleep 688;

	turn post to x-axis <90.021978> speed <131.000000>;
	turn nanogun to x-axis <-90.021978> speed <131.000000>;
	sleep 687;
}

deactivatescr()
{
	set INBUILDSTANCE to 0;
	turn turret to y-axis <0.000000> speed <160.000000>;
	wait-for-turn turret around y-axis;

	move doorr to y-axis [-2.000000] now;
	move doorl to y-axis [-2.000000] now;
	turn doorr to z-axis <-67.148352> now;
	turn doorl to z-axis <67.148352> now;
	turn post to x-axis <90.021978> now;
	turn post to x-axis <0.000000> speed <197.000000>;
	turn nanogun to x-axis <-90.021978> now;
	turn nanogun to x-axis <0.000000> speed <197.000000>;
	sleep 457;

	move doorr to y-axis [0.000000] speed [4.000000];
	move doorl to y-axis [0.000000] speed [4.000000];
	sleep 471;

	turn doorr to z-axis <0.000000> speed <143.000000>;
	turn doorl to z-axis <0.000000> speed <143.000000>;
	sleep 469;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script BankControl();
	start-script WobbleUnit();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_1 == 1 OR Static_Var_1 == 2)
		{
			emit-sfx 5 from wake;
			emit-sfx 5 from wake;
		}
		sleep 300;
	}
}

StopMoving()
{
}

setSFXoccupy(state)
{
	Static_Var_1 = state;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script deactivatescr();
			notBuilding = 1;
			currentstate = 1;
		}
		else
		{
			call-script activatescr();
			notBuilding = 0;
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	notBuilding = 1;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(heading, pitch)
{
	start-script RequestState(0);
	while( notBuilding ) sleep 100;
	signal SIG_BUILD;
	turn turret to y-axis heading speed <160.000000>;
	wait-for-turn turret around y-axis;
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	signal SIG_BUILD;	
	set-signal-mask SIG_BUILD;
	sleep 6000;
	set-signal-mask 0;
	signal SIG_BUILD;	
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
}

/*
TargetHeading(Func_Var_1)
{
	Static_Var_2 = 0 - Func_Var_1;
}
*/

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		explode doorl type BITMAPONLY;
		explode doorr type FIRE | SMOKE | FALL;
		explode post type BITMAPONLY;
		explode turret type BITMAPONLY;
		explode nanogun type FIRE | SMOKE | FALL;
		explode beam type BITMAPONLY;
		explode wake type BITMAPONLY;
		return(0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY;
		explode doorl type FIRE | SMOKE | FALL;
		explode doorr type FIRE | SMOKE | FALL;
		explode post type FIRE | SMOKE | FALL;
		explode turret type FIRE | SMOKE | FALL;
		explode nanogun type FIRE | SMOKE | FALL;
		explode beam type FIRE | SMOKE | FALL;
		explode wake type FIRE | SMOKE | FALL;
		return(0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL;
		explode doorl type FIRE | SMOKE | FALL;
		explode doorr type SMOKE | FALL;
		explode post type EXPLODE_ON_HIT | SMOKE | FALL;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode nanogun type SMOKE | FALL;
		explode beam type FIRE | SMOKE | FALL;
		explode wake type EXPLODE_ON_HIT | SMOKE | FALL;
		return(0);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode doorl type EXPLODE_ON_HIT | FIRE | FALL;
		explode doorr type EXPLODE_ON_HIT | FIRE | FALL;
		explode post type EXPLODE_ON_HIT | FIRE | FALL;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL;
		explode nanogun type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode beam type EXPLODE_ON_HIT | FIRE | FALL;
		explode wake type EXPLODE_ON_HIT | FIRE | FALL;
}
