#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare6, flare5, flare4, flare3, flare2, base, turret, spindle;

static-var  gun_1, last_fire, firstaim;

// Signal definitions
#define SIG_AIM				2
#define DELAY_UNIT_VAR 1024

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	gun_1 = flare1;
	firstaim = 1;
	start-script SmokeUnit();
	spin spindle around z-axis speed <15>;
}

RestoreAfterDelay()
{
	sleep 1000;
    firstaim = 1;
}

AimPrimary(heading, pitch)
{
    signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <250>;
	wait-for-turn turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		wait-for-turn spindle around z-axis;
		sleep 50;
	}
	if( gun_1 == 1 )
	{
		sleep 50;
	}
	if( gun_1 == 2 )
	{
		wait-for-turn spindle around z-axis;
		sleep 50;
	}
	if( gun_1 == 3 )
	{
		sleep 50;
	}
	if( gun_1 == 4 )
	{
		wait-for-turn spindle around z-axis;
		sleep 50;
	}
	if( gun_1 == 5 )
	{
		sleep 50;
	}
	++gun_1;
	if( gun_1 == 6 )
	{
		gun_1 = flare1;
	}
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		explode turret type BITMAPONLY;
		explode spindle type FIRE | SMOKE | FALL;
		explode flare1 type BITMAPONLY;
		explode flare2 type BITMAPONLY;
		explode flare3 type BITMAPONLY;
		explode flare4 type BITMAPONLY;
		explode flare5 type BITMAPONLY;
		explode flare6 type BITMAPONLY;
		return(0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY;
		explode turret type FIRE | SMOKE | FALL;
		explode spindle type FIRE | SMOKE | FALL;
		explode flare1 type FALL;
		explode flare2 type FIRE | SMOKE | FALL;
		explode flare3 type FALL;
		explode flare4 type FIRE | SMOKE | FALL;
		explode flare5 type FIRE | SMOKE | FALL;
		explode flare6 type FALL;
		return(0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode spindle type EXPLODE_ON_HIT | SMOKE | FALL;
		explode flare1 type EXPLODE_ON_HIT | SMOKE | FALL;
		explode flare2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode flare3 type FIRE | SMOKE | FALL;
		explode flare4 type SMOKE | FALL;
		explode flare5 type SMOKE | FALL;
		explode flare6 type SMOKE | FALL;
		return(0);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode spindle type EXPLODE_ON_HIT | FIRE | FALL;
		explode flare1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode flare2 type EXPLODE_ON_HIT | FIRE | FALL;
		explode flare3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode flare4 type EXPLODE_ON_HIT | FIRE | FALL;
		explode flare5 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode flare6 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
}
