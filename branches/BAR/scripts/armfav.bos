#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare, dish, base, gun, lbwheel, rbwheel, rfwheel, lfwheel;

static-var  restore_delay, currentSpeed, moveSpeed, wheelSpeed;

// Signal definitions
#define SIG_AIM				2

WheelControl()
{
	while(TRUE)
	{
		currentSpeed = (get CURRENT_SPEED)*20/moveSpeed;
		wheelSpeed = currentSpeed * 7;
		if (currentSpeed<2) currentSpeed=2;	// prevent infinite timing
		spin rfwheel around x-axis speed (<1.000000> * wheelSpeed ) * 2 accelerate <5.000000> * currentSpeed;
		spin lfwheel around x-axis speed (<1.000000> * wheelSpeed ) * 2 accelerate <5.000000> * currentSpeed;
		spin lbwheel around x-axis speed (<0.5.000000> * wheelSpeed ) * 2 accelerate <5.000000> * currentSpeed;
		spin rbwheel around x-axis speed (<0.5.000000> * wheelSpeed ) * 2 accelerate <5.000000> * currentSpeed;
		sleep 200;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script WheelControl();
	spin dish around y-axis speed <100> accelerate <1>;
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.000000>;
	turn base to x-axis Func_Var_1 speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
	return (0);
}

Create()
{
	restore_delay = 3000;
	moveSpeed = get MAX_SPEED;
	start-script SmokeUnit();
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn gun to y-axis <0.000000> speed <90.000000>;
	turn gun to x-axis <0.000000> speed <50.000000>;
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn gun to y-axis heading speed <200.000000>;
	turn gun to x-axis <0.000000> - pitch speed <200.000000>;
	wait-for-turn gun around y-axis;
	wait-for-turn gun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = gun;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		explode gun type BITMAPONLY;
		explode dish type FIRE | SMOKE | FALL;
		explode flare type BITMAPONLY;
		explode rfwheel type FIRE | SMOKE | FALL;
		explode lfwheel type BITMAPONLY;
		explode lbwheel type BITMAPONLY;
		explode rbwheel type BITMAPONLY;
		return(0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY;
		explode gun type FALL;
		explode dish type FALL;
		explode flare type FIRE | SMOKE | FALL;
		explode rfwheel type FIRE | SMOKE | FALL;
		explode lfwheel type FIRE | SMOKE | FALL;
		explode lbwheel type FIRE | SMOKE | FALL;
		explode rbwheel type FIRE | SMOKE | FALL;
		return(0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL;
		explode gun type SMOKE | FALL;
		explode dish type SMOKE | FALL;
		explode flare type FIRE | SMOKE | FALL;
		explode rfwheel type SMOKE | FALL;
		explode lfwheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode lbwheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode rbwheel type SMOKE | FALL;
		return(0);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode gun type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode dish type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode rfwheel type EXPLODE_ON_HIT | FIRE | FALL;
		explode lfwheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode lbwheel type EXPLODE_ON_HIT | FIRE | FALL;
		explode rbwheel type EXPLODE_ON_HIT | FIRE | FALL;
}
