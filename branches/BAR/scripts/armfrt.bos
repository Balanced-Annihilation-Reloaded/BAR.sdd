#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare, turret, sleeve, launcher, barrel;

static-var  launcher_1;

// Signal definitions
#define SIG_AIM				2



RockOnWaves()
{
	var rockDir, rockAng, rockSpeed;
	rockDir = <-0.1>;
	rockAng = <-0.1>;
	while( TRUE )
	{
		while( get ABS(rockAng) < <1.31> )
		{
			rockSpeed = <1.45> - get ABS(rockAng);
			turn base to x-axis rockAng speed rockSpeed*5;
			wait-for-turn base around x-axis;
			rockAng = rockAng + rockDir;
		}
		rockDir = 0 - rockDir;
		rockAng = rockAng + rockDir + rockDir;
	}
}


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script RockOnWaves();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}
RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <15.000000>;
	turn base to z-axis anglez speed <15.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to x-axis <0.000000> - anglex speed <12.000000>;
	turn base to z-axis <0.000000> - anglez speed <12.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to x-axis anglex / <0.010989> speed <9.000000>;
	turn base to z-axis anglez / <0.010989> speed <9.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to x-axis <0.000000> speed <3.000000>;
	turn base to z-axis <0.000000> speed <3.000000>;
	sleep 150;
	return (0);
}

Create()
{
	hide flare;
	dont-cache sleeve;
	dont-cache base;
	dont-cache launcher;
	dont-cache turret;
	dont-cache flare;
	dont-shade sleeve;
	dont-shade base;
	dont-shade launcher;
	dont-shade turret;
	dont-shade flare;
	launcher_1 = flare;
	start-script SmokeUnit();
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	if( launcher_1 == 1 )
	{
		turn sleeve to z-axis <0.000000> speed <400.000000>;
	}
	if( launcher_1 == 2 )
	{
		turn sleeve to z-axis <120.027473> speed <400.000000>;
	}
	if( launcher_1 == 3 )
	{
		turn sleeve to z-axis <-120.027473> speed <400.000000>;
	}
	turn turret to y-axis heading speed <450.000000>;
	turn launcher to x-axis <0.000000> - pitch speed <450.000000>;
	wait-for-turn sleeve around z-axis;
	wait-for-turn turret around y-axis;
	wait-for-turn launcher around x-axis;
	return (1);
}

FirePrimary()
{
	++launcher_1;
	if( launcher_1 == 4 )
	{
		launcher_1 = flare;
	}
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode sleeve type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode flare type BITMAPONLY | BITMAP3;
		explode launcher type BITMAPONLY | BITMAP4;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode sleeve type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode flare type FALL | BITMAP3;
		explode launcher type SHATTER | BITMAP4;
		explode turret type FALL | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode launcher type SHATTER | BITMAP4;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode launcher type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	return (0);
}
