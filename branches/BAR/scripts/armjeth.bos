#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  torso, rflare, lflare, pelvis, lleg, rleg, rthigh, lthigh,
       lturret, lbarrel, rbarrel, rturret, lexhaust, rexhaust, lfoot, rfoot;

static-var  bMoving, Static_Var_2, Static_Var_3, gun_3, restore_delay,
            statechg_DesiredState, statechg_StateChanging,
            moveSpeed, currentSpeed;

// Signal definitions
#define SIG_AIM_3			2


walk()
{
	while( bMoving )
	{
		//maxvelocity = 1.85-> 56 elmos/sec
		//animspeed 24 elmos/cycle
		//step 0
		if (bMoving)
		{
	
		turn rthigh to x-axis <0> speed <300.000000>;
		turn rleg to x-axis <0> speed <187.500000>;
		turn rfoot to x-axis <0> speed <75.000000>;

		turn lthigh to x-axis <-15> speed <525.000000>;
		turn lleg to x-axis <35> speed <412.500000>;
		turn lfoot to x-axis <-21> speed <45.000000>;

		move pelvis to y-axis [0] speed [3.750000];
		turn pelvis to z-axis <0> speed <22.500000>;
		turn pelvis to x-axis <0> speed <22.500000>;
		sleep 130;

		}
		if (bMoving)
		{
		//step 1
		turn rthigh to x-axis <41> speed <307.500000>;
		turn rleg to x-axis <-30> speed <225.000000>;
		turn rfoot to x-axis <-12> speed <90.000000>;
		turn lthigh to x-axis <-60> speed <337.500000>;
		turn lleg to x-axis <25> speed <75.000000>;
		turn lfoot to x-axis <15> speed <270.000000>;

		move pelvis to y-axis [-0.5] speed [3.750000];
		turn pelvis to z-axis <2> speed <15.000000>;
		turn pelvis to x-axis <1.5> speed <11.250000>;

		sleep 130;
		}
		if (bMoving)
		{

		//step 2
		turn rthigh to x-axis <55> speed <105.000000>;
		turn rleg to x-axis <-20> speed <75.000000>;
		turn rfoot to x-axis <-15> speed <22.500000>;
		turn lthigh to x-axis <-40> speed <150.000000>;
		turn lleg to x-axis <25> now;
		turn lfoot to x-axis <10> speed <37.500000>;

		turn torso to y-axis <5> speed <37.500000>;

		move pelvis to y-axis [-0.5] now;
		turn pelvis to z-axis <3> speed <7.500000>;
		turn pelvis to x-axis <3> speed <11.250000>;

		sleep 130;
		}
		if (bMoving)
		{

		//step 3
		turn rthigh to x-axis <-15> speed <525.000000>;
		turn rleg to x-axis <35> speed <412.500000>;
		turn rfoot to x-axis <-21> speed <45.000000>;

		turn lthigh to x-axis <0> speed <300.000000>;
		turn lleg to x-axis <0> speed <187.500000>;
		turn lfoot to x-axis <0> speed <75.000000>;

		turn torso to y-axis <0> speed <37.500000>;

		move pelvis to y-axis [0] speed [3.750000];
		turn pelvis to z-axis <0> speed <22.500000>;
		turn pelvis to x-axis <0> speed <22.500000>;

		sleep 130;
		}
		if (bMoving)
		{

		//step 4
		turn rthigh to x-axis <-60> speed <337.500000>;
		turn rleg to x-axis <25> speed <75.000000>;
		turn rfoot to x-axis <15> speed <270.000000>;
		turn lthigh to x-axis <41> speed <307.500000>;
		turn lleg to x-axis <-30> speed <225.000000>;
		turn lfoot to x-axis <-12> speed <90.000000>;

		move pelvis to y-axis [-0.5] speed [3.750000];
		turn pelvis to z-axis <-2> speed <15.000000>;
		turn pelvis to x-axis <1.5> speed <11.250000>;

		sleep 130;
		}
		
		//step 5
		turn rthigh to x-axis <-40> speed <150.000000>;
		turn rleg to x-axis <25> now;
		turn rfoot to x-axis <10> speed <37.500000>;

		turn lthigh to x-axis <55> speed <105.000000>;
		turn lleg to x-axis <-20> speed <75.000000>;
		turn lfoot to x-axis <-15> speed <22.500000>;

		move pelvis to y-axis [-0.5] now;
		turn pelvis to z-axis <-3> speed <7.500000>;
		turn pelvis to x-axis <3> speed <11.250000>;

		sleep 130;
		
	
	}
}

Go()
{
	Static_Var_2 = 1;
	if( !Static_Var_3 )
	{
		turn lturret to z-axis <0.000000> now;
		turn lturret to z-axis <-90> speed <360>;
		turn rturret to z-axis <0.000000> now;
		turn rturret to z-axis <90> speed <360>;
		sleep 250;
		Static_Var_3 = 1;
	}
}

Stop()
{
	if( Static_Var_3 )
	{
		Static_Var_3 = 0;
		turn rturret to z-axis <0> speed <360>;
		turn lturret to z-axis <0> speed <360>;
		sleep 250;
	}
	Static_Var_2 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
		else
		{
			call-script Go();
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = Static_Var_2;
		if( moving )
		{
			call-script walk();
			justmoved = TRUE;
		}
		else
		{
			if( justmoved )
			{
				turn rthigh to x-axis <0> speed <600.000000>;
				turn rleg to x-axis <0> speed <375.000000>;
				turn rfoot to x-axis <0> speed <150.000000>;
				turn lthigh to x-axis <0> speed <600.000000>;
				turn lleg to x-axis <0> speed <375.000000>;
				turn lfoot to x-axis <0> speed <150.000000>;
		
		
				move pelvis to y-axis [0] speed [7.500000];
				turn pelvis to z-axis <0> speed <45.000000>;
				turn pelvis to x-axis <0> speed <45.000000>;
				if( !aiming )
				{
					turn torso to y-axis <0.000000> speed <90.000000>;
				}
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
}

UnitSpeed()
{
	while(TRUE)
	{
		currentSpeed = (get CURRENT_SPEED)*160/moveSpeed;
		if (currentSpeed<20) currentSpeed=20;
		sleep 142;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script UnitSpeed();
	start-script MotionControl();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from pelvis;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide rflare;
	hide lflare;
	bMoving = FALSE;
	Static_Var_2 = 0;
	Static_Var_3 = 0;
	gun_3 = torso;
	restore_delay = 3000;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	moveSpeed = get MAX_SPEED;
	currentSpeed = 100;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 5;
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = torso;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	turn torso to y-axis <0.000000> speed <90.000000>;
}

AimTertiary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	while( !Static_Var_3 )
	{
		sleep 100;
	}
	turn torso to y-axis heading speed <275.000000>;
	wait-for-turn torso around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireTertiary()
{
	if( gun_3 )
	{
		move lbarrel to z-axis [-2] speed [35.000000];
		wait-for-move lbarrel along z-axis;
		emit-sfx 1024 from rexhaust;
		move lbarrel to z-axis [0.000000] speed [4.000000];
	}
	else
	{
		move rbarrel to z-axis [-2] speed [35.000000];
		wait-for-move rbarrel along z-axis;
		emit-sfx 1024 from lexhaust;
		move rbarrel to z-axis [0.000000] speed [4.000000];
	}
	gun_3 = !gun_3;
}

AimFromTertiary(piecenum)
{
	piecenum = torso;
}

QueryTertiary(piecenum)
{
	piecenum = rflare + gun_3;
}

Killed(severity, corpsetype)
{
	hide rflare;
	hide lflare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode lflare type BITMAPONLY | BITMAP2;
		explode lleg type BITMAPONLY | BITMAP4;
		explode lbarrel type BITMAPONLY | BITMAP5;
		explode lthigh type BITMAPONLY | BITMAP1;
		explode lturret type BITMAPONLY | BITMAP2;
		explode pelvis type BITMAPONLY | BITMAP3;
		explode rflare type BITMAPONLY | BITMAP4;
		explode rleg type BITMAPONLY | BITMAP1;
		explode rbarrel type BITMAPONLY | BITMAP2;
		explode rthigh type BITMAPONLY | BITMAP3;
		explode rturret type BITMAPONLY | BITMAP4;
		explode torso type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode lflare type FALL | BITMAP2;
		explode lleg type FALL | BITMAP4;
		explode lbarrel type FALL | BITMAP5;
		explode lthigh type FALL | BITMAP1;
		explode lturret type FALL | BITMAP2;
		explode pelvis type FALL | BITMAP3;
		explode rflare type FALL | BITMAP4;
		explode rleg type FALL | BITMAP1;
		explode rbarrel type FALL | BITMAP2;
		explode rthigh type FALL | BITMAP3;
		explode rturret type FALL | BITMAP4;
		explode torso type SHATTER | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode lflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode lbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lturret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rturret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode torso type SHATTER | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode lflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode lturret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rturret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode torso type SHATTER | EXPLODE_ON_HIT | BITMAP5;
}
