#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, dome, gun, barrel, flare;

static-var  OpenClosed, restore_delay, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM			2
#define SIG_RESTORE		8

Go()
{
	set ARMORED to 0;
	turn dome to x-axis <-135.032967> speed <550.000000>;
	wait-for-turn dome around x-axis;
	move turret to y-axis [32] speed [25.000000];
	move barrel to z-axis [6] speed [15.000000];
	wait-for-move turret along y-axis;
	wait-for-move barrel along z-axis;
	OpenClosed = 1;
}

Stop()
{
	OpenClosed = 0;
	turn gun to x-axis <0.000000> speed <90.000000>;
	move barrel to z-axis [0] speed [15.000000];

	wait-for-turn gun around x-axis;
	wait-for-move barrel along z-axis;
	move turret to y-axis [00000] speed [25.000000];
	wait-for-move turret along y-axis;
	turn dome to x-axis <0.000000> speed <550.000000>;
	wait-for-turn dome around x-axis;
	set ARMORED to 1;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script Stop();
			currentstate = 1;
		}
		else
		{
			call-script Go();
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

RestoreAfterDelay()
{
	signal SIG_RESTORE;
	set-signal-mask SIG_RESTORE;
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RestoreAfterDelay();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare;
	restore_delay = 2000;
	OpenClosed = 0;
	statechg_DesiredState = FALSE;
	statechg_StateChanging = FALSE;
	start-script SmokeUnit();
//	turn dome to x-axis <-135.032967> now;
//	move gun to x-axis [1.500000] now;
}

/*
Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}
*/

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !OpenClosed )
	{
		sleep 250;
	}
	turn turret to y-axis heading speed <200.000000>;
	turn gun to x-axis <0.000000> - pitch speed <200.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	show flare;
	sleep 150;
	hide flare;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = turret;
}

AimFromPrimary(piecenum)
{
	piecenum = gun;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		explode turret type BITMAPONLY;
		explode gun type BITMAPONLY;
		explode barrel type FIRE | SMOKE | FALL;
		explode flare type BITMAPONLY;
		explode dome type BITMAPONLY;
		return(0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY;
		explode turret type FALL;
		explode gun type FIRE | SMOKE | FALL;
		explode barrel type FIRE | SMOKE | FALL;
		explode flare type FIRE | SMOKE | FALL;
		explode dome type FIRE | SMOKE | FALL;
		return(0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL;
		explode turret type EXPLODE_ON_HIT | SMOKE | FALL;
		explode gun type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode barrel type SMOKE | FALL;
		explode flare type SMOKE | FALL;
		explode dome type FIRE | SMOKE | FALL;
		return(0);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL;
		explode gun type EXPLODE_ON_HIT | FIRE | FALL;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode dome type EXPLODE_ON_HIT | FIRE | FALL;
}
