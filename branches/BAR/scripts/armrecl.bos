#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare, barrel, ldoor, rdoor, lfin, rfin, screw;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging;

// Signal definitions


activatescr()
{
	if( TRUE )
	{
		move barrel to z-axis [5] speed [5];
		sleep 200;
	}
	if( TRUE )
	{
		move ldoor to x-axis [-3] speed [5];
		move rdoor to x-axis [3] speed [5];
		sleep 300;
	}
}

deactivatescr()
{
	if( TRUE )
	{
		move ldoor to x-axis [0] speed [5];
		move rdoor to x-axis [0] speed [5];
		sleep 300;
	}
	if( TRUE )
	{
		move barrel to z-axis [0] speed [5];
		sleep 200;
	}
}

StartMoving()
{
	spin screw around z-axis speed <360>;
	move lfin to x-axis [-10] speed [10];
	move rfin to x-axis [10] speed [10];
	sleep 1000;
}

StopMoving()
{	
	stop-spin screw around z-axis;
	move lfin to x-axis [0] speed [10];
	move rfin to x-axis [0] speed [10];
	sleep 1000;
}

Go()
{
	call-script activatescr();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	Static_Var_1 = 0;
	call-script InitState();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
	start-script RequestState(0);
}

StopBuilding()
{
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	piecenum = flare;
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
}
