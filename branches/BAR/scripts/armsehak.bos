#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, fanfr, fanfl, fanbr, fanbl, cowlfr, cowlfl, cowlbr, cowlbl, dish, turret, wing1, wingr;

static-var  Static_Var_1,  statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_MOVE			2


activatescr()
{
	if( TRUE )
	{
		spin fanfr around y-axis speed <200> accelerate <10>;
		turn cowlfr to x-axis <15> speed <5>; // plus X turns it forward
		spin fanfl around y-axis speed <200> accelerate <10>;
		turn cowlfl to x-axis <15> speed <5>; // plus X turns it forward
		spin fanbr around y-axis speed <200> accelerate <10>;
		turn cowlbr to x-axis <15> speed <5>; // plus X turns it forward
		spin fanbl around y-axis speed <200> accelerate <10>;
		turn cowlbl to x-axis <15> speed <5>; // plus X turns it forward
		 
		sleep 675;
	}
	if( TRUE )
	{	
		turn turret to x-axis <-180> speed <180>;
	
		sleep 681;
	}
	if( TRUE )
	{
		spin dish around y-axis speed <60> accelerate <1>;
		sleep 679;
	}

	if( TRUE )
	{
		turn wing1 to z-axis <-90> speed <30>;
		turn wingr to z-axis <90> speed <30>;
		sleep 679;
	}

	sleep 679;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{

	if( TRUE )
	{
		turn wing1 to z-axis <0> speed <30>;
		turn wingr to z-axis <0> speed <30>;
		sleep 679;
	}
	if( TRUE )
	{
		stop-spin dish around y-axis decelerate <1>;
		sleep 679;
	}
	if( TRUE )
	{	
		turn turret to x-axis <0> speed <180>;
	
		sleep 681;
	}

	if( TRUE )
	{
		stop-spin fanfr around y-axis decelerate <10>;
		turn cowlfr to x-axis <0> speed <5>; // plus X turns it forward
		stop-spin fanfl around y-axis decelerate <10>;
		turn cowlfl to x-axis <0> speed <5>; // plus X turns it forward
		stop-spin fanbr around y-axis decelerate <10>;
		turn cowlbr to x-axis <0> speed <5>; // plus X turns it forward
		stop-spin fanbl around y-axis decelerate <10>;
		turn cowlbl to x-axis <0> speed <5>; // plus X turns it forward
		 
		sleep 675;
	}
	sleep 679;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	call-script InitState();
	start-script SmokeUnit();
	return (0);
}

Activate()
{
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	start-script RequestState(1);
	return (0);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
}

StopMoving()
{
	signal SIG_MOVE;
	return (0);
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}


Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	return (0);
}
