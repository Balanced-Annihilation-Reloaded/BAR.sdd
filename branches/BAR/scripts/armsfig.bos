#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, wingl, wingr, fanl, fanr, turretl, turretr, flarel, flarer, thrust;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, statechg_DesiredState, statechg_StateChanging, gun_1;

// Signal definitions
#define SIG_MOVE			2


activatescr()
{
	if( TRUE )
	{
		
		spin fanl around y-axis speed <200> accelerate <8>;
		spin fanr around y-axis speed <-200> accelerate <8>;
		turn wingl to z-axis <90> speed <90.000000>;
		turn wingr to z-axis <-90> speed <90.000000>;
		sleep 690;
	}
	sleep 10;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	if( TRUE )
	{
	
		stop-spin fanl around y-axis decelerate <8>;
		stop-spin fanr around y-axis decelerate <8>;
		turn wingl to z-axis <0> speed <90.000000>;
		turn wingr to z-axis <0> speed <90.000000>;
		sleep 990;
	}
	sleep 10;
	return (0);
}

HitByWeapon(anglex, anglez)
{
	turn base to z-axis <0> - anglez speed <105.000000>;
	turn base to x-axis <0> - anglex speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <15.000000>;
	turn base to x-axis <0.000000> speed <15.000000>;
}



SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

MoveRate2()
{
	if( Rand( 1, 10 ) == 1 )
	{
		if( !Static_Var_3 )
		{
			Static_Var_3 = 1;
			turn base to z-axis <-120.027473> speed <120.000000>;
			wait-for-turn base around z-axis;
			turn base to z-axis <120.027473> speed <180.000000>;
			wait-for-turn base around z-axis;
			turn base to z-axis <0.000000> speed <120.000000>;
			Static_Var_3 = 0;
		}
	}
	return (0);
}

Create()
{
	gun_1=0;
	call-script InitState();
	start-script SmokeUnit();
	return (0);
}

Activate()
{
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	start-script RequestState(1);
	return (0);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;

}

StopMoving()
{
	signal SIG_MOVE;
	return (0);
}

FirePrimary()
{

	if( gun_1 == 0 )
	{
		gun_1 = 1;
		return (0);
	}
	if( gun_1 == 1 )
	{
		gun_1 = 0;
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flarel;
	}
	if( gun_1 == 1 )
	{
		piecenum = flarer;
	}
	return (0);
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flarel;
	}
	if( gun_1 == 1 )
	{
		piecenum = flarer;
	}
	return (0);
}



SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		explode thrust type BITMAPONLY;
		explode fanr type FIRE | SMOKE | FALL;
		explode wingr type BITMAPONLY;
		explode turretr type BITMAPONLY;
		explode flarer type BITMAPONLY;
		explode turretl type BITMAPONLY;
		explode flarel type BITMAPONLY;
		explode fanl type BITMAPONLY;
		explode wingl type BITMAPONLY;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY;
		explode thrust type FIRE | SMOKE | FALL;
		explode fanr type FALL;
		explode wingr type FIRE | SMOKE | FALL;
		explode turretr type FALL;
		explode flarer type FALL;
		explode turretl type FIRE | SMOKE | FALL;
		explode flarel type FALL;
		explode fanl type FIRE | SMOKE | FALL;
		explode wingl type FALL;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL;
		explode thrust type SMOKE | FALL;
		explode fanr type SMOKE | FALL;
		explode wingr type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode turretr type FIRE | SMOKE | FALL;
		explode flarer type EXPLODE_ON_HIT | SMOKE | FALL;
		explode turretl type EXPLODE_ON_HIT | SMOKE | FALL;
		explode flarel type EXPLODE_ON_HIT | SMOKE | FALL;
		explode fanl type EXPLODE_ON_HIT | SMOKE | FALL;
		explode wingl type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode thrust type EXPLODE_ON_HIT | FIRE | FALL;
		explode fanr type EXPLODE_ON_HIT | FIRE | FALL;
		explode wingr type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode turretr type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode flarer type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode turretl type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode flarel type EXPLODE_ON_HIT | FIRE | FALL;
		explode fanl type EXPLODE_ON_HIT | FIRE | FALL;
		explode wingl type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
	return corpsetype;
}
