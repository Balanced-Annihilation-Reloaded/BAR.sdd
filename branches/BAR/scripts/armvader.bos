#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  leg1, leg2, leg3, leg4, base, body;

static-var  bMoving;

#define SIG_MOVE 1
walkscr()
{
	while( bMoving )
	{
		if( bMoving )
		{
			turn leg1 to z-axis <0.000000> now;
			sleep 33;
		}

	}
}

MotionControl(Func_Var_1)
{
	while( TRUE )
	{
		Func_Var_1 = bMoving;
		if( Func_Var_1 )
		{
			call-script walkscr();
		}
		else
		{
			sleep 100;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script MotionControl();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{

	bMoving = FALSE;
	start-script SmokeUnit();
}

HitByWeapon(anglex, anglez)
{
	turn base to z-axis <0> - anglez speed <105.000000>;
	turn base to x-axis <0> - anglex speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}


StartMoving()
{
	signal SIG_MOVE;
	move leg1 to y-axis [0] speed [28];
	move leg2 to y-axis [0] speed [28];
	move base to y-axis [0] speed [28];
	spin base around x-axis speed <270> accelerate <270>;
	sleep 150;
	move leg3 to y-axis [0] speed [28];
	move leg4 to y-axis [0] speed [28];
	bMoving = TRUE;
}

StopMoving()
{
	set-signal-mask SIG_MOVE;
	stop-spin base around x-axis;
	turn base to x-axis <0> speed <270>;
	wait-for-turn base around x-axis;	
	move leg1 to y-axis [-6] speed [18];
	move leg2 to y-axis [-6] speed [18];
	move leg4 to y-axis [-6] speed [18];
	move leg3 to y-axis [-6] speed [18];
	move base to y-axis [6] speed [18];

	
	bMoving = FALSE;
}

FireWeapon1()
{
	emit-sfx 4097 from leg1; //Weapon2 detonates the crawling bomb once weapon1 fires
}

QueryWeapon1(piecenum)
{
	piecenum = base;
}

AimFromWeapon1(piecenum)
{
	piecenum = base;
}


QueryWeapon2(piecenum)
{
	piecenum = base;
}

AimFromWeapon2(piecenum)
{
	piecenum = base;
}

FireWeapon2()
{
}

SweetSpot(piecenum)
{
	piecenum = leg1;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		explode leg1 type FIRE | SMOKE | FALL;
		explode leg2 type BITMAPONLY;
		explode leg3 type BITMAPONLY;
		explode leg4 type BITMAPONLY;
		explode body type BITMAPONLY;
		return(0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type FIRE | SMOKE | FALL;
		explode leg1 type FIRE | SMOKE | FALL;
		explode leg2 type FIRE | SMOKE | FALL;
		explode leg3 type FIRE | SMOKE | FALL;
		explode leg4 type FIRE | SMOKE | FALL;
		explode body type FIRE | SMOKE | FALL;
		return(0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL;
		explode leg1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode leg2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode leg3 type EXPLODE_ON_HIT | SMOKE | FALL;
		explode leg4 type EXPLODE_ON_HIT | SMOKE | FALL;
		explode body type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		return(0);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode leg1 type EXPLODE_ON_HIT | FIRE | FALL;
		explode leg2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode leg3 type EXPLODE_ON_HIT | FIRE | FALL;
		explode leg4 type EXPLODE_ON_HIT | FIRE | FALL;
		explode body type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
}
