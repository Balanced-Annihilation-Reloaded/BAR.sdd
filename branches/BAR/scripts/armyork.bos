#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, flare3, flare4, turret, base, fwheel, brwheel,
       blwheel,sleeve1,sleeve2, barrel1,barrel2,barrel3,barrel4;

static-var  restore_delay, gun_3;

// Signal definitions
#define SIG_AIM_3			2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}


HitByWeapon(anglex, anglez)
{
	turn base to z-axis <0> - anglez speed <65.000000>;
	turn base to x-axis <0> - anglex speed <65.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}


StartMoving()
{
	spin fwheel around x-axis speed <150.032967>;
	spin blwheel around x-axis speed <150.032967>;
	spin brwheel around x-axis speed <150.032967>;
}

StopMoving()
{
	stop-spin fwheel around x-axis;
	stop-spin blwheel around x-axis;
	stop-spin brwheel around x-axis;
}

Create()
{
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	gun_3 = 0;
	restore_delay = 5000;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = 5000;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	turn turret to y-axis <0.000000> speed <600.000000>;
	turn sleeve1 to x-axis <0.000000> speed <600.000000>;
	turn sleeve2 to x-axis <0.000000> speed <600.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve1 around x-axis;
	return (1);
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn turret to y-axis heading speed <650.000000>;
	turn sleeve1 to x-axis <0.000000> - pitch speed <600.000000>;
	turn sleeve2 to x-axis <0.000000> - pitch speed <600.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve2 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireTertiary()
{
	if( gun_3 == 0 )
	{
		move barrel1 to z-axis [-10.000000] now;
		sleep 150;
		move barrel1 to z-axis [0.000000] speed [37.500000];
	}
	if( gun_3 == 1 )
	{
		move barrel2 to z-axis [-10.000000] now;
		sleep 150;
		move barrel2 to z-axis [0.000000] speed [37.500000];
	}
	if( gun_3 == 2 )
	{
		move barrel3 to z-axis [-10.000000] now;
		sleep 150;
		move barrel3 to z-axis [0.000000] speed [37.500000];
	}
	if( gun_3 == 3 )
	{
		move barrel4 to z-axis [-10.000000] now;
		sleep 150;
		move barrel4 to z-axis [0.000000] speed [37.500000];
	}
	sleep 50;
	++gun_3;
	if( gun_3 == 4 )
	{
		gun_3 = 0;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = turret;
}

AimFromTertiary(piecenum)
{
	piecenum = turret;
}

QueryTertiary(piecenum)
{
	piecenum = turret;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		explode brwheel type BITMAPONLY;
		explode blwheel type BITMAPONLY;
		explode fwheel type BITMAPONLY;
		explode turret type BITMAPONLY;
		explode sleeve1 type BITMAPONLY;
		explode barrel3 type FIRE | SMOKE | FALL;
		explode flare3 type BITMAPONLY;
		explode barrel4 type BITMAPONLY;
		explode flare4 type BITMAPONLY;
		explode sleeve2 type BITMAPONLY;
		explode barrel1 type BITMAPONLY;
		explode flare1 type BITMAPONLY;
		explode barrel2 type BITMAPONLY;
		explode flare2 type BITMAPONLY;
		return(0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY;
		explode brwheel type FALL;
		explode blwheel type FIRE | SMOKE | FALL;
		explode fwheel type FIRE | SMOKE | FALL;
		explode turret type FIRE | SMOKE | FALL;
		explode sleeve1 type FIRE | SMOKE | FALL;
		explode barrel3 type FIRE | SMOKE | FALL;
		explode flare3 type FIRE | SMOKE | FALL;
		explode barrel4 type FIRE | SMOKE | FALL;
		explode flare4 type FIRE | SMOKE | FALL;
		explode sleeve2 type FIRE | SMOKE | FALL;
		explode barrel1 type FIRE | SMOKE | FALL;
		explode flare1 type FALL;
		explode barrel2 type FIRE | SMOKE | FALL;
		explode flare2 type FALL;
		return(0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL;
		explode brwheel type SMOKE | FALL;
		explode blwheel type EXPLODE_ON_HIT | SMOKE | FALL;
		explode fwheel type EXPLODE_ON_HIT | SMOKE | FALL;
		explode turret type EXPLODE_ON_HIT | SMOKE | FALL;
		explode sleeve1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode barrel3 type EXPLODE_ON_HIT | SMOKE | FALL;
		explode flare3 type FIRE | SMOKE | FALL;
		explode barrel4 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode flare4 type EXPLODE_ON_HIT | SMOKE | FALL;
		explode sleeve2 type EXPLODE_ON_HIT | SMOKE | FALL;
		explode barrel1 type FIRE | SMOKE | FALL;
		explode flare1 type FIRE | SMOKE | FALL;
		explode barrel2 type SMOKE | FALL;
		explode flare2 type SMOKE | FALL;
		return(0);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode brwheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode blwheel type EXPLODE_ON_HIT | FIRE | FALL;
		explode fwheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode sleeve1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode barrel3 type EXPLODE_ON_HIT | FIRE | FALL;
		explode flare3 type EXPLODE_ON_HIT | FIRE | FALL;
		explode barrel4 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode flare4 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode sleeve2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode barrel1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode flare1 type EXPLODE_ON_HIT | FIRE | FALL;
		explode barrel2 type EXPLODE_ON_HIT | FIRE | FALL;
		explode flare2 type EXPLODE_ON_HIT | FIRE | FALL;
}
