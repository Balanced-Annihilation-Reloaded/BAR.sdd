#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, thrust, wingl, wingr, turretl, turretr, flarer, flarel, fan;

static-var  gun_1, Static_Var_2, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_MOVE			2


activatescr()
{
	turn wingl to y-axis <-90> speed <90>;
	turn wingr to y-axis <90> speed <90>;
	spin fan around y-axis speed <200> accelerate <10>;
	sleep 1000;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	turn wingl to y-axis <0> speed <90>;
	turn wingr to y-axis <0> speed <90>;
	stop-spin fan around y-axis decelerate <10>;
	sleep 1000;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}
StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	turn base to y-axis <0.000000> speed <150.000000>;
	wait-for-turn base around y-axis;
	sleep 15;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	gun_1 = base;
	Static_Var_2 = 3000;
	call-script InitState();
	start-script SmokeUnit();
	start-script StopMoving();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
}



SweetSpot(piecenum)
{
	piecenum = base;
}

RestoreAfterDelay()
{
	sleep Static_Var_2;
	turn base to y-axis <0.000000> speed <150.000000>;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flarel;
	}
	if( gun_1 == 1 )
	{
		piecenum = flarer;
	}
}

AimPrimary(heading, pitch)
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	turn base to y-axis heading speed <100.000000>;
	wait-for-turn base around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimFromPrimary(piecenum)
{
	piecenum = base;
}

Shot1()
{
	gun_1 = !gun_1;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
}
