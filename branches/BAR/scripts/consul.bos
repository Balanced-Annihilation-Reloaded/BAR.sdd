#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, rtracks, ltracks, larm1, larm2, larm3, rarm1,rarm2,rarm3,rturret,lturret,lnano,rnano;

static-var  unitviewer, Static_Var_2, statechg_DesiredState, statechg_StateChanging,nano;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis <0> - Func_Var_2 speed <105.000000>;
	turn base to x-axis <0> - Func_Var_1 speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
	return (0);
}

Go()
{
	if( TRUE )
	{
		turn larm2 to y-axis <45> speed <180>;
		turn rarm2 to y-axis <-45> speed <180>;
		turn larm3 to y-axis <90> speed <360>;
		turn rarm3 to y-axis <-90> speed <360>;
		
		sleep 60;
		turn larm1 to x-axis <-90> speed <360>;
		turn rarm1 to x-axis <-90> speed <360>;
		turn lturret to x-axis <-90> - Static_Var_2 speed <360>;
		turn rturret to x-axis <-90> + Static_Var_2 speed <360>;
		sleep 100;
		turn larm2 to y-axis <0> speed <180>;
		turn rarm2 to y-axis <0> speed <180>;
		sleep 150;

	}
	set INBUILDSTANCE to 1;
	return (0);
}

Stop()
{
	set INBUILDSTANCE to 0;
	if( TRUE )
	{
		
		turn larm1 to x-axis <0> speed <360>;
		turn rarm1 to x-axis <0> speed <360>;
		turn lturret to x-axis <0> speed <360>;
		turn rturret to x-axis <0> speed <360>;
		
		turn larm2 to y-axis <45> speed <180>;
		turn rarm2 to y-axis <-45> speed <180>;
		sleep 250;
		turn larm2 to y-axis <0> speed <180>;
		turn rarm2 to y-axis <0> speed <180>;
		turn larm3 to y-axis <0> speed <360>;
		turn rarm3 to y-axis <0> speed <360>;
		sleep 60;
	}
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	unitviewer = FALSE;
	Static_Var_2 = 0;
	nano=0;
	call-script InitState();
	start-script SmokeUnit();
	return (0);
}


QueryNanoPiece(piecenum)
{
	if (nano==1){
	
		piecenum = rnano;
	}
	else
	{
		piecenum = lnano;
	}
	nano = !nano;
	return (0);
}


SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Activate()
{
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	start-script RequestState(1);
	return (0);
}

StartBuilding(Func_Var_1)
{
	Static_Var_2 = Func_Var_1;
	start-script RequestState(0);
	return (0);
}

StopBuilding()
{
	start-script RequestState(1);
	return (0);
}

TargetHeading(Func_Var_1)
{
	Static_Var_2 = 0 - Func_Var_1;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		explode ltracks type BITMAPONLY;
		explode larm1 type BITMAPONLY;
		explode larm2 type BITMAPONLY;
		explode larm3 type BITMAPONLY;
		explode lturret type FIRE | SMOKE | FALL;
		explode lnano type BITMAPONLY;
		explode rtracks type BITMAPONLY;
		explode rarm1 type BITMAPONLY;
		explode rarm2 type BITMAPONLY;
		explode rarm3 type BITMAPONLY;
		explode rturret type BITMAPONLY;
		explode rnano type BITMAPONLY;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY;
		explode ltracks type FALL;
		explode larm1 type FIRE | SMOKE | FALL;
		explode larm2 type FALL;
		explode larm3 type FIRE | SMOKE | FALL;
		explode lturret type FIRE | SMOKE | FALL;
		explode lnano type FIRE | SMOKE | FALL;
		explode rtracks type FIRE | SMOKE | FALL;
		explode rarm1 type FIRE | SMOKE | FALL;
		explode rarm2 type FIRE | SMOKE | FALL;
		explode rarm3 type FIRE | SMOKE | FALL;
		explode rturret type FIRE | SMOKE | FALL;
		explode rnano type FALL;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL;
		explode ltracks type FIRE | SMOKE | FALL;
		explode larm1 type SMOKE | FALL;
		explode larm2 type FIRE | SMOKE | FALL;
		explode larm3 type FIRE | SMOKE | FALL;
		explode lturret type SMOKE | FALL;
		explode lnano type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode rtracks type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode rarm1 type EXPLODE_ON_HIT | SMOKE | FALL;
		explode rarm2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode rarm3 type FIRE | SMOKE | FALL;
		explode rturret type FIRE | SMOKE | FALL;
		explode rnano type SMOKE | FALL;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode ltracks type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode larm1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode larm2 type EXPLODE_ON_HIT | FIRE | FALL;
		explode larm3 type EXPLODE_ON_HIT | FIRE | FALL;
		explode lturret type EXPLODE_ON_HIT | FIRE | FALL;
		explode lnano type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode rtracks type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode rarm1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode rarm2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode rarm3 type EXPLODE_ON_HIT | FIRE | FALL;
		explode rturret type EXPLODE_ON_HIT | FIRE | FALL;
		explode rnano type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
	return corpsetype;
}
