#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  torso, head, flare, lleg, barrel,
       pelvis, rleg, lfoot, rfoot,turret;

static-var  restore_delay,bMoving;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4


walk()
{
	//1.35*30= 40.5 elmos per sec
	//


while(TRUE){
	//step 0
		//step 0

	if (bMoving)
	{
		move rleg to y-axis [0] speed [11.250000];
		turn rleg to x-axis <0> speed <157.500000>;
		turn rleg to z-axis <0> speed <15.000000>;
		turn rfoot to x-axis <0> speed <127.500000>;
		turn rfoot to y-axis <0> speed <75.000000>;
		move lleg to y-axis [3] now;
		turn lleg to x-axis <0> speed <52.500000>;
		turn lleg to z-axis <0> now;
		turn lfoot to x-axis <0> speed <52.500000>;
		turn lfoot to y-axis <0> now;
		
		turn torso to x-axis <0> speed <30.000000>;
		turn torso to y-axis <0> speed <90.000000>;
		turn torso to z-axis <0> speed <30.000000>;
		move torso to y-axis [0] now;

		sleep 125;
	}
	//step 1
	if (bMoving)
	{
		move rleg to y-axis [0] now;
		turn rleg to x-axis <16> speed <120.000000>;
		turn rleg to z-axis <8> speed <60.000000>;
		turn rfoot to x-axis <-12> speed <90.000000>;
		turn rfoot to y-axis <11> speed <82.500000>;
		move lleg to y-axis [0] speed [22.500000];
		turn lleg to x-axis <-19> speed <142.500000>;
		turn lleg to z-axis <0> now;
		turn lfoot to x-axis <24> speed <180.000000>;
		turn lfoot to y-axis <0> now;
		
		turn torso to x-axis <-4> speed <30.000000>;
		turn torso to y-axis <-12> speed <90.000000>;
		turn torso to z-axis <-4> speed <30.000000>;
		move torso to y-axis [0.8] speed [6.000000];

		sleep 125;
	}

	//step 2
	if (bMoving)
	{
		move rleg to y-axis [0] now;
		turn rleg to x-axis <36> speed <150.000000>;
		turn rleg to z-axis <19> speed <82.500000>;
		turn rfoot to x-axis <-32> speed <150.000000>;
		turn rfoot to y-axis <0> speed <82.500000>;
		move lleg to y-axis [0] now;
		turn lleg to x-axis <-23> speed <30.000000>;
		turn lleg to z-axis <-4> speed <30.000000>;
		turn lfoot to x-axis <7> speed <127.500000>;
		turn lfoot to y-axis <16> speed <120.000000>;
		
		turn torso to x-axis <0> speed <30.000000>;
		turn torso to y-axis <-18> speed <45.000000>;
		turn torso to z-axis <-6> speed <15.000000>;
		move torso to y-axis [0] speed [6.000000];

		sleep 125;
	}

	//step 3
	if (bMoving)
	{
		move rleg to y-axis [3] speed [22.500000];
		turn rleg to x-axis <7> speed <217.500000>;
		turn rleg to z-axis <0> speed <142.500000>;
		turn rfoot to x-axis <-7> speed <187.500000>;
		turn rfoot to y-axis <0> now;
		move lleg to y-axis [-1.5] speed [11.250000];
		turn lleg to x-axis <-21> speed <15.000000>;
		turn lleg to z-axis <-2> speed <15.000000>;
		turn lfoot to x-axis <17> speed <75.000000>;
		turn lfoot to y-axis <10> speed <45.000000>;
		
		turn torso to x-axis <4> speed <30.000000>;
		turn torso to y-axis <-12> speed <45.000000>;
		turn torso to z-axis <-4> speed <15.000000>;
		move torso to y-axis [0] now;

		sleep 125;
	}

	//step 4
	if (bMoving)
	{
		move rleg to y-axis [3] now;
		turn rleg to x-axis <0> speed <52.500000>;
		turn rleg to z-axis <0> now;
		turn rfoot to x-axis <0> speed <52.500000>;
		turn rfoot to y-axis <0> now;
		move lleg to y-axis [0] speed [37.500000];
		turn lleg to x-axis <0> speed <157.500000>;
		turn lleg to z-axis <0> speed <15.000000>;
		turn lfoot to x-axis <0> speed <127.500000>;
		turn lfoot to y-axis <0> speed <75.000000>;
		
		
		turn torso to x-axis <0> speed <30.000000>;
		turn torso to y-axis <0> speed <90.000000>;
		turn torso to z-axis <0> speed <30.000000>;
		move torso to y-axis [0] now;

		sleep 125;
	}

	//step 5
	if (bMoving)
	{
		move rleg to y-axis [0] speed [22.500000];
		turn rleg to x-axis <-19> speed <142.500000>;
		turn rleg to z-axis <0> now;
		turn rfoot to x-axis <24> speed <180.000000>;
		turn rfoot to y-axis <0> now;
		move lleg to y-axis [0] speed [11.250000];
		turn lleg to x-axis <16> speed <120.000000>;
		turn lleg to z-axis <-8> speed <60.000000>;
		turn lfoot to x-axis <-12> speed <90.000000>;
		turn lfoot to y-axis <-11> speed <82.500000>;
		
		turn torso to x-axis <-4> speed <30.000000>;
		turn torso to y-axis <12> speed <90.000000>;
		turn torso to z-axis <4> speed <30.000000>;
		move torso to y-axis [0.8] speed [6.000000];

		sleep 125;
	}

	//step 6
	if (bMoving)
	{
		move rleg to y-axis [0] now;
		turn rleg to x-axis <-23> speed <30.000000>;
		turn rleg to z-axis <4> speed <30.000000>;
		turn rfoot to x-axis <7> speed <127.500000>;
		turn rfoot to y-axis <-16> speed <120.000000>;
		move lleg to y-axis [0] now;
		turn lleg to x-axis <36> speed <150.000000>;
		turn lleg to z-axis <-19> speed <82.500000>;
		turn lfoot to x-axis <-32> speed <150.000000>;
		turn lfoot to y-axis <0> speed <82.500000>;
		
		turn torso to x-axis <0> speed <30.000000>;
		turn torso to y-axis <18> speed <45.000000>;
		turn torso to z-axis <6> speed <15.000000>;
		move torso to y-axis [0] speed [6.000000];

		sleep 125;
	}

	//step 7
	if (bMoving)
	{
		move rleg to y-axis [-1.5] speed [11.250000];
		turn rleg to x-axis <-21> speed <15.000000>;
		turn rleg to z-axis <2> speed <15.000000>;
		turn rfoot to x-axis <17> speed <75.000000>;
		turn rfoot to y-axis <-10> speed <45.000000>;
		move lleg to y-axis [3] speed [22.500000];
		turn lleg to x-axis <7> speed <217.500000>;
		turn lleg to z-axis <0> speed <142.500000>;
		turn lfoot to x-axis <-7> speed <187.500000>;
		turn lfoot to y-axis <0> now;
		
		turn torso to x-axis <4> speed <30.000000>;
		turn torso to y-axis <12> speed <45.000000>;
		turn torso to z-axis <4> speed <15.000000>;
		move torso to y-axis [0] now;

		sleep 125;
	}


}

}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}


HitByWeapon(anglex, anglez)
{
	turn torso to z-axis anglez speed <105.000000>;
	turn torso to x-axis <0> - anglex speed <105.000000>;
	wait-for-turn torso around z-axis;
	wait-for-turn torso around x-axis;
	turn torso to z-axis <0.000000> speed <30.000000>;
	turn torso to x-axis <0.000000> speed <30.000000>;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	call-script walk();
	return (0);
}

StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	sleep 30;

		move rleg to y-axis [0] speed <60>;
		turn rleg to x-axis <0> speed <157.500000>;
		turn rleg to z-axis <0> speed <15.000000>;
		turn rfoot to x-axis <0> speed <127.500000>;
		turn rfoot to y-axis <0> speed <75.000000>;
		move lleg to y-axis [0] speed [37.500000];
		turn lleg to x-axis <0> speed <52.500000>;
		turn lleg to z-axis <0> now;
		turn lfoot to x-axis <0> speed <52.500000>;
		turn lfoot to y-axis <0> now;
		
		turn torso to x-axis <0> speed <30.000000>;
		turn torso to y-axis <0> speed <90.000000>;
		turn torso to z-axis <0> speed <30.000000>;
		move torso to y-axis [0] now;

		sleep 125;

	return (0);
}

Create()
{
	bMoving=TRUE;
	hide flare;
	restore_delay = 3000;
	start-script StopMoving();
	start-script SmokeUnit();
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = torso;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = head;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <135.000000>;
	turn head to x-axis <0.000000> speed <85.000000>;
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <270.000000>;
	turn head to x-axis <0.000000> - pitch speed <170.000000>;
	wait-for-turn head around y-axis;
	wait-for-turn turret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	move barrel to z-axis [-2] speed [62.500000];
	show flare;
	wait-for-move barrel along z-axis;
	move barrel to z-axis [0.000000] speed [4.000000];
	sleep 15;
	hide flare;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode pelvis type BITMAPONLY;
		explode torso type BITMAPONLY;
		explode turret type BITMAPONLY;
		explode head type BITMAPONLY;
		explode barrel type FIRE | SMOKE | FALL;
		explode flare type BITMAPONLY;
		explode rleg type BITMAPONLY;
		explode rfoot type BITMAPONLY;
		explode lleg type BITMAPONLY;
		explode lfoot type BITMAPONLY;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode pelvis type FIRE | SMOKE | FALL;
		explode torso type FALL;
		explode turret type FIRE | SMOKE | FALL;
		explode head type FALL;
		explode barrel type FALL;
		explode flare type FIRE | SMOKE | FALL;
		explode rleg type FIRE | SMOKE | FALL;
		explode rfoot type FIRE | SMOKE | FALL;
		explode lleg type FIRE | SMOKE | FALL;
		explode lfoot type FALL;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode pelvis type FIRE | SMOKE | FALL;
		explode torso type EXPLODE_ON_HIT | SMOKE | FALL;
		explode turret type SMOKE | FALL;
		explode head type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode barrel type FIRE | SMOKE | FALL;
		explode flare type FIRE | SMOKE | FALL;
		explode rleg type EXPLODE_ON_HIT | SMOKE | FALL;
		explode rfoot type SMOKE | FALL;
		explode lleg type FIRE | SMOKE | FALL;
		explode lfoot type SMOKE | FALL;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode pelvis type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode torso type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL;
		explode head type EXPLODE_ON_HIT | FIRE | FALL;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode rleg type EXPLODE_ON_HIT | FIRE | FALL;
		explode rfoot type EXPLODE_ON_HIT | FIRE | FALL;
		explode lleg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode lfoot type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
	return corpsetype;
}
