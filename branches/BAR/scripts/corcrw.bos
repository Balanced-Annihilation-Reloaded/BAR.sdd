#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turretl, sleevel, barrell, flarel, turretr, sleever, barrelr, flarer, 
       turretf, sleevef, barrelf, flaref, thrustrr, thrustrl, thrustfr, thrustfl, 
       thrustrra, thrustrla, thrustfra, thrustfla;
       

static-var  restore_delay, v1;

// Signal definitions
#define SIG_AIM				4
#define SIG_AIM_2			8
#define SIG_AIM_3			16
#define MIN 131 // get
#define MAX 132 // get
#define ABS 133 // get
#define GAME_FRAME 134 // get
#define KSIN 135 // get (kiloSine : 1024*sin(x))
#define KCOS 136 // get (kiloCosine : 1024*cos(x))
#define KTAN 137 // get (kiloTangent : 1024*tan(x))
#define SQRT 138 // get (square root)


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	start-script SmokeUnit();
	sleep 1500;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryPrimary(piecenum)
{
	piecenum = flaref;
}

QuerySecondary(piecenum)
{
	piecenum = flarel;
}

QueryTertiary(piecenum)
{
	piecenum = flarer;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn base to y-axis <0.000000> speed <250.000000>;
	turn base to x-axis <0.000000> speed <250.000000>;
	turn turretf to z-axis <0> speed <250>;
	turn sleevef to x-axis <0> speed <250>;
	
	turn turretl to x-axis <0> speed <250>;
	turn sleevel to y-axis <0> speed <250>;
	
	turn turretr to x-axis <0> speed <250>;
	turn sleever to y-axis <0> speed <250>;
}

StartMoving()
{
	sleep 1000;
}

StopMoving()
{
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	
	
	var p;
	var h;
	var a;
	p = get KTAN(pitch);
	h = get KTAN(heading);
	a= get ATAN(p*h,1000000);
	turn turretf to z-axis a speed <2000.000000>;
	
	var x;
	p = get KCOS(pitch);
	h = get KCOS(heading);
	x= p*h;
	a= get SQRT(1000000-x*x);
	a=a/x;
	
	a=get ATAN(a,1000);
	
	turn sleevef to x-axis <0>-  a speed <2000.000000>;
	wait-for-turn turretf around z-axis;
	wait-for-turn sleevef around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	var aimto;
	aimto= <-90> + heading;
	if (aimto > <90>) {
		aimto = <90>;
	}
	if (aimto < <-90>) {
		aimto = <-90>;
	}
	//turn turretl to x-axis  speed <200.000000>;
	turn sleevel to y-axis aimto speed <200.000000>;
	wait-for-turn sleevel around y-axis;
	return (1);
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	var aimto;
	aimto= <90> + heading;
	if (aimto > <90>) {
		aimto = <90>;
	}
	if (aimto < <-90>) {
		aimto = <-90>;
	}
	//turn turretr to x-axis heading speed <200.000000>;
	turn sleever to y-axis aimto speed <200.000000>;
	wait-for-turn sleever around y-axis;
	return (1);
}

FirePrimary()
{
	sleep 100;
}

FireSecondary()
{
	sleep 100;
}

FireTertiary()
{
	sleep 100;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		explode turretf type BITMAPONLY;
		explode sleevef type BITMAPONLY;
		explode barrelf type FIRE | SMOKE | FALL;
		explode flaref type BITMAPONLY;
		explode turretr type BITMAPONLY;
		explode sleever type BITMAPONLY;
		explode barrelr type BITMAPONLY;
		explode flarer type BITMAPONLY;
		explode turretl type BITMAPONLY;
		explode sleevel type BITMAPONLY;
		explode barrell type BITMAPONLY;
		explode flarel type BITMAPONLY;
		explode thrustrl type BITMAPONLY;
		explode thrustrla type BITMAPONLY;
		explode thrustfl type BITMAPONLY;
		explode thrustfla type BITMAPONLY;
		explode thrustfr type BITMAPONLY;
		explode thrustfra type BITMAPONLY;
		explode thrustrr type BITMAPONLY;
		explode thrustrra type BITMAPONLY;
		return(0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY;
		explode turretf type FIRE | SMOKE | FALL;
		explode sleevef type FIRE | SMOKE | FALL;
		explode barrelf type FALL;
		explode flaref type FIRE | SMOKE | FALL;
		explode turretr type FIRE | SMOKE | FALL;
		explode sleever type FIRE | SMOKE | FALL;
		explode barrelr type FIRE | SMOKE | FALL;
		explode flarer type FIRE | SMOKE | FALL;
		explode turretl type FIRE | SMOKE | FALL;
		explode sleevel type FALL;
		explode barrell type FIRE | SMOKE | FALL;
		explode flarel type FIRE | SMOKE | FALL;
		explode thrustrl type FIRE | SMOKE | FALL;
		explode thrustrla type FIRE | SMOKE | FALL;
		explode thrustfl type FIRE | SMOKE | FALL;
		explode thrustfla type FALL;
		explode thrustfr type FIRE | SMOKE | FALL;
		explode thrustfra type FALL;
		explode thrustrr type FALL;
		explode thrustrra type FIRE | SMOKE | FALL;
		return(0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode turretf type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode sleevef type FIRE | SMOKE | FALL;
		explode barrelf type SMOKE | FALL;
		explode flaref type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode turretr type SMOKE | FALL;
		explode sleever type FIRE | SMOKE | FALL;
		explode barrelr type FIRE | SMOKE | FALL;
		explode flarer type SMOKE | FALL;
		explode turretl type EXPLODE_ON_HIT | SMOKE | FALL;
		explode sleevel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode barrell type EXPLODE_ON_HIT | SMOKE | FALL;
		explode flarel type SMOKE | FALL;
		explode thrustrl type FIRE | SMOKE | FALL;
		explode thrustrla type FIRE | SMOKE | FALL;
		explode thrustfl type EXPLODE_ON_HIT | SMOKE | FALL;
		explode thrustfla type FIRE | SMOKE | FALL;
		explode thrustfr type SMOKE | FALL;
		explode thrustfra type EXPLODE_ON_HIT | SMOKE | FALL;
		explode thrustrr type SMOKE | FALL;
		explode thrustrra type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		return(0);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode turretf type EXPLODE_ON_HIT | FIRE | FALL;
		explode sleevef type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode barrelf type EXPLODE_ON_HIT | FIRE | FALL;
		explode flaref type EXPLODE_ON_HIT | FIRE | FALL;
		explode turretr type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode sleever type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode barrelr type EXPLODE_ON_HIT | FIRE | FALL;
		explode flarer type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode turretl type EXPLODE_ON_HIT | FIRE | FALL;
		explode sleevel type EXPLODE_ON_HIT | FIRE | FALL;
		explode barrell type EXPLODE_ON_HIT | FIRE | FALL;
		explode flarel type EXPLODE_ON_HIT | FIRE | FALL;
		explode thrustrl type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode thrustrla type EXPLODE_ON_HIT | FIRE | FALL;
		explode thrustfl type EXPLODE_ON_HIT | FIRE | FALL;
		explode thrustfla type EXPLODE_ON_HIT | FIRE | FALL;
		explode thrustfr type EXPLODE_ON_HIT | FIRE | FALL;
		explode thrustfra type EXPLODE_ON_HIT | FIRE | FALL;
		explode thrustrr type EXPLODE_ON_HIT | FIRE | FALL;
		explode thrustrra type EXPLODE_ON_HIT | FIRE | FALL;
}
