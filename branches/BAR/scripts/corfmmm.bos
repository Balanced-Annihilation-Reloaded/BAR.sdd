//            * Header Info *
// VersionSignature                     4
// NumberOfScripts                     14
// NumberOfPieces                      16
// LengthOfScripts                     454
// NumberOfStaticVars                  3
// UKZero                              0
// OffsetToScriptCodeIndexArray        117c
// OffsetToScriptNameOffsetArray       11b4
// OffsetToPieceNameOffsetArray        11ec
// OffsetToScriptCode                  2c
// OffsetToNameArray                   122c

// OffsetToFirstName                   122c

#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base;



SmokeUnit(healthpercent, sleeptime, smoketype)
/*     3:*/{
/*     6:*/	while( get BUILD_PERCENT_LEFT )
/*     8:*/	{
/*     a:*/		sleep 400;
/*     d:*/	}
/*     f:*/	while( TRUE )
/*    11:*/	{
/*    14:*/		healthpercent = get HEALTH;
/*    1b:*/		if( healthpercent < 66 )
/*    1d:*/		{
/*    22:*/			smoketype = 256 | 2;
/*    2c:*/			if( Rand( 1, 66 ) < healthpercent )
/*    2e:*/			{
/*    33:*/				smoketype = 256 | 1;
/*    35:*/			}
/*    37:*/			emit-sfx smoketype from base;
/*    39:*/		}
/*    3e:*/		sleeptime = healthpercent * 50;
/*    45:*/		if( sleeptime < 200 )
/*    47:*/		{
/*    49:*/			sleeptime = 200;
/*    4b:*/		}
/*    4d:*/		sleep sleeptime;
/*    50:*/	}
/*    52:*/	return (0);
/*    53:*/}

Create()
/*    53:*/{
/*    57:*/	start-script SmokeUnit();
/*    5c:*/	return (0);
/*    5d:*/}

SweetSpot(piecenum)
/*    5e:*/{
/*    60:*/	piecenum = base;
/*    64:*/	return (0);
/*    65:*/}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY;
	return corpsetype;
}
