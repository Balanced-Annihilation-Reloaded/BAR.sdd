#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  wingl, wingr, finl, finr, base, thrusta, thrustb, doorr, doorl, bombr1,bombr2,bombl1, bombl2, cowl, fan, arml, armr;

static-var  Static_Var_1, gun_3;

lua_BombsAway() { return 0; }

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 3 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from base;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MoveRate2()
{
	if( Rand( 1, 10 ) == 1 AND ( !Static_Var_1 ) )
	{
		Static_Var_1 = 1;
		turn base to z-axis <240.000000> speed <120.000000>;
		wait-for-turn base around z-axis;
		turn base to z-axis <120.000000> speed <180.000000>;
		wait-for-turn base around z-axis;
		turn base to z-axis <0.000000> speed <120.000000>;
		Static_Var_1 = 0;
	}
}

Create()
{
	gun_3=0;
	Static_Var_1 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
	sleep 2000;
}

Activate()
{
	spin fan around y-axis speed <200> accelerate <20>;
	turn wingl to z-axis <90> speed <90>;
	turn wingr to z-axis <-90> speed <90>;
	sleep 1500;
	turn cowl to x-axis <90> speed <45>;
}

Deactivate()
{
	turn cowl to x-axis <0> speed <45>;

	sleep 1500;
	stop-spin fan around y-axis decelerate <2>;
	turn wingl to z-axis <0> speed <90>;
	turn wingr to z-axis <0> speed <90>;
}


QueryPrimary(piecenum)
{
	piecenum = fan;
}

FirePrimary(Func_Var_1)
{
	call-script lua_BombsAway();
	sleep 5;
	sleep 1000;
}


SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP3;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP3;
}
