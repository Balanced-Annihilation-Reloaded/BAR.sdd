#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, top, bore, barrel, flare, aimpoint;

static-var  Static_Var_1, restore_delay, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2

lua_FlameShot(weapon) //Distortion and lups flame effect
{
  return 0;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}


Go()
{
	set ARMORED to 0;
	move top to y-axis [0.000000] speed [19.989014];
	wait-for-move top along y-axis;
	move bore to z-axis [0.000000] speed [19.989014];
	move barrel to z-axis [0.000000] speed [19.989014];
	Static_Var_1 = 1;
}

Stop()
{
	set ARMORED to 1;
	Static_Var_1 = 0;
	turn top to y-axis <0.000000> speed <300.000000>;
	move bore to z-axis [-6] speed [19.989014];
	move barrel to z-axis [-6.5] speed [19.989014];
	wait-for-move barrel along z-axis;
	wait-for-move bore along z-axis;
	move top to y-axis [-11.9] speed [48];
	wait-for-move top along y-axis;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	hide flare;
	restore_delay = 2000;
	Static_Var_1 = 0;
	call-script InitState();
	start-script RequestState(0);
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 250;
	}
	start-script SmokeUnit();
	start-script RequestState(1);
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 3;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	turn top to y-axis heading speed <300.000000>;
	wait-for-turn top around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

Shot1()
{
	call-script lua_FlameShot(1);
	return (TRUE);
}

FirePrimary()
{
	show flare;
	sleep 150;
	hide flare;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

AimFromPrimary(piecenum)
{
	piecenum = aimpoint;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		explode top type BITMAPONLY;
		explode bore type BITMAPONLY;
		explode barrel type FIRE | SMOKE | FALL;
		explode flare type BITMAPONLY;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY;
		explode top type FIRE | SMOKE | FALL;
		explode bore type FIRE | SMOKE | FALL;
		explode barrel type FALL;
		explode flare type FALL;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL;
		explode top type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode bore type EXPLODE_ON_HIT | SMOKE | FALL;
		explode barrel type FIRE | SMOKE | FALL;
		explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode top type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode bore type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
	return corpsetype;
}