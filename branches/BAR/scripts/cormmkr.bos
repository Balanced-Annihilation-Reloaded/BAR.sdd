#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SIG_ANIM 2

piece  base, fan, tank1, tank2;

static-var  Static_Var_1, mmState, Active;


activatescr()
{
	spin fan around y-axis speed <300.000000> accelerate <10>;
	
	//set-signal-mask SIG_ANIM;
	while (TRUE)
	{
	
		move tank1 to y-axis [1.800000] speed [5.000000];
		move tank2 to y-axis [-2.300000] speed [5.000000];

		sleep 1000;
		
		move tank1 to y-axis [0.000000] speed [5.000000];
		move tank2 to y-axis [0.000000] speed [5.000000];
		sleep 1000;
	
	}
	
}

deactivatescr()
{
	stop-spin fan around y-axis decelerate <5>;
	move tank1 to y-axis [0.000000] speed [5.000000];
	move tank2 to y-axis [0.000000] speed [5.000000];
	sleep 30;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	if( Static_Var_1 )
	{
		set ACTIVATION to 0;
		return (0);
	}
	//signal SIG_ANIM;
	call-script activatescr();
	set ARMORED to 0;
}

Stop()
{
	set ARMORED to 1;
	//signal SIG_ANIM;
	call-script deactivatescr();
}

MMStatus(State)
{
	Active = State;
	//get PRINT(Active);
}

ImAMetalMaker()
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 150;
	}
	mmState = -1;
	while( TRUE )
	{
		if( Active == 1 )
		{
			if( mmState != 1 )
			{
				call-script Go();
				mmState = 1;
			}
		}
		else if( mmState != 0 )
		{
			call-script Stop();
			mmState = 0;
		}
		sleep 1000;
	}
}

Create()
{
	spin fan around y-axis speed <30.000000> accelerate <3.000000>;
	call-script ImAMetalMaker();
	start-script SmokeUnit();
	Static_Var_1 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	set ARMORED to 1;
}

HitByWeapon(anglex, anglez)
{
	if( get ACTIVATION )
	{
		Static_Var_1 = 1;
	}
	if( Static_Var_1 )
	{
		signal 2;
		set-signal-mask 2;
		set ACTIVATION to 0;
		sleep 8000;
		Static_Var_1 = 0;
		set ACTIVATION to 100;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		explode fan type FIRE | SMOKE | FALL;
		explode tank1 type BITMAPONLY;
		explode tank2 type BITMAPONLY;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY;
		explode fan type FALL;
		explode tank1 type BITMAPONLY;
		explode tank2 type BITMAPONLY;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode fan type SMOKE | FALL;
		explode tank1 type BITMAPONLY;
		explode tank2 type BITMAPONLY;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode fan type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode tank1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode tank2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
	return corpsetype;
}
