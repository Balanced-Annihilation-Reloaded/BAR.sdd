#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SIG_ANIM 2

piece  base, fan, tank1, tank2;

static-var  mmState, Active;


activatescr()
{
	spin fan around y-axis speed <300.000000> accelerate <10>;		
}

deactivatescr()
{
	stop-spin fan around y-axis decelerate <5>;
	move tank1 to y-axis [0.000000] speed [5.000000];
	move tank2 to y-axis [0.000000] speed [5.000000];
	sleep 30;
}

Go()
{
	call-script activatescr();
	set ARMORED to 0;  //Not needed as MM in BAR have no damage modifyer tag set
}

Stop()
{
	set ARMORED to 1;
	call-script deactivatescr();
}

MovementControl()
{
	while (TRUE)
	{
		while (mmState == 1)
		{
			move tank1 to y-axis [1.800000] speed [5.000000];
			move tank2 to y-axis [-2.300000] speed [5.000000];

			sleep 1000;
		
			move tank1 to y-axis [0.000000] speed [5.000000];
			move tank2 to y-axis [0.000000] speed [5.000000];
			sleep 1000;
			}
			sleep 100;
	}	
}

ImAMetalMaker()
{
	mmState = -1;
	while( TRUE )
	{
		if (Active == 1)
		{
			if (mmState != 1) {
				call-script Go();
				mmState = 1;
			}
		}
		else
		{
			if (mmState != 0) {
				call-script Stop();
				mmState = 0;
			}
		}
		sleep 1000;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script MovementControl();
	start-script ImAMetalMaker();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MMStatus(State)
{
	Active = State;
	//get PRINT(Active);
}

Create()
{
	start-script SmokeUnit();
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		explode fan type FIRE | SMOKE | FALL;
		explode tank1 type BITMAPONLY;
		explode tank2 type BITMAPONLY;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY;
		explode fan type FALL;
		explode tank1 type BITMAPONLY;
		explode tank2 type BITMAPONLY;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode fan type SMOKE | FALL;
		explode tank1 type BITMAPONLY;
		explode tank2 type BITMAPONLY;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode fan type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode tank1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode tank2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
	return corpsetype;
}
