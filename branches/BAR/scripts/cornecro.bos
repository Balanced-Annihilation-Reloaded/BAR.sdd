#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SIG_BUILD		4	

piece  flare1, flare2, hip, lleg, rleg, rfoot, lfoot, luparm, ruparm, rarm, larm, torso;

//static-var  buildHeading, bMoving, bBuilding, Static_Var_4,
//			currentSpeed, moveSpeed, nanoemit;
static-var  bMoving, spray, statechg_DesiredState, statechg_StateChanging, notBuilding;

walk()
{

			// 30*2.6 elmos per sec, anim cycle is 24 elmos/cyccle
	
	if (bMoving)
	{
		//step 0
		turn rleg to x-axis <0> speed <405.000000>;
		turn rfoot to x-axis <0> speed <405.000000>;
		turn ruparm to x-axis <0> speed <300.000000>;
		turn rarm to x-axis <0> speed <300.000000>;
		turn lleg to x-axis <-32> speed <945.000000>;
		turn lfoot to x-axis <108> speed <2025.000000>;
		turn luparm to x-axis <-10> speed <150.000000>;
		turn larm to x-axis <-10> speed <150.000000>;
		turn torso to y-axis <0> speed <150.000000>;
	
		sleep 64;
	}
	if (bMoving)
	{
		//step 1
		turn rleg to x-axis <31> speed <465.000000>;
		turn rfoot to x-axis <-27> speed <405.000000>;
		turn ruparm to x-axis <-20> speed <300.000000>;
		turn rarm to x-axis <-20> speed <300.000000>;
		turn lleg to x-axis <-61> speed <435.000000>;
		turn lfoot to x-axis <65> speed <645.000000>;
		turn luparm to x-axis <10> speed <300.000000>;
		turn larm to x-axis <10> speed <300.000000>;
		turn torso to y-axis <7> speed <105.000000>;
	
		sleep 64;
	}
	if (bMoving)
	{
	
		//step 2
		turn rleg to x-axis <8> speed <345.000000>;
		turn rfoot to x-axis <61> speed <1320.000000>;
		turn ruparm to x-axis <-30> speed <150.000000>;
		turn rarm to x-axis <-30> speed <150.000000>;
		turn lleg to x-axis <-27> speed <510.000000>;
		turn lfoot to x-axis <27> speed <570.000000>;
		turn luparm to x-axis <20> speed <150.000000>;
		turn larm to x-axis <20> speed <150.000000>;
	
		turn torso to y-axis <10> speed <45.000000>;
	
		sleep 64;
	}
	if (bMoving)
	{
	
		//step 3
		turn rleg to x-axis <-32> speed <600.000000>;
		turn rfoot to x-axis <108> speed <705.000000>;
		turn ruparm to x-axis <-10> speed <300.000000>;
		turn rarm to x-axis <-10> speed <300.000000>;
		turn lleg to x-axis <0> speed <405.000000>;
		turn lfoot to x-axis <0> speed <405.000000>;
		turn luparm to x-axis <0> speed <300.000000>;
		turn larm to x-axis <0> speed <300.000000>;
		turn torso to y-axis <0> speed <150.000000>;
	
		sleep 64;
	}
	if (bMoving)
	{
	
		//step 4
		turn rleg to x-axis <-61> speed <435.000000>;
		turn rfoot to x-axis <65> speed <645.000000>;
		turn ruparm to x-axis <10> speed <300.000000>;
		turn rarm to x-axis <10> speed <300.000000>;
		turn lleg to x-axis <31> speed <465.000000>;
		turn lfoot to x-axis <-27> speed <405.000000>;
		turn luparm to x-axis <-20> speed <300.000000>;
		turn larm to x-axis <-20> speed <300.000000>;
		turn torso to y-axis <-7> speed <105.000000>;
	
		sleep 64;
	}
	if (bMoving)
	{
	
		//step 5
		turn rleg to x-axis <-27> speed <510.000000>;
		turn rfoot to x-axis <27> speed <570.000000>;
		turn ruparm to x-axis <20> speed <150.000000>;
		turn rarm to x-axis <20> speed <150.000000>;
		turn lleg to x-axis <8> speed <345.000000>;
		turn lfoot to x-axis <61> speed <1320.000000>;
		turn luparm to x-axis <-30> speed <150.000000>;
		turn larm to x-axis <-30> speed <150.000000>;
		turn torso to y-axis <-10> speed <45.000000>;
	
	
	}



}

walklegs()
{
				// 30*2.6 elmos per sec, anim cycle is 24 elmos/cyccle
	
	if (bMoving)
	{
		//step 0
		turn rleg to x-axis <0> speed <405.000000>;
		turn rfoot to x-axis <0> speed <405.000000>;
		turn lleg to x-axis <-32> speed <945.000000>;
		turn lfoot to x-axis <108> speed <2025.000000>;
	
		sleep 64;
	}
	if (bMoving)
	{
		//step 1
		turn rleg to x-axis <31> speed <465.000000>;
		turn rfoot to x-axis <-27> speed <405.000000>;
		turn lleg to x-axis <-61> speed <435.000000>;
		turn lfoot to x-axis <65> speed <645.000000>;
		sleep 64;
	}
	if (bMoving)
	{
	
		//step 2
		turn rleg to x-axis <8> speed <345.000000>;
		turn rfoot to x-axis <61> speed <1320.000000>;
		turn lleg to x-axis <-27> speed <510.000000>;
		turn lfoot to x-axis <27> speed <570.000000>;
	
		sleep 64;
	}
	if (bMoving)
	{
	
		//step 3
		turn rleg to x-axis <-32> speed <600.000000>;
		turn rfoot to x-axis <108> speed <705.000000>;
		turn lleg to x-axis <0> speed <405.000000>;
		turn lfoot to x-axis <0> speed <405.000000>;
		sleep 64;
	}
	if (bMoving)
	{
	
		//step 4
		turn rleg to x-axis <-61> speed <435.000000>;
		turn rfoot to x-axis <65> speed <645.000000>;
		turn lleg to x-axis <31> speed <465.000000>;
		turn lfoot to x-axis <-27> speed <405.000000>;
		sleep 64;
	}
	if (bMoving)
	{
	
		//step 5
		turn rleg to x-axis <-27> speed <510.000000>;
		turn rfoot to x-axis <27> speed <570.000000>;
		turn lleg to x-axis <8> speed <345.000000>;
		turn lfoot to x-axis <61> speed <1320.000000>;
	
	
	}


}

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = notBuilding;
		if( moving )
		{
			if( aiming )
			{
				call-script walk();
			}
			else
			{
				call-script walklegs();
			}
			justmoved = TRUE;
		}
		else
		{
			if( justmoved )
			{

				//step 5
				turn rleg to x-axis <0> speed <510.000000>;
				turn rfoot to x-axis <0> speed <570.000000>;
				turn lleg to x-axis <0> speed <345.000000>;
				turn lfoot to x-axis <0> speed <1320.000000>;
				sleep 65;
			
				justmoved = FALSE;
			}
		}
		sleep 50;
	}
}


HitByWeapon(anglex, anglez)
{
	turn hip to z-axis <0> - anglez speed <105.000000>;
	turn hip to x-axis <0> - anglex speed <105.000000>;
	wait-for-turn hip around z-axis;
	wait-for-turn hip around x-axis;
	turn hip to z-axis <0.000000> speed <30.000000>;
	turn hip to x-axis <0.000000> speed <30.000000>;
}

Go()
{
	turn luparm to x-axis <0.000000> now;
	turn luparm to x-axis <-10.000000> speed <59.000000>;
	turn ruparm to x-axis <0.000000> now;
	turn ruparm to x-axis <-10.000000> speed <57.000000>;
	turn Rarm to x-axis <0.000000> now;
	turn Rarm to x-axis <-22.000000> speed <120.000000>;
	turn Larm to x-axis <0.000000> now;
	turn Larm to x-axis <-22.000000> speed <120.000000>;
	sleep 30;

	turn luparm to x-axis <-21.000000> speed <48.000000>;
	turn ruparm to x-axis <-21.000000> speed <47.000000>;
	turn Rarm to x-axis <-44.005495> speed <98.000000>;
	turn Larm to x-axis <-44.005495> speed <98.000000>;
	sleep 30;
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn torso to y-axis <0.000000> speed <160.000000>;
	wait-for-turn torso around y-axis;

//	turn luparm to x-axis <-21.890110> speed <87.383907>;
//	turn ruparm to x-axis <-21.280220> speed <84.949265>;
//	turn Rarm to x-axis <-44.395604> speed <177.224387>;
//	turn Larm to x-axis <-44.395604> speed <177.224387>;
//	sleep 200;

//	turn luparm to x-axis <-10.000000> speed <54.000000>;
//	turn ruparm to x-axis <-10.000000> speed <53.000000>;
//	turn Rarm to x-axis <-22.000000> speed <111.000000>;
//	turn Larm to x-axis <-22.000000> speed <111.000000>;
//	sleep 200;
//
//	turn luparm to x-axis <0.000000> speed <54.000000>;
//	turn ruparm to x-axis <0.000000> speed <53.000000>;
//	turn Rarm to x-axis <0.000000> speed <111.000000>;
//	turn Larm to x-axis <0.000000> speed <111.000000>;
//	sleep 200;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script Stop();
			notBuilding = 1;
			currentstate = 1;
		}
		else
		{
			call-script Go();
			notBuilding = 0;
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script MotionControl();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	bMoving = FALSE;
	notBuilding = 1;
	spray = flare1;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	start-script SmokeUnit();
}

StartBuilding(torsoing, pitch)
{
	start-script RequestState(0);
	while( notBuilding ) sleep 100;
	signal SIG_BUILD;
	turn torso to y-axis torsoing speed <240.000000>;
	wait-for-turn torso around y-axis;
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	signal SIG_BUILD;	
	set-signal-mask SIG_BUILD;
	sleep 3000;
	set-signal-mask 0;
	signal SIG_BUILD;	
	start-script RequestState(1);
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

QueryNanoPiece(piecenum)
{
	piecenum = spray;
	spray = !spray;
}

SweetSpot(piecenum)
{
	piecenum = torso;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode hip type BITMAPONLY;
		explode torso type BITMAPONLY;
		explode ruparm type BITMAPONLY;
		explode rarm type FIRE | SMOKE | FALL;
		explode flare1 type BITMAPONLY;
		explode luparm type BITMAPONLY;
		explode larm type BITMAPONLY;
		explode flare2 type BITMAPONLY;
		explode rleg type BITMAPONLY;
		explode rfoot type BITMAPONLY;
		explode lleg type BITMAPONLY;
		explode lfoot type BITMAPONLY;
		return(0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode hip type FIRE | SMOKE | FALL;
		explode torso type FIRE | SMOKE | FALL;
		explode ruparm type FIRE | SMOKE | FALL;
		explode rarm type FIRE | SMOKE | FALL;
		explode flare1 type FIRE | SMOKE | FALL;
		explode luparm type FIRE | SMOKE | FALL;
		explode larm type FALL;
		explode flare2 type FIRE | SMOKE | FALL;
		explode rleg type FIRE | SMOKE | FALL;
		explode rfoot type FALL;
		explode lleg type FIRE | SMOKE | FALL;
		explode lfoot type FIRE | SMOKE | FALL;
		return(0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode hip type FIRE | SMOKE | FALL;
		explode torso type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode ruparm type EXPLODE_ON_HIT | SMOKE | FALL;
		explode rarm type EXPLODE_ON_HIT | SMOKE | FALL;
		explode flare1 type EXPLODE_ON_HIT | SMOKE | FALL;
		explode luparm type FIRE | SMOKE | FALL;
		explode larm type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode flare2 type FIRE | SMOKE | FALL;
		explode rleg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode rfoot type FIRE | SMOKE | FALL;
		explode lleg type FIRE | SMOKE | FALL;
		explode lfoot type EXPLODE_ON_HIT | SMOKE | FALL;
		return(0);
	}
	corpsetype = 3 ;
		explode hip type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode torso type EXPLODE_ON_HIT | FIRE | FALL;
		explode ruparm type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode rarm type EXPLODE_ON_HIT | FIRE | FALL;
		explode flare1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode luparm type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode larm type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode flare2 type EXPLODE_ON_HIT | FIRE | FALL;
		explode rleg type EXPLODE_ON_HIT | FIRE | FALL;
		explode rfoot type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode lleg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode lfoot type EXPLODE_ON_HIT | FIRE | FALL;
}
