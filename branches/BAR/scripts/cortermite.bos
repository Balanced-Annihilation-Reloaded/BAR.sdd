#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  body, head, barrel1, barrel2, flare1, flare2,  leg1a,leg1b,leg2a,leg2b,leg3a,leg3b,leg4a,leg4b,leg5a,leg5b,leg6a,leg6b;

static-var  moving, Static_Var_2, restore_delay, gun_1,moveSpeed, currentSpeed,WALK_PERIOD;

// Signal definitions
#define SIG_AIM				2

#define SIG_MOVE 8

#define FRONT_RIGHT_UP\
	turn leg6a to y-axis <70> speed <12.5> *1000/(WALK_PERIOD);\
	turn leg6a to z-axis <20> speed <20> *1000/(WALK_PERIOD);

#define FRONT_RIGHT_DOWN\
	turn leg6a to z-axis <-10> speed <30> *1000/(WALK_PERIOD);\
	turn leg6b to z-axis <85> speed <85> *1000/(WALK_PERIOD);

#define FRONT_RIGHT_BACK\
	turn leg6a to y-axis <45> speed <6.25> *1000/(WALK_PERIOD);\
	turn leg6a to z-axis <0> speed <7.5> *1000/(WALK_PERIOD);\
	turn leg6b to z-axis <0> speed <23.75> *1000/(WALK_PERIOD);


#define FRONT_LEFT_UP\
	turn leg1a to y-axis <-70> speed <12.5> *1000/(WALK_PERIOD);\
	turn leg1a to z-axis <-20> speed <20> *1000/(WALK_PERIOD);

#define FRONT_LEFT_DOWN\
	turn leg1a to z-axis <10> speed <30> *1000/(WALK_PERIOD);\
	turn leg1b to z-axis <-85> speed <85> *1000/(WALK_PERIOD);

#define FRONT_LEFT_BACK\
	turn leg1a to y-axis <-45> speed <6.25> *1000/(WALK_PERIOD);\
	turn leg1a to z-axis <0> speed <7.5> *1000/(WALK_PERIOD);\
	turn leg1b to z-axis <0> speed <23.75> *1000/(WALK_PERIOD);


#define MIDDLE_RIGHT_UP\
	turn leg5a to y-axis <22.5> speed <22.5> *1000/(WALK_PERIOD);\
	turn leg5a to z-axis <20> speed <20> *1000/(WALK_PERIOD);

#define MIDDLE_RIGHT_DOWN\
	turn leg5a to z-axis <0> speed <20> *1000/(WALK_PERIOD);

#define MIDDLE_RIGHT_BACK\
	turn leg5a to y-axis <-22.5> speed <12.5> *1000/(WALK_PERIOD);


#define MIDDLE_LEFT_UP\
	turn leg2a to y-axis <-22.5> speed <22.5> *1000/(WALK_PERIOD);\
	turn leg2a to z-axis <-20> speed <20> *1000/(WALK_PERIOD);

#define MIDDLE_LEFT_DOWN\
	turn leg2a to z-axis <0> speed <20> *1000/(WALK_PERIOD);

#define MIDDLE_LEFT_BACK\
	turn leg2a to y-axis <22.5> speed <12.5> *1000/(WALK_PERIOD);\


#define REAR_RIGHT_UP\
	turn leg4a to y-axis <-45> speed <12.5> *1000/(WALK_PERIOD);\
	turn leg4a to z-axis <20> speed <50> *1000/(WALK_PERIOD);\
	turn leg4b to z-axis <0> speed <55> *1000/(WALK_PERIOD);

#define REAR_RIGHT_DOWN\
	turn leg4a to z-axis <0> speed <20> *1000/(WALK_PERIOD);

#define REAR_RIGHT_BACK\
	turn leg4a to y-axis <-70> speed <6.25> *1000/(WALK_PERIOD);\
	turn leg4a to z-axis <-30> speed <7.5> *1000/(WALK_PERIOD);\
	turn leg4b to z-axis <85> speed <23.75> *1000/(WALK_PERIOD);


#define REAR_LEFT_UP\
	turn leg3a to y-axis <45> speed <12.5> *1000/(WALK_PERIOD);\
	turn leg3a to z-axis <-20> speed <50> *1000/(WALK_PERIOD);\
	turn leg3b to z-axis <0> speed <55> *1000/(WALK_PERIOD);

#define REAR_LEFT_DOWN\
	turn leg3a to z-axis <0> speed <20> *1000/(WALK_PERIOD);

#define REAR_LEFT_BACK\
	turn leg3a to y-axis <70> speed <6.25> *1000/(WALK_PERIOD);\
	turn leg3a to z-axis <30> speed <7.5> *1000/(WALK_PERIOD);\
	turn leg3b to z-axis <-85> speed <23.75> *1000/(WALK_PERIOD);


#define WAIT_WALK\
	sleep WALK_PERIOD;\
	while(!moving)\
	{\
		sleep 111;\
	}



SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}
DoTheWalking()
{
	while(TRUE)
	{
		WAIT_WALK
		FRONT_RIGHT_UP
		MIDDLE_RIGHT_BACK
		REAR_LEFT_DOWN
		WAIT_WALK
		FRONT_RIGHT_DOWN
		MIDDLE_LEFT_UP
		REAR_LEFT_BACK
		WAIT_WALK
		FRONT_RIGHT_BACK
		MIDDLE_LEFT_DOWN
		REAR_RIGHT_UP
		WAIT_WALK
		MIDDLE_LEFT_BACK
		REAR_RIGHT_DOWN
		FRONT_LEFT_UP
		WAIT_WALK
		REAR_RIGHT_BACK
		FRONT_LEFT_DOWN
		MIDDLE_RIGHT_UP
		WAIT_WALK
		FRONT_LEFT_BACK
		MIDDLE_RIGHT_DOWN
		REAR_LEFT_UP
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	moving=TRUE;
}

StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	moving=FALSE;
	sleep 20*(WALK_PERIOD);
	
	turn leg6a to z-axis <20> speed <50> *1000/(WALK_PERIOD);
	turn leg6b to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg6a to y-axis <45> speed <25> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg6a to z-axis <0> speed <30> *1000/(WALK_PERIOD);
	turn leg6b to z-axis <20> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);

	turn leg2a to z-axis <-20> speed <50> *1000/(WALK_PERIOD);
	turn leg2b to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg2a to y-axis <0> speed <25> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg2a to z-axis <0> speed <10> *1000/(WALK_PERIOD);
	turn leg2b to z-axis <20> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	
	turn leg4a to z-axis <20> speed <50> *1000/(WALK_PERIOD);
	turn leg4b to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg4a to y-axis <-45> speed <25> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg4a to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	
	turn leg1a to z-axis <-20> speed <50> *1000/(WALK_PERIOD);
	turn leg1b to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg1a to y-axis <-45> speed <25> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg1a to z-axis <0> speed <30> *1000/(WALK_PERIOD);
	turn leg1b to z-axis <-20> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);

	turn leg5a to z-axis <20> speed <50> *1000/(WALK_PERIOD);
	turn leg5b to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg5a to y-axis <0> speed <25> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg5a to z-axis <0> speed <10> *1000/(WALK_PERIOD);
	turn leg5b to z-axis <-20> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);

	turn leg3a to z-axis <-20> speed <50> *1000/(WALK_PERIOD);
	turn leg3b to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg3a to y-axis <45> speed <25> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg3b to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg3a to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	
}

UnitSpeed()
{
	while(TRUE)
	{
		if (moving)
		{
			currentSpeed = (moveSpeed * 80)/(get CURRENT_SPEED);
			//if (currentSpeed>300) currentSpeed=300;
			WALK_PERIOD=currentSpeed;
			//get PRINT(1,WALK_PERIOD,moveSpeed);
			WALK_PERIOD=98;
		}
		sleep 142;
		//get PRINT(moving, currentSpeed,0,0);
	}
}


HitByWeapon(anglex, anglez)
{
	turn body to z-axis <0> - anglez speed <105.000000>;
	turn body to x-axis <0> - anglex speed <105.000000>;
	wait-for-turn body around z-axis;
	wait-for-turn body around x-axis;
	turn body to z-axis <0.000000> speed <30.000000>;
	turn body to x-axis <0.000000> speed <30.000000>;
}

Create()
{
	moving = FALSE;
	gun_1 = 0;
	restore_delay = 3000;
	turn leg6a to y-axis <30> now;
	turn leg4a to y-axis <-30> now;
	turn leg1a to y-axis <-30> now;//2
	turn leg3a to y-axis <30> now;//5
	start-script SmokeUnit();
	start-script DoTheWalking();
	while(get BUILD_PERCENT_LEFT)
	{
		sleep 250;
	}
		
	moveSpeed = (get MAX_SPEED);
	WALK_PERIOD=400;
	start-script UnitSpeed();
}


SweetSpot(piecenum)
{
	piecenum = body;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn head to y-axis <0.000000> speed <55.000000>;
	turn head to x-axis <0.000000> speed <55.000000>;
	Static_Var_2 = 0;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn head to y-axis heading speed <180.000000>;
	turn head to x-axis <0.000000> - pitch speed <110.000000>;
	wait-for-turn head around y-axis;
	wait-for-turn head around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn head to y-axis heading speed <110.000000>;
	turn head to x-axis <0.000000> - pitch speed <80.000000>;
	wait-for-turn head around y-axis;
	wait-for-turn head around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		move barrel1 to z-axis [-3.000000] speed [400.000000];
		wait-for-move barrel1 along z-axis;
		move barrel1 to z-axis [0.000000] speed [3.000000];
		sleep 150;
		gun_1 = 1;
		return (0);
	}
	if( gun_1 == 1 )
	{
		move barrel2 to z-axis [-3.000000] speed [400.000000];
		wait-for-move barrel1 along z-axis;
		move barrel2 to z-axis [0.000000] speed [3.000000];
		sleep 150;
		gun_1 = 0;
		return (0);
	}
}

FireSecondary()
{
	move barrel1 to z-axis [-3.000000] speed [400.000000];
	wait-for-move barrel1 along z-axis;
	move barrel1 to z-axis [0.000000] speed [3.000000];
	sleep 150;
}

AimFromSecondary(piecenum)
{
	piecenum = head;
}

AimFromPrimary(piecenum)
{
	piecenum = head;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare2;
		return (0);
	}
	if( gun_1 == 1 )
	{
		piecenum = flare1;
		return (0);
	}

}

QuerySecondary(piecenum)
{
	piecenum = flare1;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode body type BITMAPONLY;
		explode leg5a type BITMAPONLY;
		explode leg5b type FIRE | SMOKE | FALL;
		explode leg6a type BITMAPONLY;
		explode leg6b type BITMAPONLY;
		explode leg4a type FIRE | SMOKE | FALL;
		explode leg4b type FIRE | SMOKE | FALL;
		explode leg3a type BITMAPONLY;
		explode leg3b type BITMAPONLY;
		explode leg1a type BITMAPONLY;
		explode leg1b type BITMAPONLY;
		explode leg2a type BITMAPONLY;
		explode leg2b type BITMAPONLY;
		explode head type BITMAPONLY;
		explode barrel1 type BITMAPONLY;
		explode flare1 type BITMAPONLY;
		explode barrel2 type BITMAPONLY;
		explode flare2 type BITMAPONLY;
		return(0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode body type BITMAPONLY;
		explode leg5a type FALL;
		explode leg5b type FIRE | SMOKE | FALL;
		explode leg6a type FIRE | SMOKE | FALL;
		explode leg6b type FIRE | SMOKE | FALL;
		explode leg4a type FIRE | SMOKE | FALL;
		explode leg4b type FALL;
		explode leg3a type FIRE | SMOKE | FALL;
		explode leg3b type FIRE | SMOKE | FALL;
		explode leg1a type FIRE | SMOKE | FALL;
		explode leg1b type FIRE | SMOKE | FALL;
		explode leg2a type FIRE | SMOKE | FALL;
		explode leg2b type FALL;
		explode head type FIRE | SMOKE | FALL;
		explode barrel1 type FIRE | SMOKE | FALL;
		explode flare1 type FIRE | SMOKE | FALL;
		explode barrel2 type FIRE | SMOKE | FALL;
		explode flare2 type FIRE | SMOKE | FALL;
		return(0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode body type FIRE | SMOKE | FALL;
		explode leg5a type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode leg5b type EXPLODE_ON_HIT | SMOKE | FALL;
		explode leg6a type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode leg6b type FIRE | SMOKE | FALL;
		explode leg4a type EXPLODE_ON_HIT | SMOKE | FALL;
		explode leg4b type SMOKE | FALL;
		explode leg3a type FIRE | SMOKE | FALL;
		explode leg3b type EXPLODE_ON_HIT | SMOKE | FALL;
		explode leg1a type EXPLODE_ON_HIT | SMOKE | FALL;
		explode leg1b type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode leg2a type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode leg2b type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode head type SMOKE | FALL;
		explode barrel1 type FIRE | SMOKE | FALL;
		explode flare1 type EXPLODE_ON_HIT | SMOKE | FALL;
		explode barrel2 type EXPLODE_ON_HIT | SMOKE | FALL;
		explode flare2 type EXPLODE_ON_HIT | SMOKE | FALL;
		return(0);
	}
	corpsetype = 3 ;
		explode body type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode leg5a type EXPLODE_ON_HIT | FIRE | FALL;
		explode leg5b type EXPLODE_ON_HIT | FIRE | FALL;
		explode leg6a type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode leg6b type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode leg4a type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode leg4b type EXPLODE_ON_HIT | FIRE | FALL;
		explode leg3a type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode leg3b type EXPLODE_ON_HIT | FIRE | FALL;
		explode leg1a type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode leg1b type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode leg2a type EXPLODE_ON_HIT | FIRE | FALL;
		explode leg2b type EXPLODE_ON_HIT | FIRE | FALL;
		explode head type EXPLODE_ON_HIT | FIRE | FALL;
		explode barrel1 type EXPLODE_ON_HIT | FIRE | FALL;
		explode flare1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode barrel2 type EXPLODE_ON_HIT | FIRE | FALL;
		explode flare2 type EXPLODE_ON_HIT | FIRE | FALL;
}
