//            * Header Info *
// VersionSignature                     4
// NumberOfScripts                     22
// NumberOfPieces                      13
// LengthOfScripts                     57e
// NumberOfStaticVars                  5
// UKZero                              0
// OffsetToScriptCodeIndexArray        1624
// OffsetToScriptNameOffsetArray       167c
// OffsetToPieceNameOffsetArray        16d4
// OffsetToScriptCode                  2c
// OffsetToNameArray                   1708

// OffsetToFirstName                   1708

#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base,flare,turret,door1,door2,barrel,bore, aimpoint;

static-var  Static_Var_1, restore_delay, statechg_DesiredState, statechg_StateChanging, Static_Var_5;


activatescr()
{
	if( TRUE )
	{
		turn door1 to z-axis <0> speed <300>;
		turn door2 to z-axis <0> speed <300>;
		wait-for-turn door1 around z-axis;
		sleep 100;
	}
	if( TRUE )
	{
		move door1 to y-axis [0] speed [17];
		move door2 to y-axis [0] speed [17];
		move turret to y-axis [0] speed [17];
		sleep 700;
	}
	if( TRUE )
	{
		move bore to z-axis [0] speed [12];
		move barrel to z-axis [0] speed [18];
		sleep 316;
	}
	sleep 10;
	return (0);
}

deactivatescr()
{
	
	
	if( TRUE )
	{   
		turn turret to y-axis <0> speed <100>;
		move bore to z-axis [-6] speed [12];
		move barrel to z-axis [-9] speed [18];
		sleep 316;
	}

	if( TRUE )
	{
		move door1 to y-axis [17] speed [17];
		move door2 to y-axis [17] speed [17];
		move turret to y-axis [-17] speed [17];
		sleep 700;
	}
	if( TRUE )
	{
		turn door1 to z-axis <-90> speed <300>;
		turn door2 to z-axis <90> speed <300>;
		wait-for-turn door1 around z-axis;
		sleep 100;
	}
	sleep 10;
	return (0);;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Go()
{
	if( !Static_Var_1 )
	{
		call-script activatescr();
	}
	Static_Var_1 = 1;
	set ARMORED to 0;
	return (0);
}

Stop()
{
	set ARMORED to 1;
	Static_Var_1 = 0;
	call-script deactivatescr();
	return (0);
}

InitState()
{
	statechg_DesiredState = FALSE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	turn turret to y-axis <0.000000> speed <100.016484>;
	turn turret to x-axis <0.000000> speed <50.005495>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	start-script RequestState(1);
	return (0);
}

Create()
{
	hide flare;
			statechg_DesiredState=1;
	Static_Var_1 = 0;
	Static_Var_5 = 0;
	restore_delay = 3000;
	call-script InitState();
	start-script SmokeUnit();
	start-script RequestState(1);
	set-signal-mask 2;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
			//call-script Go();
	start-script RestoreAfterDelay();
	return (0);
}

Reload1()
{
	sleep 2100;
	Static_Var_5 = 0;
	return (0);
}

Reload2()
{
	sleep 3780;
	Static_Var_5 = 0;
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

AimWeapon1(Func_Var_1, Func_Var_2)
{
	start-script RequestState(0);
	signal 2;
	set-signal-mask 2;
	if( Func_Var_2 >= 10012 OR Static_Var_5 == 1 )
	{
		return (0);
	}
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	turn turret to y-axis Func_Var_1 speed <100.016484>;
	turn turret to x-axis <0.000000> - Func_Var_2 speed <50.005495>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	Static_Var_5 = 1;
	start-script Reload1();
	move barrel to z-axis [-4.000000] speed [500.000000];
	show flare;
	sleep 250;
	hide flare;
	move barrel to z-axis [0.000000] speed [3.000000];
	return (0);
}

AimFromWeapon1(piecenum)
{
	piecenum = aimpoint;
}

QueryWeapon1(Func_Var_1)
{
	Func_Var_1 = 1;
	return (0);
}

AimWeapon2(Func_Var_1, Func_Var_2)
{
	start-script RequestState(0);
	signal 4;
	set-signal-mask 4;
	if( Func_Var_2 < 10012 OR Static_Var_5 == 1 )
	{
		return (0);
	}
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	turn turret to y-axis Func_Var_1 speed <100.016484>;
	turn turret to x-axis <0.000000> - Func_Var_2 speed <50.005495>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon2()
{
	Static_Var_5 = 1;
	start-script Reload2();
	move barrel to z-axis [-4.000000] speed [500.000000];
	show flare;
	sleep 250;
	hide flare;
	move barrel to z-axis [0.000000] speed [3.000000];
	return (0);
}

AimFromWeapon2(Func_Var_1)
{
	Func_Var_1 = 2;
	return (0);
}

QueryWeapon2(Func_Var_1)
{
	Func_Var_1 = 1;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		explode door1 type BITMAPONLY;
		explode door2 type BITMAPONLY;
		explode turret type BITMAPONLY;
		explode bore type BITMAPONLY;
		explode barrel type FIRE | SMOKE | FALL;
		explode flare type BITMAPONLY;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY;
		explode door1 type FALL;
		explode door2 type FALL;
		explode turret type FALL;
		explode bore type FIRE | SMOKE | FALL;
		explode barrel type FIRE | SMOKE | FALL;
		explode flare type FALL;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL;
		explode door1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode door2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode turret type FIRE | SMOKE | FALL;
		explode bore type EXPLODE_ON_HIT | SMOKE | FALL;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode flare type EXPLODE_ON_HIT | SMOKE | FALL;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode door1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode door2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode bore type EXPLODE_ON_HIT | FIRE | FALL;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
	return corpsetype;
}
