#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, arm, tower, wake, rdoor, ldoor, boom1, boom2, boom3,
       boom4, magnet, link, boom5, boom6;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, oldHead, Static_Var_5;

// Signal definitions
#define SIG_MOVE			2


SetDirection(heading)
{
	var spd;
	spd = (get ABS(oldHead) - get ABS(heading)) / 2;
	oldHead = heading;
}

RockOnWaves()
{
	var rockDir, rockAng, rockSpeed;
	rockDir = <-0.1>;
	rockAng = <-0.1>;
	while( TRUE )
	{
		while( get ABS(rockAng) < <1.31> )
		{
			rockSpeed = <1.45> - get ABS(rockAng);
			turn base to x-axis rockAng speed rockSpeed*3;
			wait-for-turn base around x-axis;
			rockAng = rockAng + rockDir;
		}
		rockDir = 0 - rockDir;
		rockAng = rockAng + rockDir + rockDir;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RockOnWaves();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	start-script SmokeUnit();
}

waveSplash()
{
	while( TRUE )
	{
		turn base to x-axis <-3.0> speed <3.0>;
		move base to y-axis [0.35] speed [0.25];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.0> speed <3.0>;
		move base to y-axis [0.0] speed [0.25];
		wait-for-turn base around x-axis;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var waketime;
	start-script waveSplash();
	while( TRUE )
	{
		emit-sfx 2 from wake;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if( waketime < 50 ) waketime = 50;
		sleep 10000 / waketime;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	turn base to x-axis <0.0> speed <3.0>;
	move base to y-axis [0.0] speed [0.25];
}

SweetSpot(piecenum)
{
	piecenum = base;
}

StartDoorOpen()
{
	signal 4;
	set-signal-mask 4;
	turn rdoor to z-axis <-90.> speed <100.>;
	turn ldoor to z-axis <90.> speed <100.>;
	wait-for-turn rdoor around z-axis;
	wait-for-turn ldoor around z-axis;
	sleep 5000;
	turn rdoor to z-axis <0.> speed <100.>;
	turn ldoor to z-axis <0.> speed <100.>;
	wait-for-turn rdoor around z-axis;
	wait-for-turn ldoor around z-axis;
	return(0);
}

BoomCalc(posxz, posy)
{
	var Func_Var_3, Func_Var_4, Func_Var_5;
	Func_Var_3 = get PIECE_XZ(tower) - posxz;
	Func_Var_4 = posy - get PIECE_Y(tower);
	Func_Var_5 = get XZ_HYPOT(Func_Var_3);
	Static_Var_2 = get HYPOT(Func_Var_5,Func_Var_4) -[32];
	Static_Var_3 = get XZ_ATAN(Func_Var_3);
	Static_Var_4 = get ATAN(Func_Var_4,Func_Var_5);
	Static_Var_5 = Static_Var_2 < 14745600;
	return (0);
}

BoomExtend()
{
	start-script StartDoorOpen();
	turn tower to y-axis Static_Var_3 speed <200.>;
	wait-for-turn tower around y-axis;
	move boom1 to z-axis Static_Var_2 / 6 speed [60.];
	move boom2 to z-axis Static_Var_2 / 6 speed [60.];
	move boom3 to z-axis Static_Var_2 / 6 speed [60.];
	move boom4 to z-axis Static_Var_2 / 6 speed [60.];
	move boom5 to z-axis Static_Var_2 / 6 speed [60.];
	move boom6 to z-axis Static_Var_2 / 6 speed [60.];
	wait-for-move boom1 along z-axis;
	wait-for-move boom2 along z-axis;
	wait-for-move boom3 along z-axis;
	wait-for-move boom4 along z-axis;
	wait-for-move boom5 along z-axis;
	wait-for-move boom6 along z-axis;
	turn magnet to x-axis Static_Var_4 speed <80.>;
	turn arm to x-axis <0.> - Static_Var_4 speed <80.>;
	wait-for-turn arm around x-axis;
	wait-for-turn magnet around x-axis;
	return (0);
}

BoomReset()
{
	turn arm to x-axis <0.> speed <60.>;
	turn magnet to x-axis <0.> speed <60.>;
	wait-for-turn arm around x-axis;
	wait-for-turn magnet around x-axis;
	turn tower to y-axis <0.> speed <200.>;
	move boom1 to z-axis [0.] speed [50.];
	move boom2 to z-axis [0.] speed [50.];
	move boom3 to z-axis [0.] speed [50.];
	move boom4 to z-axis [0.] speed [50.];
	move boom5 to z-axis [0.] speed [50.];
	move boom6 to z-axis [0.] speed [50.];
	return (0);
}

BoomToPad()
{
	start-script StartDoorOpen();
	turn magnet to x-axis <0.> speed <60.>;
	turn arm to x-axis <0.> speed <60.>;
	wait-for-turn magnet around x-axis;
	wait-for-turn arm around x-axis;
	turn tower to y-axis <0.> speed <200.>;
	move boom1 to z-axis [0.] speed [60.];
	move boom2 to z-axis [0.] speed [60.];
	move boom3 to z-axis [0.] speed [60.];
	move boom4 to z-axis [0.] speed [60.];
	move boom5 to z-axis [0.] speed [60.];
	move boom6 to z-axis [0.] speed [60.];
	wait-for-turn tower around y-axis;
	wait-for-turn arm around x-axis;
	wait-for-move boom1 along z-axis;
	wait-for-move boom2 along z-axis;
	wait-for-move boom3 along z-axis;
	wait-for-move boom4 along z-axis;
	wait-for-move boom5 along z-axis;
	wait-for-move boom6 along z-axis;
	turn magnet to x-axis <-30.> speed <60.>;
	turn arm to x-axis <30.> speed <60.>;
	wait-for-turn arm around x-axis;
	return (0);
}

TransportPickup(unitid)
{
	call-script BoomCalc(get UNIT_XZ(unitid),get UNIT_Y(unitid) + get UNIT_HEIGHT(unitid));
	if( Static_Var_4 AND get UNKNOWN_UNIT_VALUE(74)(unitid) == get UNKNOWN_UNIT_VALUE(74)(get UNKNOWN_UNIT_VALUE(71)) )
	{
		set BUSY to 1;
		call-script BoomExtend();
		move link to y-axis [0.000000] - get UNIT_HEIGHT(unitid) now;
		attach-unit unitid to link;
		call-script BoomToPad();
		attach-unit unitid to 0 - 1;
		call-script BoomReset();
		set BUSY to 0;
	}
}

TransportDrop(unitid, position)
{
	call-script BoomCalc(position,get GROUND_HEIGHT(position) + get UNIT_HEIGHT(unitid));
	if( Static_Var_4 )
	{
		set BUSY to 1;
		call-script BoomToPad();
		move link to y-axis [0.000000] - get UNIT_HEIGHT(unitid) now;
		attach-unit unitid to link;
		call-script BoomExtend();
		drop-unit unitid;
		call-script BoomReset();
		set BUSY to 0;
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		explode tower type BITMAPONLY;
		explode arm type BITMAPONLY;
		explode boom1 type BITMAPONLY;
		explode boom2 type BITMAPONLY;
		explode boom3 type BITMAPONLY;
		explode boom4 type BITMAPONLY;
		explode boom5 type BITMAPONLY;
		explode boom6 type BITMAPONLY;
		explode magnet type FIRE | SMOKE | FALL;
		explode link type BITMAPONLY;
		explode rdoor type BITMAPONLY;
		explode ldoor type BITMAPONLY;
		explode wake type BITMAPONLY;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY;
		explode tower type FIRE | SMOKE | FALL;
		explode arm type FIRE | SMOKE | FALL;
		explode boom1 type FALL;
		explode boom2 type FALL;
		explode boom3 type FALL;
		explode boom4 type FIRE | SMOKE | FALL;
		explode boom5 type FIRE | SMOKE | FALL;
		explode boom6 type FIRE | SMOKE | FALL;
		explode magnet type FIRE | SMOKE | FALL;
		explode link type FALL;
		explode rdoor type FALL;
		explode ldoor type FIRE | SMOKE | FALL;
		explode wake type FIRE | SMOKE | FALL;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode tower type SMOKE | FALL;
		explode arm type FIRE | SMOKE | FALL;
		explode boom1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode boom2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode boom3 type FIRE | SMOKE | FALL;
		explode boom4 type FIRE | SMOKE | FALL;
		explode boom5 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode boom6 type FIRE | SMOKE | FALL;
		explode magnet type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode link type FIRE | SMOKE | FALL;
		explode rdoor type SMOKE | FALL;
		explode ldoor type FIRE | SMOKE | FALL;
		explode wake type EXPLODE_ON_HIT | SMOKE | FALL;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode tower type EXPLODE_ON_HIT | FIRE | FALL;
		explode arm type EXPLODE_ON_HIT | FIRE | FALL;
		explode boom1 type EXPLODE_ON_HIT | FIRE | FALL;
		explode boom2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode boom3 type EXPLODE_ON_HIT | FIRE | FALL;
		explode boom4 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode boom5 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode boom6 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode magnet type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode link type EXPLODE_ON_HIT | FIRE | FALL;
		explode rdoor type EXPLODE_ON_HIT | FIRE | FALL;
		explode ldoor type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode wake type EXPLODE_ON_HIT | FIRE | FALL;
	return corpsetype;
}
