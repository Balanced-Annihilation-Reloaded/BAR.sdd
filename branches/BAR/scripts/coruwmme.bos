#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, disc;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, statechg_DesiredState,
            statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE			2


fixGo()
{
	spin disc around y-axis speed Static_Var_1 accelerate Static_Var_2;
	set ARMORED to 0;
	Static_Var_4 = 1;
}

Stop()
{
	stop-spin disc around y-axis decelerate Static_Var_3;
	Static_Var_4 = 0;
	set ARMORED to 1;

}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script fixGo();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	Static_Var_4 = 0;
	Static_Var_1 = 0;
	Static_Var_2 = 91;
	Static_Var_3 = 910;
	call-script InitState();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	set ARMORED to 1;
}

Activate()
{
	start-script RequestState(0);
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	while( TRUE )
	{
		if( Static_Var_4 )
		{
			emit-sfx 259 from disc;
		}
		sleep 250;
	}
}

Deactivate()
{
	start-script RequestState(1);
	signal SIG_ACTIVATE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

SetSpeed(Func_Var_1)
{
	Static_Var_1 = Func_Var_1 * 10;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode disc type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode disc type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode disc type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
		explode disc type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
}
