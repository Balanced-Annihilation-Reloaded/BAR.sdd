#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, link, thrust1, thrust2, thrust3, thrust4;

static-var  Static_Var_1, unitviewer, statechg_DesiredState, statechg_StateChanging;


pickupscr()
{

	sleep 11;
	return (0);
}

dropoffscr()
{

	sleep 15;
	return (0);
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.021978>;
	turn base to x-axis Func_Var_1 speed <105.021978>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.005495>;
	turn base to x-axis <0.000000> speed <30.005495>;
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script pickupscr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script dropoffscr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	unitviewer = FALSE;
	Static_Var_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
	return (0);
}

Demo()
{
	unitviewer = TRUE;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

QueryTransport(Func_Var_1, Func_Var_2)
{
	Func_Var_1 = 1;
	return (0);
}

BeginTransport(Func_Var_1)
{
	move link to y-axis [0.000000] - Func_Var_1 now;
	start-script RequestState(0);
	return (0);
}

EndTransport()
{
	start-script RequestState(1);
	return (0);
}

Activate()
{
	if( unitviewer )
	{
		start-script RequestState(0);
	}
	return (0);
}

Deactivate()
{
	if( unitviewer )
	{
		start-script RequestState(1);
	}
	return (0);
}



StopMoving()
{
	signal 8;
	Static_Var_1 = 0;
	return (0);
}

MoveRate1()
{
	signal 8;
	set-signal-mask 8;
	Static_Var_1 = 1;
	return (0);
}

MoveRate2()
{
	signal 8;
	set-signal-mask 8;
	Static_Var_1 = 2;
	return (0);
}

MoveRate3()
{
	signal 8;
	set-signal-mask 8;
	Static_Var_1 = 3;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		explode link type BITMAPONLY;
		explode thrust1 type BITMAPONLY;
		explode thrust2 type BITMAPONLY;
		explode thrust3 type BITMAPONLY;
		explode thrust4 type BITMAPONLY;
		return(0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY;
		explode link type FIRE | SMOKE | FALL;
		explode thrust1 type FIRE | SMOKE | FALL;
		explode thrust2 type FIRE | SMOKE | FALL;
		explode thrust3 type FIRE | SMOKE | FALL;
		explode thrust4 type FIRE | SMOKE | FALL;
		return(0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode link type EXPLODE_ON_HIT | SMOKE | FALL;
		explode thrust1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode thrust2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode thrust3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode thrust4 type FIRE | SMOKE | FALL;
		return(0);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode link type EXPLODE_ON_HIT | FIRE | FALL;
		explode thrust1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode thrust2 type EXPLODE_ON_HIT | FIRE | FALL;
		explode thrust3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode thrust4 type EXPLODE_ON_HIT | FIRE | FALL;
}
