#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, flare1, flare2 ;

static-var  gun_1, restore_delay, statechg_DesiredState, statechg_StateChanging, OpenedState;

// Signal definitions
#define SIG_AIM				2
#define SIG_RESTORE			4

Go()
{
	turn turret to x-axis <0.000000> now;
	turn turret to x-axis <-90.000000> speed <45.395604>;
	sleep 1983;
	OpenedState = 1;
	return (0);
}

Stop()
{
	OpenedState = 0;
	turn turret to x-axis <-90.000000> now;
	turn turret to x-axis <0.000000> speed <45.098901>;
	sleep 1996;
	return (0);
}


HitByWeapon(anglex, anglez)
{
	turn base to z-axis <0> - anglez speed <65.000000>;
	turn base to x-axis <0> - anglex speed <65.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	hide flare1;
	hide flare2;
	OpenedState = 0;
	restore_delay = 3000;
	call-script InitState();
	start-script SmokeUnit();
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1;
	return (0);
}

RestoreAfterDelay()
{
	signal SIG_RESTORE;
	set-signal-mask SIG_RESTORE;
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
	return (0);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !OpenedState )
	{
		sleep 250;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
}

QueryPrimary(piecenum)
{
	if (gun_1){
		piecenum = flare1;
	}
	else
	{
		piecenum = flare2;
	}
	gun_1 = !gun_1;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		explode turret type FIRE | SMOKE | FALL;
		explode flare1 type BITMAPONLY;
		explode flare2 type BITMAPONLY;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY;
		explode turret type FIRE | SMOKE | FALL;
		explode flare1 type FALL;
		explode flare2 type FALL;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode turret type SMOKE | FALL;
		explode flare1 type FIRE | SMOKE | FALL;
		explode flare2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL;
		explode flare1 type EXPLODE_ON_HIT | FIRE | FALL;
		explode flare2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
	return corpsetype;
}
