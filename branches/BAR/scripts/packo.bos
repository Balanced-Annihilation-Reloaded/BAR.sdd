#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, sleeve, barrel1, barrel2, flare1, flare2;

static-var  Static_Var_1, Static_Var_2, restore_delay, Static_Var_4, statechg_DesiredState,
            statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2


Activatescr()
{
	move turret to y-axis [10] speed [40];
	wait-for-move turret along y-axis;
	move barrel2 to z-axis [7] speed [28];
	move barrel1 to z-axis [7] speed [28];
	sleep 200;
}

Deactivatescr()
{
	move turret to y-axis [0] speed [40];
	wait-for-move turret along y-axis;
	move barrel2 to z-axis [0] speed [28];
	move barrel1 to z-axis [0] speed [28];
	sleep 200;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	if( !Static_Var_1 )
	{
		call-script Activatescr();
	}
	Static_Var_1 = 1;
	set ARMORED to 0;
}

Stop()
{
	set ARMORED to 1;
	Static_Var_1 = 0;
	call-script Deactivatescr();
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script Stop();
			currentstate = 1;
		}
		else
		{
			call-script Go();
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
}

Create()
{

	Static_Var_1 = 1;
	Static_Var_2 = 0;
	Static_Var_4 = 1;
	restore_delay = 3000;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	start-script SmokeUnit();
	start-script RequestState(0);
	set-signal-mask SIG_AIM;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script RestoreAfterDelay();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	turn sleeve to y-axis heading speed <900.000000>;
	wait-for-turn turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

QueryPrimary(piecenum)
{
	
	piecenum = flare1 + Static_Var_2;
}

AimFromPrimary(piecenum)
{
	piecenum = sleeve;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Shot1()
{
	Static_Var_2 = !Static_Var_2;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode sleeve type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode barrel1 type BITMAPONLY | BITMAP5;
		explode barrel2 type BITMAPONLY | BITMAP5;
		explode flare1 type BITMAPONLY | BITMAP5;
		explode flare2 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode sleeve type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode barrel1 type BITMAPONLY | BITMAP5;
		explode barrel2 type BITMAPONLY | BITMAP5;
		explode flare1 type BITMAPONLY | BITMAP5;
		explode flare2 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		if( Static_Var_1 )
		{
			explode sleeve type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		}
		if( !Static_Var_1 )
		{
			explode sleeve type BITMAPONLY | BITMAP5;
		}
		explode barrel1 type BITMAPONLY | BITMAP2;
		explode barrel2 type BITMAPONLY | BITMAP2;
		explode flare1 type BITMAPONLY | BITMAP2;
		explode flare2 type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 4;
	explode base type BITMAPONLY | BITMAP1;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode sleeve type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode barrel1 type BITMAPONLY | BITMAP3;
	explode barrel2 type BITMAPONLY | BITMAP3;
	explode flare1 type BITMAPONLY | BITMAP3;
	explode flare2 type BITMAPONLY | BITMAP3;
}
