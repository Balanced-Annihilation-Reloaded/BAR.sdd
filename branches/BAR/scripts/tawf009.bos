#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  lturret, rturret, base, lprop, rprop, bprop;

static-var  gun_1, turnClock, turnCounter, wheelSpeed, currentSpeed, moveSpeed, pivotAngle;

// Signal definitions
#define SIG_MOVE			2

#define SIG_AIM				4

TurnControl()
{
	var lastHeading, currHeading, diffHeading;
	lastHeading = GET HEADING;
	while (TRUE)
	{
		currHeading = GET HEADING;
		diffHeading = currHeading - lastHeading;
		// Set values for tilt
		turnClock = 1;
		turnCounter = 1;	
		if (diffHeading >= 500)
			{
			turnClock = <2>;
			}
		if (diffHeading <= -500)
			{
			turnCounter = <2>;
			}
		lastHeading = currHeading;
		sleep 67;
	}
}

Propcontrol()
{
	while(TRUE)
	{
		currentSpeed = (get CURRENT_SPEED)*1000/moveSpeed;
		spin lprop around z-axis speed (<-1.000000> * currentSpeed ) * turnCounter accelerate <10.000000>;
		spin rprop around z-axis speed (<1.000000> * currentSpeed ) * turnClock accelerate <10.000000>;
		spin bprop around z-axis speed <1.000000>*currentSpeed accelerate <10.000000>;
		sleep 33;
	}
}

Create()
{
	gun_1 = lturret;
	moveSpeed = get MAX_SPEED;
	start-script Propcontrol();
	start-script TurnControl();
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;

	while( TRUE )
	{
		emit-sfx 256 | 3 from lprop;
		emit-sfx 256 | 3 from rprop;
		emit-sfx 256 | 3 from bprop;
		sleep 250;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
}

FirePrimary()
{
	gun_1 = !gun_1;
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

RestoreAfterDelay()
{
	sleep 5000;
	move rturret to x-axis [0] speed [10];
	move lturret to x-axis [0] speed [10];
	
	wait-for-move rturret along x-axis;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	move rturret to x-axis [9] speed [30];
	move lturret to x-axis [-9] speed [30];
	
	wait-for-move rturret along x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimFromPrimary(piecenum)
{
	piecenum = lturret;
}
Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
}
