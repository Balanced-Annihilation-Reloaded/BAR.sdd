#include "sfxtype.h"
#include "exptype.h"

#define SIG_BUILD 4	

piece  base, ldoor, rdoor, lturret, rturret, lplate, rplate, lnano, rnano, smoke1, smoke2;

static-var  bMoving, moveSpeed, currentSpeed, animSpeed, terrain, statechg_DesiredState, statechg_StateChanging, notBuilding, nano;


activatescr()
{
	turn ldoor to z-axis <90> speed <180>;
	turn rdoor to z-axis <-90> speed <180>;
	move lplate to x-axis [7.5] speed [15];
	move rplate to x-axis [-7.5] speed [15];
	sleep 400;
}

deactivatescr()
{
	set INBUILDSTANCE to 0;

	turn rturret to x-axis <0> speed <160.038462>;
	turn lturret to x-axis <0> speed <160.038462>;
	wait-for-turn lturret around x-axis;
	wait-for-turn rturret around x-axis;
	sleep 300;
	turn ldoor to z-axis <0> speed <180>;
	turn rdoor to z-axis <0> speed <180>;
	move lplate to x-axis [0] speed [15];
	move rplate to x-axis [0] speed [15];
	sleep 400;

}

HitByWeapon(anglex, anglez)
{
	turn base to z-axis anglez speed <65.000000>;
	turn base to x-axis <0> - anglex speed <65.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}

UnitSpeed()
{
	while(TRUE)
	{
		currentSpeed = (get CURRENT_SPEED)*20/moveSpeed;
		if (currentSpeed<4) currentSpeed=4;
		animSpeed = 1800 / currentSpeed;
		sleep 142;
	}
}

Smoke()
{
	while( TRUE )
	{
		if ( bMoving )
		{
			if( terrain == 4 )
			{
				emit-sfx 1024 + 0 from smoke1;
				emit-sfx 1024 + 0 from smoke2;
			}
		}
		sleep animSpeed;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script Smoke();
	start-script UnitSpeed();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script deactivatescr();
			notBuilding = 1;
			currentstate = 1;
		}
		else
		{
			call-script activatescr();
			notBuilding = 0;
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	bMoving = FALSE;
	moveSpeed = get (MAX_SPEED);
	animSpeed = 100;
	notBuilding = 1;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	start-script SmokeUnit();
}

setSFXoccupy(state)
{
	terrain = state;
}

StartMoving()
{
	bMoving = TRUE;
}


StopMoving()
{
	bMoving = FALSE;
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(heading, pitch)
{
	start-script RequestState(0);
	while( notBuilding ) sleep 100;
	signal SIG_BUILD;
	turn rturret to x-axis heading speed <160.038462>;
	turn lturret to x-axis <0> - heading speed <160.038462>;
	set INBUILDSTANCE to 1;
	wait-for-turn rturret around x-axis;
}

StopBuilding()
{
	signal SIG_BUILD;	
	set-signal-mask SIG_BUILD;
	sleep 6000;
	set-signal-mask 0;
	signal SIG_BUILD;	
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	if (nano == 1)
	{
		piecenum = lnano;
	}
	else
	{
		piecenum = rnano;
	}
	nano= !nano;
}


SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		explode rdoor type BITMAPONLY;
		explode rplate type BITMAPONLY;
		explode rturret type FIRE | SMOKE | FALL;
		explode rnano type BITMAPONLY;
		explode ldoor type BITMAPONLY;
		explode lplate type BITMAPONLY;
		explode lturret type BITMAPONLY;
		explode lnano type BITMAPONLY;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY;
		explode rdoor type FIRE | SMOKE | FALL;
		explode rplate type FIRE | SMOKE | FALL;
		explode rturret type FALL;
		explode rnano type FIRE | SMOKE | FALL;
		explode ldoor type FIRE | SMOKE | FALL;
		explode lplate type FIRE | SMOKE | FALL;
		explode lturret type FALL;
		explode lnano type FALL;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode rdoor type EXPLODE_ON_HIT | SMOKE | FALL;
		explode rplate type FIRE | SMOKE | FALL;
		explode rturret type FIRE | SMOKE | FALL;
		explode rnano type EXPLODE_ON_HIT | SMOKE | FALL;
		explode ldoor type FIRE | SMOKE | FALL;
		explode lplate type SMOKE | FALL;
		explode lturret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode lnano type SMOKE | FALL;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode rdoor type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode rplate type EXPLODE_ON_HIT | FIRE | FALL;
		explode rturret type EXPLODE_ON_HIT | FIRE | FALL;
		explode rnano type EXPLODE_ON_HIT | FIRE | FALL;
		explode ldoor type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode lplate type EXPLODE_ON_HIT | FIRE | FALL;
		explode lturret type EXPLODE_ON_HIT | FIRE | FALL;
		explode lnano type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
	return corpsetype;
}
