#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SIG_BUILD		4	

piece  base, door1, door2,  nano1, nano2, turret;

static-var  notBuilding, statechg_DesiredState, statechg_StateChanging, nanopiece;


activatescr()
{
	turn door2 to x-axis <-170.664835> speed <282.131868>;
	turn door1 to x-axis <170.664835> speed <282.131868>;
	move turret to y-axis [5.4] speed [5.4];
	sleep 588;
}

deactivatescr()
{
	set INBUILDSTANCE to 0;
	turn turret to y-axis [0] speed [360];
	wait-for-turn turret around y-axis;
	turn door1 to x-axis <0> speed <282.131868>;
	turn door2 to x-axis <0> speed <282.131868>;
	move turret to y-axis [0] speed [12];
	sleep 588;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(anglex, anglez)
{
	turn base to z-axis anglez speed <105.000000>;
	turn base to x-axis <0> - anglex speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script deactivatescr();
			notBuilding = 1;
			currentstate = 1;
		}
		else
		{
			call-script activatescr();
			notBuilding = 0;
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	notBuilding = 1;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	nanopiece=TRUE;
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(heading, pitch)
{
	start-script RequestState(0);
	while( notBuilding ) sleep 100;
	signal SIG_BUILD;
	turn turret to y-axis heading speed <160.038462>;
	wait-for-turn turret around y-axis;
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	signal SIG_BUILD;	
	set-signal-mask SIG_BUILD;
	sleep 6000;
	set-signal-mask 0;
	signal SIG_BUILD;	
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	if (nanopiece) {
		piecenum = nano1;
		nanopiece= !nanopiece;
	}
	else
	{
		piecenum=nano2;
		nanopiece= !nanopiece;
	}
}

/*
TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}
*/

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		explode door1 type FIRE | SMOKE | FALL;
		explode door2 type BITMAPONLY;
		explode turret type BITMAPONLY;
		explode nano1 type BITMAPONLY;
		explode nano2 type BITMAPONLY;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY;
		explode door1 type FALL;
		explode door2 type FALL;
		explode turret type FIRE | SMOKE | FALL;
		explode nano1 type FIRE | SMOKE | FALL;
		explode nano2 type FIRE | SMOKE | FALL;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode door1 type SHATTER;
		explode door2 type SHATTER;
		explode turret type EXPLODE_ON_HIT | SMOKE | FALL;
		explode nano1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode nano2 type FIRE | SMOKE | FALL;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode door1 type SHATTER;
		explode door2 type SHATTER;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode nano1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode nano2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
	return corpsetype;
}
