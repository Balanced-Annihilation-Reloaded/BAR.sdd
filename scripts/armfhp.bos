#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, doorr1, doorr2, doorl1,doorl2, standr, standl, nanol, nanor, emitl, emitr;
static-var  Static_Var_1, unitviewer, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE			2


activatescr()
{
	if( TRUE )
	{
		turn doorr1 to x-axis <170> speed <170>;
		turn doorr2 to x-axis <-90> speed <170>;
		turn doorl1 to x-axis <170> speed <170>;
		turn doorl2 to x-axis <-90> speed <170>;
		sleep 514;
	}
	if( TRUE )
	{
		move standr to y-axis [10] speed [20];
		move standl to y-axis [10] speed [20];
		sleep 518;
	}

	if( TRUE )
	{
		turn nanor to y-axis <90.016484> speed <173.000000>;
		turn nanol to y-axis <-90.016484> speed <173.000000>;
		sleep 519;
	}
	sleep 13;
	return (0);
}

deactivatescr()
{

	if( TRUE )
	{
		turn nanor to y-axis <0> speed <173.000000>;
		turn nanol to y-axis <0> speed <173.000000>;
		sleep 519;
	}
	if( TRUE )
	{
		move standr to y-axis [0] speed [20];
		move standl to y-axis [0] speed [20];
		sleep 518;
	}
	if( TRUE )
	{
		turn doorr1 to x-axis <0> speed <170>;
		turn doorr2 to x-axis <0> speed <170>;
		turn doorl1 to x-axis <0> speed <170>;
		turn doorl2 to x-axis <0> speed <170>;
		sleep 514;
	}
	sleep 13;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
	return (0);
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
	return (0);
}

Go()
{

	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
	return (0);
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();

	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{

	unitviewer = FALSE;
	Static_Var_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
	return (0);
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_1 == 0 )
	{
		piecenum = emitr;
	}
	if( Static_Var_1 == 1 )
	{
		piecenum = emitl;
	}
	++Static_Var_1;
	if( Static_Var_1 == 2 )
	{
		Static_Var_1 = 0;
	}
	return (0);
}

Demo()
{
	unitviewer = TRUE;
	return (0);
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	if( !unitviewer )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
	return (0);
}

StartBuilding()
{
	return (0);
}

StopBuilding()
{
	return (0);
}

QueryBuildInfo(piecenum)
{
	piecenum = base;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		explode standl type BITMAPONLY;
		explode nanol type FIRE | SMOKE | FALL;
		explode emitl type BITMAPONLY;
		explode doorr2 type BITMAPONLY;
		explode doorr1 type BITMAPONLY;
		explode doorl2 type BITMAPONLY;
		explode doorl1 type BITMAPONLY;
		explode standr type BITMAPONLY;
		explode nanor type BITMAPONLY;
		explode emitr type BITMAPONLY;
		return(0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY;
		explode standl type FIRE | SMOKE | FALL;
		explode nanol type FALL;
		explode emitl type FALL;
		explode doorr2 type FIRE | SMOKE | FALL;
		explode doorr1 type FALL;
		explode doorl2 type FALL;
		explode doorl1 type FIRE | SMOKE | FALL;
		explode standr type FIRE | SMOKE | FALL;
		explode nanor type FIRE | SMOKE | FALL;
		explode emitr type FALL;
		return(0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode standl type EXPLODE_ON_HIT | SMOKE | FALL;
		explode nanol type FIRE | SMOKE | FALL;
		explode emitl type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode doorr2 type SMOKE | FALL;
		explode doorr1 type SMOKE | FALL;
		explode doorl2 type FIRE | SMOKE | FALL;
		explode doorl1 type SMOKE | FALL;
		explode standr type EXPLODE_ON_HIT | SMOKE | FALL;
		explode nanor type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode emitr type EXPLODE_ON_HIT | SMOKE | FALL;
		return(0);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode standl type EXPLODE_ON_HIT | FIRE | FALL;
		explode nanol type EXPLODE_ON_HIT | FIRE | FALL;
		explode emitl type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode doorr2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode doorr1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode doorl2 type EXPLODE_ON_HIT | FIRE | FALL;
		explode doorl1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode standr type EXPLODE_ON_HIT | FIRE | FALL;
		explode nanor type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode emitr type EXPLODE_ON_HIT | FIRE | FALL;
}
