#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, eye, blwheel, blthigh, blleg, flwheel, flthigh, flleg, brwheel, brthigh, brleg, frwheel, frthigh, frleg;

static-var  Static_Var_1, turnClock, turnCounter, wheelSpeed, currentSpeed, moveSpeed, pivotAngle;

TurnControl()
{
	var lastHeading, currHeading, diffHeading;
	lastHeading = GET HEADING;
	while (TRUE)
	{
		currHeading = GET HEADING;
		diffHeading = currHeading - lastHeading;
		// Set values for tilt
		
		if ( !get ACTIVATION )
		{
			//Smooth out values
			if (diffHeading < 1000 AND diffHeading > -1000) pivotAngle = 0;
			turn base to z-axis 1.3 * diffHeading speed <13>;
		}
		// Set Values for differential system
		if ( get ACTIVATION )
		{
		turnClock = 2;
		turnCounter = 2;	
		if (diffHeading >= 500)
			{
			turnClock = <0.01>;
			}
		if (diffHeading <= -500)
			{
			turnCounter = <0.01>;
			}
		}
		lastHeading = currHeading;
		sleep 67;
	}
}

WheelControl()
{
	sleep 33;
	while(TRUE)
	{
		currentSpeed = (get CURRENT_SPEED)*20/moveSpeed;
		wheelSpeed = currentSpeed * 7;
		if (currentSpeed<4) currentSpeed=4;	// prevent infinite timing
		//get PRINT(currentSpeed,turnCounter,turnClock);	
		if ( get ACTIVATION )
		{
		//	get PRINT((<6.8> * wheelSpeed ) * turnClock)
			//left wheels
			spin flwheel around x-axis speed (<1.000000> * wheelSpeed ) * turnClock accelerate <5.000000> * currentSpeed;
			spin blwheel around x-axis speed (<1.000000> * wheelSpeed ) * turnClock accelerate <5.000000> * currentSpeed;
		
			//right wheels
			spin frwheel around x-axis speed (<1.000000> * wheelSpeed ) * turnCounter accelerate <5.000000> * currentSpeed;
			spin brwheel around x-axis speed (<1.000000> * wheelSpeed ) * turnCounter accelerate <5.000000> * currentSpeed;
		}
		if ( !get ACTIVATION )
		{
			spin flwheel around x-axis speed (<1.000000> * wheelSpeed ) * 2 accelerate <5.000000> * currentSpeed;
			spin blwheel around x-axis speed (<1.000000> * wheelSpeed ) * 2 accelerate <5.000000> * currentSpeed;
			spin frwheel around x-axis speed (<1.000000> * wheelSpeed ) * 2 accelerate <5.000000> * currentSpeed;
			spin brwheel around x-axis speed (<1.000000> * wheelSpeed ) * 2 accelerate <5.000000> * currentSpeed;
		}
		sleep 67;
	}
}



SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script WheelControl();
	start-script TurnControl();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{

	start-script SmokeUnit();
	Static_Var_1 = 0;
	moveSpeed = get MAX_SPEED;
	return (0);
}

Activate()
{
	if( Static_Var_1 )
	{
		set ACTIVATION to 0;
		return (0);
	}
	turn blleg to y-axis <0> speed <90>;
	turn blthigh to y-axis <0> speed <90>;
	turn flleg to y-axis <0> speed <90>;
	turn flthigh to y-axis <0> speed <90>;
	turn brleg to y-axis <0> speed <90>;
	turn brthigh to y-axis <0> speed <90>;
	turn frleg to y-axis <0> speed <90>;
	turn frthigh to y-axis <0> speed <90>;
	return (0);
}

Deactivate()
{
	turn base to z-axis <0> speed 400;
	wait-for-turn base around z-axis;
	turn blleg to y-axis <-55> speed <90>;
	turn blthigh to y-axis <55> speed <90>;
	turn flleg to y-axis <55> speed <90>;
	turn flthigh to y-axis <-55> speed <90>;
	turn brleg to y-axis <55> speed <90>;
	turn brthigh to y-axis <-55> speed <90>;
	turn frleg to y-axis <-55> speed <90>;
	turn frthigh to y-axis <55> speed <90>;
	return (0);
}


StartMoving()
{
	//spin flwheel around x-axis speed <50> accelerate <10>;
	//spin blwheel around x-axis speed <50> accelerate <10>;
	//spin frwheel around x-axis speed <50> accelerate <10>;
	//spin brwheel around x-axis speed <50> accelerate <10>;
}

StopMoving()
{
//	stop-spin flwheel around x-axis;
//	stop-spin blwheel around x-axis;
//	stop-spin frwheel around x-axis;
//	stop-spin brwheel around x-axis;
sleep 1; //need for some odd reason (does not open/close otherwise)
}


HitByWeapon(Func_Var_1, Func_Var_2)
{
	if( get ACTIVATION )
	{
		Static_Var_1 = 1;
	}
	if( Static_Var_1 )
	{
		signal 2;
		set-signal-mask 2;
		turn base to z-axis <0> speed 400;
		set ACTIVATION to 0;
		sleep 8000;
		Static_Var_1 = 0;
		set ACTIVATION to 100;
	}
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		explode eye type BITMAPONLY;
		explode blthigh type BITMAPONLY;
		explode blleg type BITMAPONLY;
		explode blwheel type FIRE | SMOKE | FALL;
		explode flthigh type BITMAPONLY;
		explode flleg type BITMAPONLY;
		explode flwheel type BITMAPONLY;
		explode brthigh type BITMAPONLY;
		explode brleg type BITMAPONLY;
		explode brwheel type BITMAPONLY;
		explode frthigh type BITMAPONLY;
		explode frleg type BITMAPONLY;
		explode frwheel type BITMAPONLY;
		return(0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY;
		explode eye type FIRE | SMOKE | FALL;
		explode blthigh type FALL;
		explode blleg type FIRE | SMOKE | FALL;
		explode blwheel type FIRE | SMOKE | FALL;
		explode flthigh type FALL;
		explode flleg type FIRE | SMOKE | FALL;
		explode flwheel type FIRE | SMOKE | FALL;
		explode brthigh type FIRE | SMOKE | FALL;
		explode brleg type FIRE | SMOKE | FALL;
		explode brwheel type FALL;
		explode frthigh type FIRE | SMOKE | FALL;
		explode frleg type FALL;
		explode frwheel type FIRE | SMOKE | FALL;
		return(0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL;
		explode eye type SMOKE | FALL;
		explode blthigh type SMOKE | FALL;
		explode blleg type FIRE | SMOKE | FALL;
		explode blwheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode flthigh type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode flleg type EXPLODE_ON_HIT | SMOKE | FALL;
		explode flwheel type SMOKE | FALL;
		explode brthigh type FIRE | SMOKE | FALL;
		explode brleg type SMOKE | FALL;
		explode brwheel type SMOKE | FALL;
		explode frthigh type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode frleg type FIRE | SMOKE | FALL;
		explode frwheel type FIRE | SMOKE | FALL;
		return(0);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode eye type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode blthigh type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode blleg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode blwheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode flthigh type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode flleg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode flwheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode brthigh type EXPLODE_ON_HIT | FIRE | FALL;
		explode brleg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode brwheel type EXPLODE_ON_HIT | FIRE | FALL;
		explode frthigh type EXPLODE_ON_HIT | FIRE | FALL;
		explode frleg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode frwheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
}
