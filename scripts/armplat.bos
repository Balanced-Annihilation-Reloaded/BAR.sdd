#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, plat1,plat2,tower,nc1,nc2,towercover,nano2,beam1,beam2,beam3,beam4,nano1,nano3,nano4,nc3,nc4,nanotower3,nanotower4,pad;
static-var  spray, unitviewer, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE			2


activatescr()
{
	move base to y-axis [37] speed [17.5];

	turn towercover to x-axis <-90> speed <90>;
	turn plat1 to x-axis <90> speed <45>;
	turn plat2 to x-axis <-90> speed <45>;
	
	
	move nanotower3 to y-axis [4.5] speed [4.5];
	move nanotower4 to y-axis [4.5] speed [4.5];
	sleep 1000;
	
	move tower to y-axis [26] speed [26];
	
	move nc1 to z-axis [-7.5] speed [7.5];
	move nc2 to z-axis [7.5] speed [7.5];
	
	turn nc3 to z-axis <-90> speed <90>;
	turn nc4 to z-axis <-90> speed <90>;
	sleep 1000;
	set ARMORED to 0;	
}

deactivatescr()
{
	move base to y-axis [0] speed [17.5];

	move tower to y-axis [0] speed [26];
	turn plat1 to x-axis <0> speed <45>;
	turn plat2 to x-axis <0> speed <45>;
	
	
	turn nc3 to z-axis <0> speed <90>;
	turn nc4 to z-axis <0> speed <90>;
	sleep 1000;
	
	turn towercover to x-axis <0> speed <90>;
	
	move nc1 to z-axis [0] speed [7.5];
	move nc2 to z-axis [0] speed [7.5];
	
	move nanotower3 to y-axis [0] speed [4.5];
	move nanotower4 to y-axis [0] speed [4.5];
	sleep 1000;
	set ARMORED to 1;
}

HitByWeapon(anglex, anglez)
{
	turn base to z-axis <0> - anglez speed <65.000000>;
	turn base to x-axis <0> - anglex speed <65.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{

	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();

}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script Stop();
			currentstate = 1;
		}
		else
		{
			call-script Go();
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{

	set ARMORED to 1;
	unitviewer = FALSE;
	spray = 0;
	move base to y-axis [2.500000] now;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	move base to y-axis [0.000000] speed [5.000000];
	start-script SmokeUnit();
}

QueryNanoPiece(piecenum)
{
	piecenum=beam1+spray;
	spray=spray+1;
	if (spray>3) spray=0;
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;

	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	spin pad around y-axis speed <30.005495>;
}

StopBuilding()
{
	stop-spin pad around y-axis;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		explode plat1 type BITMAPONLY;
		explode plat2 type BITMAPONLY;
		explode tower type BITMAPONLY;
		explode nc1 type BITMAPONLY;
		explode nc2 type BITMAPONLY;
		explode towercover type BITMAPONLY;
		explode nano2 type BITMAPONLY;
		explode beam2 type BITMAPONLY;
		explode nano1 type BITMAPONLY;
		explode beam1 type BITMAPONLY;
		explode nanotower3 type BITMAPONLY;
		explode nc3 type FIRE | SMOKE | FALL;
		explode nano3 type BITMAPONLY;
		explode beam3 type BITMAPONLY;
		explode nanotower4 type BITMAPONLY;
		explode nano4 type BITMAPONLY;
		explode beam4 type BITMAPONLY;
		explode nc4 type BITMAPONLY;
		explode pad type BITMAPONLY;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY;
		explode plat1 type FIRE | SMOKE | FALL;
		explode plat2 type FIRE | SMOKE | FALL;
		explode tower type FIRE | SMOKE | FALL;
		explode nc1 type FALL;
		explode nc2 type FALL;
		explode towercover type FIRE | SMOKE | FALL;
		explode nano2 type FIRE | SMOKE | FALL;
		explode beam2 type FALL;
		explode nano1 type FIRE | SMOKE | FALL;
		explode beam1 type FIRE | SMOKE | FALL;
		explode nanotower3 type FIRE | SMOKE | FALL;
		explode nc3 type FIRE | SMOKE | FALL;
		explode nano3 type FALL;
		explode beam3 type FALL;
		explode nanotower4 type FIRE | SMOKE | FALL;
		explode nano4 type FIRE | SMOKE | FALL;
		explode beam4 type FALL;
		explode nc4 type FIRE | SMOKE | FALL;
		explode pad type FIRE | SMOKE | FALL;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode plat1 type SMOKE | FALL;
		explode plat2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode tower type FIRE | SMOKE | FALL;
		explode nc1 type FIRE | SMOKE | FALL;
		explode nc2 type FIRE | SMOKE | FALL;
		explode towercover type FIRE | SMOKE | FALL;
		explode nano2 type EXPLODE_ON_HIT | SMOKE | FALL;
		explode beam2 type SMOKE | FALL;
		explode nano1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode beam1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode nanotower3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode nc3 type EXPLODE_ON_HIT | SMOKE | FALL;
		explode nano3 type SMOKE | FALL;
		explode beam3 type FIRE | SMOKE | FALL;
		explode nanotower4 type EXPLODE_ON_HIT | SMOKE | FALL;
		explode nano4 type SMOKE | FALL;
		explode beam4 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode nc4 type SMOKE | FALL;
		explode pad type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode plat1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode plat2 type EXPLODE_ON_HIT | FIRE | FALL;
		explode tower type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode nc1 type EXPLODE_ON_HIT | FIRE | FALL;
		explode nc2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode towercover type EXPLODE_ON_HIT | FIRE | FALL;
		explode nano2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode beam2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode nano1 type EXPLODE_ON_HIT | FIRE | FALL;
		explode beam1 type EXPLODE_ON_HIT | FIRE | FALL;
		explode nanotower3 type EXPLODE_ON_HIT | FIRE | FALL;
		explode nc3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode nano3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode beam3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode nanotower4 type EXPLODE_ON_HIT | FIRE | FALL;
		explode nano4 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode beam4 type EXPLODE_ON_HIT | FIRE | FALL;
		explode nc4 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode pad type EXPLODE_ON_HIT | FIRE | FALL;
	return corpsetype;
}
