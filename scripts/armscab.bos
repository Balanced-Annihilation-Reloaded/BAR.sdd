#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  body, rthigh, lthigh, rbleg, lbleg, rbfoot, lbfoot, rmfoot, lmfoot, rfleg, lfleg, rffoot, lffoot, turret, ldoor, rdoor, flare;

static-var  Static_Var_1, Static_Var_2, bMoving, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2


walk()
{
	while( TRUE) {
		if ( bMoving) {
			//Step 1
			//Front fw
			turn rfleg to x-axis <32> speed <137.142857>;
			turn rffoot to x-axis <-78> speed <334.285714>;
			//Back back
			turn rthigh to x-axis <4> speed <17.142857>;
			turn rbleg to x-axis <-13> speed <55.714286>;
		
			turn rbfoot to x-axis <27> speed <115.714286>;
			turn rmfoot to x-axis <63> speed <270.000000>;
			//body down
			turn body to x-axis <-3> speed <12.857143>;
			move body to y-axis [-1] speed [4.285714]; 
		
			turn lfleg to x-axis <6> speed <25.714286>;
			turn lffoot to x-axis <37> speed <158.571429>;
			turn lthigh to x-axis <-17> speed <72.857143>;
			turn lbleg to x-axis <-11> speed <47.142857>;
			turn lbfoot to x-axis <-48> speed <205.714286>;
			turn lmfoot to x-axis <24> speed <102.857143>;
		
			sleep 200;
		}
		
		
		if ( bMoving) {
			//Step 2
			//front center
			turn rfleg to x-axis <0> speed <137.142857>;
			turn rffoot to x-axis <0> speed <334.285714>;
			//back up
			turn rthigh to x-axis <-9> speed <55.714286>;
			turn rbleg to x-axis <60> speed <312.857143>;
			turn rbfoot to x-axis <-85> speed <480.000000>;
			turn rmfoot to x-axis <-14> speed <330.000000>;
			//body up
			turn body to x-axis <0> speed <12.857143>;
			move body to y-axis [0] speed [4.285714];  
		
			turn lfleg to x-axis <-26> speed <137.142857>;
			turn lffoot to x-axis <17> speed <85.714286>;
			turn lthigh to x-axis <0> speed <72.857143>;
			turn lbleg to x-axis <0> speed <47.142857>;
			turn lbfoot to x-axis <0> speed <205.714286>;
			turn lmfoot to x-axis <0> speed <102.857143>;
		
			sleep 200;
		}
		
		if ( bMoving) {
			//Step 3
			//front back
			turn rfleg to x-axis <6> speed <25.714286>;
			turn rffoot to x-axis <37> speed <158.571429>;
			//back downforward
			turn rthigh to x-axis <-17> speed <34.285714>;
			turn rbleg to x-axis <-11> speed <304.285714>;
			turn rbfoot to x-axis <-48> speed <158.571429>;
			turn rmfoot to x-axis <24> speed <162.857143>;
			//body down
			turn body to x-axis <-3> speed <12.857143>;
			move body to y-axis [-1] speed [4.285714]; 
		
			turn lfleg to x-axis <32> speed <248.571429>;
			turn lffoot to x-axis <-78> speed <407.142857>;
			turn lthigh to x-axis <4> speed <17.142857>;
			turn lbleg to x-axis <-13> speed <55.714286>;
		
			turn lbfoot to x-axis <27> speed <115.714286>;
			turn lmfoot to x-axis <63> speed <270.000000>;
		
			sleep 200;
		}
		
		if ( bMoving) {
			//Step 4
			//front upcenter
			turn rfleg to x-axis <-26> speed <137.142857>;
			turn rffoot to x-axis <17> speed <85.714286>;
			//back center
			turn rthigh to x-axis <0> speed <72.857143>;
			turn rbleg to x-axis <0> speed <47.142857>;
			turn rbfoot to x-axis <0> speed <205.714286>;
			turn rmfoot to x-axis <0> speed <102.857143>;
			//body up
			turn body to x-axis <0> speed <12.857143>;
			move body to y-axis [0] speed [4.285714]; 
		
		
			turn lfleg to x-axis <0> speed <137.142857>;
			turn lffoot to x-axis <0> speed <334.285714>;
			turn lthigh to x-axis <-9> speed <55.714286>;
			turn lbleg to x-axis <60> speed <312.857143>;
			turn lbfoot to x-axis <-85> speed <480.000000>;
			turn lmfoot to x-axis <-14> speed <330.000000>;
		
			sleep 200;
		}
		else //so that when bMoving=false we dont get a non-sleeping thread infinite loop
		{ 
			sleep 200;
		}
		
		
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}
HitByWeapon(anglex, anglez)
{
	turn body to z-axis <0> - anglez speed <105.000000>;
	turn body to x-axis <0> - anglex speed <105.000000>;
	wait-for-turn body around z-axis;
	wait-for-turn body around x-axis;
	turn body to z-axis <0.000000> speed <30.000000>;
	turn body to x-axis <0.000000> speed <30.000000>;
}

activatescr()
{

	if( TRUE )
	{
		turn turret to x-axis <90> speed <180>;
		sleep 250;
	}
	if( TRUE )
	{
		turn ldoor to y-axis <-20> speed <40>;
		turn rdoor to y-axis <20> speed <40>;
		sleep 250;
	}
	return (0);
	
	}


deactivatescr()
{

	if( TRUE )
	{
		turn ldoor to y-axis <0> speed <40>;
		turn rdoor to y-axis <0> speed <40>;
		sleep 250;
	}
	if( TRUE )
	{
		turn turret to x-axis <0> speed <180>;
		sleep 250;
	}
	sleep 200;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}


Go()
{
	call-script activatescr();
	Static_Var_1 = 1;
	return (0);
}

Stop()
{
	Static_Var_1 = 0;
	call-script deactivatescr();
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

MotionControl(Func_Var_1)
{
	while( TRUE )
	{
		Func_Var_1 = bMoving;
		if( Func_Var_1 )
		{
			call-script walk();
		}
		if( !Func_Var_1 )
		{
			sleep 100;
		}
	}
	return (0);
}

Create()
{
	bMoving = FALSE;
	Static_Var_1 = 0;
	Static_Var_2 = 3000;
	start-script SmokeUnit();
	call-script InitState();
	start-script MotionControl();
	return (0);
}

StartMoving()
{
	bMoving = TRUE;
	return (0);
}

StopMoving()
{
	bMoving = FALSE;
	return (0);
}

RestoreAfterDelay()
{
	sleep Static_Var_2;
	set-signal-mask 0;
	start-script RequestState(1);
	return (0);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !Static_Var_1 )
	{
		sleep 100;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	show flare;
	sleep 30;
	hide flare;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = body;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode body type BITMAPONLY;
		explode rthigh type BITMAPONLY;
		explode rbleg type BITMAPONLY;
		explode rbfoot type FIRE | SMOKE | FALL;
		explode rmfoot type BITMAPONLY;
		explode lthigh type BITMAPONLY;
		explode lbleg type BITMAPONLY;
		explode lbfoot type BITMAPONLY;
		explode lmfoot type BITMAPONLY;
		explode rfleg type BITMAPONLY;
		explode rffoot type BITMAPONLY;
		explode turret type BITMAPONLY;
		explode rdoor type BITMAPONLY;
		explode ldoor type FIRE | SMOKE | FALL;
		explode flare type BITMAPONLY;
		explode lfleg type BITMAPONLY;
		explode lffoot type BITMAPONLY;
		return(0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode body type BITMAPONLY;
		explode rthigh type FIRE | SMOKE | FALL;
		explode rbleg type FALL;
		explode rbfoot type FIRE | SMOKE | FALL;
		explode rmfoot type FIRE | SMOKE | FALL;
		explode lthigh type FALL;
		explode lbleg type FIRE | SMOKE | FALL;
		explode lbfoot type FALL;
		explode lmfoot type FIRE | SMOKE | FALL;
		explode rfleg type FIRE | SMOKE | FALL;
		explode rffoot type FALL;
		explode turret type FALL;
		explode rdoor type FALL;
		explode ldoor type FALL;
		explode flare type FALL;
		explode lfleg type FALL;
		explode lffoot type FIRE | SMOKE | FALL;
		return(0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode body type FIRE | SMOKE | FALL;
		explode rthigh type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode rbleg type FIRE | SMOKE | FALL;
		explode rbfoot type EXPLODE_ON_HIT | SMOKE | FALL;
		explode rmfoot type SMOKE | FALL;
		explode lthigh type SMOKE | FALL;
		explode lbleg type FIRE | SMOKE | FALL;
		explode lbfoot type FIRE | SMOKE | FALL;
		explode lmfoot type FIRE | SMOKE | FALL;
		explode rfleg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode rffoot type EXPLODE_ON_HIT | SMOKE | FALL;
		explode turret type FIRE | SMOKE | FALL;
		explode rdoor type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode ldoor type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode flare type EXPLODE_ON_HIT | SMOKE | FALL;
		explode lfleg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode lffoot type EXPLODE_ON_HIT | SMOKE | FALL;
		return(0);
	}
	corpsetype = 3 ;
		explode body type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode rthigh type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode rbleg type EXPLODE_ON_HIT | FIRE | FALL;
		explode rbfoot type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode rmfoot type EXPLODE_ON_HIT | FIRE | FALL;
		explode lthigh type EXPLODE_ON_HIT | FIRE | FALL;
		explode lbleg type EXPLODE_ON_HIT | FIRE | FALL;
		explode lbfoot type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode lmfoot type EXPLODE_ON_HIT | FIRE | FALL;
		explode rfleg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode rffoot type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode rdoor type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode ldoor type EXPLODE_ON_HIT | FIRE | FALL;
		explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode lfleg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode lffoot type EXPLODE_ON_HIT | FIRE | FALL;
}
