#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"


// One sixth of the full cycle duration, in millisecond
// The larger this value the slower the walk animation
//#define WALK_PERIOD 100


piece	flare,base,turret, barrel, leg1a,leg1b,leg2a,leg2b,leg3a,leg3b,leg4a,leg4b,leg5a,leg5b,leg6a,leg6b;

static-var fire_count,firing,open,maxreloadtime,moving,restore_delay,moveSpeed, currentSpeed,WALK_PERIOD;

#define SIG_AIM 2
#define SIG_FIRE1 4
#define SIG_MOVE 8
#define SMOKEPIECE1 body

//LEG X Y Z is:
//x: 1=right 2=left
//y: 1=front, 2=middle, 3=back
//z: 1 is A and B, 2 is C
//THUS:111=6 121=5 131=4 211=1 221=2 231=3
#define FRONT_RIGHT_UP\
	turn leg6a to y-axis <70> speed <12.5> *1000/(WALK_PERIOD);\
	turn leg6a to z-axis <20> speed <20> *1000/(WALK_PERIOD);

#define FRONT_RIGHT_DOWN\
	turn leg6a to z-axis <-30> speed <50> *1000/(WALK_PERIOD);\
	turn leg6b to z-axis <55> speed <55> *1000/(WALK_PERIOD);

#define FRONT_RIGHT_BACK\
	turn leg6a to y-axis <45> speed <6.25> *1000/(WALK_PERIOD);\
	turn leg6a to z-axis <0> speed <7.5> *1000/(WALK_PERIOD);\
	turn leg6b to z-axis <0> speed <13.75> *1000/(WALK_PERIOD);


#define FRONT_LEFT_UP\
	turn leg1a to y-axis <-70> speed <12.5> *1000/(WALK_PERIOD);\
	turn leg1a to z-axis <-20> speed <20> *1000/(WALK_PERIOD);

#define FRONT_LEFT_DOWN\
	turn leg1a to z-axis <30> speed <50> *1000/(WALK_PERIOD);\
	turn leg1b to z-axis <-55> speed <55> *1000/(WALK_PERIOD);

#define FRONT_LEFT_BACK\
	turn leg1a to y-axis <-45> speed <6.25> *1000/(WALK_PERIOD);\
	turn leg1a to z-axis <0> speed <7.5> *1000/(WALK_PERIOD);\
	turn leg1b to z-axis <0> speed <13.75> *1000/(WALK_PERIOD);


#define MIDDLE_RIGHT_UP\
	turn leg5a to y-axis <12.5> speed <12.5> *1000/(WALK_PERIOD);\
	turn leg5a to z-axis <20> speed <20> *1000/(WALK_PERIOD);

#define MIDDLE_RIGHT_DOWN\
	turn leg5a to z-axis <0> speed <20> *1000/(WALK_PERIOD);

#define MIDDLE_RIGHT_BACK\
	turn leg5a to y-axis <-12.5> speed <6.25> *1000/(WALK_PERIOD);


#define MIDDLE_LEFT_UP\
	turn leg2a to y-axis <-12.5> speed <12.5> *1000/(WALK_PERIOD);\
	turn leg2a to z-axis <-20> speed <20> *1000/(WALK_PERIOD);

#define MIDDLE_LEFT_DOWN\
	turn leg2a to z-axis <0> speed <20> *1000/(WALK_PERIOD);

#define MIDDLE_LEFT_BACK\
	turn leg2a to y-axis <12.5> speed <6.25> *1000/(WALK_PERIOD);\


#define REAR_RIGHT_UP\
	turn leg4a to y-axis <-45> speed <12.5> *1000/(WALK_PERIOD);\
	turn leg4a to z-axis <20> speed <50> *1000/(WALK_PERIOD);\
	turn leg4b to z-axis <0> speed <55> *1000/(WALK_PERIOD);

#define REAR_RIGHT_DOWN\
	turn leg4a to z-axis <0> speed <20> *1000/(WALK_PERIOD);

#define REAR_RIGHT_BACK\
	turn leg4a to y-axis <-70> speed <6.25> *1000/(WALK_PERIOD);\
	turn leg4a to z-axis <-30> speed <7.5> *1000/(WALK_PERIOD);\
	turn leg4b to z-axis <55> speed <13.75> *1000/(WALK_PERIOD);


#define REAR_LEFT_UP\
	turn leg3a to y-axis <45> speed <12.5> *1000/(WALK_PERIOD);\
	turn leg3a to z-axis <-20> speed <50> *1000/(WALK_PERIOD);\
	turn leg3b to z-axis <0> speed <55> *1000/(WALK_PERIOD);

#define REAR_LEFT_DOWN\
	turn leg3a to z-axis <0> speed <20> *1000/(WALK_PERIOD);

#define REAR_LEFT_BACK\
	turn leg3a to y-axis <70> speed <6.25> *1000/(WALK_PERIOD);\
	turn leg3a to z-axis <30> speed <7.5> *1000/(WALK_PERIOD);\
	turn leg3b to z-axis <-55> speed <13.75> *1000/(WALK_PERIOD);


#define WAIT_WALK\
	sleep WALK_PERIOD;\
	while(!moving)\
	{\
		sleep 111;\
	}

DoTheWalking()
{
	while(TRUE)
	{
		WAIT_WALK
		FRONT_RIGHT_UP
		MIDDLE_RIGHT_BACK
		REAR_LEFT_DOWN
		WAIT_WALK
		FRONT_RIGHT_DOWN
		MIDDLE_LEFT_UP
		REAR_LEFT_BACK
		WAIT_WALK
		FRONT_RIGHT_BACK
		MIDDLE_LEFT_DOWN
		REAR_RIGHT_UP
		WAIT_WALK
		MIDDLE_LEFT_BACK
		REAR_RIGHT_DOWN
		FRONT_LEFT_UP
		WAIT_WALK
		REAR_RIGHT_BACK
		FRONT_LEFT_DOWN
		MIDDLE_RIGHT_UP
		WAIT_WALK
		FRONT_LEFT_BACK
		MIDDLE_RIGHT_DOWN
		REAR_LEFT_UP
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	moving=TRUE;
}

//LEG X Y Z is:
//x: 1=right 2=left
//y: 1=front, 2=middle, 3=back
//z: 1 is A and B, 2 is C
//THUS:111=6 121=5 131=4 211=1 221=2 231=3
StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	moving=FALSE;
	sleep 60*(WALK_PERIOD);
	
	turn leg6a to z-axis <20> speed <50> *1000/(WALK_PERIOD);
	turn leg6b to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg6a to y-axis <55> speed <25> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg6a to z-axis <-10> speed <30> *1000/(WALK_PERIOD);
	turn leg6b to z-axis <20> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);

	turn leg2a to z-axis <-20> speed <50> *1000/(WALK_PERIOD);
	turn leg2b to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg2a to y-axis <0> speed <25> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg2a to z-axis <-10> speed <10> *1000/(WALK_PERIOD);
	turn leg2b to z-axis <20> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	
	turn leg4a to z-axis <20> speed <50> *1000/(WALK_PERIOD);
	turn leg4b to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg4a to y-axis <-45> speed <25> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg4a to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	
	turn leg1a to z-axis <-20> speed <50> *1000/(WALK_PERIOD);
	turn leg1b to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg1a to y-axis <-55> speed <25> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg1a to z-axis <10> speed <30> *1000/(WALK_PERIOD);
	turn leg1b to z-axis <-20> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);

	turn leg5a to z-axis <20> speed <50> *1000/(WALK_PERIOD);
	turn leg5b to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg5a to y-axis <0> speed <25> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg5a to z-axis <10> speed <10> *1000/(WALK_PERIOD);
	turn leg5b to z-axis <-20> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);

	turn leg3a to z-axis <-20> speed <50> *1000/(WALK_PERIOD);
	turn leg3b to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg3a to y-axis <45> speed <25> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg3b to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	
}

HitByWeapon(anglex, anglez)
{
	turn base to z-axis <0> - anglez speed <105.000000>;
	turn base to x-axis <0> - anglex speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

UnitSpeed()
{
	while(TRUE)
	{
		if (moving)
		{
			currentSpeed = (moveSpeed * 80)/(get CURRENT_SPEED);
			//if (currentSpeed>300) currentSpeed=300;
			WALK_PERIOD=currentSpeed;
			//get PRINT(1,WALK_PERIOD,moveSpeed);
			WALK_PERIOD=60;
		}
		sleep 142;
	}
}
//LEG X Y Z is:
//x: 1=right 2=left
//y: 1=front, 2=middle, 3=back
//z: 1 is A and B, 2 is C
//THUS:111=6 121=5 131=4 211=1 221=2 231=3
Create()
{
	hide flare;
	turn leg6a to y-axis <55> now;
	turn leg4a to y-axis <-45> now;
	turn leg1a to y-axis <-55> now;//2
	turn leg3a to y-axis <45> now;//5
	turn leg6a to z-axis <-10> now;
	turn leg6b to z-axis <20> now;
	turn leg1a to z-axis <10> now;
	turn leg1b to z-axis <-20> now;
	turn leg3a to z-axis <10> now;
	turn leg3b to z-axis <-20> now;
	turn leg1a to z-axis <-10> now;
	turn leg1b to z-axis <20> now;
	fire_count=4;
	maxreloadtime=0;
	open=FALSE;
	firing=FALSE;
	while(get BUILD_PERCENT_LEFT)
	{
		sleep 250;
	}
	start-script SmokeUnit();
	start-script DoTheWalking();
	
	moveSpeed = (get MAX_SPEED);
	WALK_PERIOD=100;
	start-script UnitSpeed();
	restore_delay=2000;
}

SetMaxReloadTime(t)
{
	restore_delay=5000;
}



QueryPrimary(piecenum)
{
	piecenum=flare;
}

FirePrimary()
{
	show flare;
	sleep 60;
	hide flare;
	return(1);
	
}





	//maxvelocity	1.7200000286102, thus elmos per frame = 52 elmost per second
	//http://www.google.hu/imgres?imgurl=http%3A%2F%2Fwww.mindcreators.com%2FImages%2FLM_InsectGaits.gif&imgrefurl=http%3A%2F%2Fwww.blendpolis.de%2Fviewtopic.php%3Ff%3D14%26t%3D20955&h=269&w=564&tbnid=eM6Ce18iiKEsNM%3A&zoom=1&docid=9I0ZGCOGTgSBFM&ei=bGpFU_T9G8f8ygOqs4DoCg&tbm=isch&client=firefox-a&ved=0CKcBEIQcMBg&iact=rc&dur=400&page=1&start=0&ndsp=59
	//4 states of legs:
		//go to forward
		//pick up and center
		//put down and go back
		//go to center
		
	//2 groups of legs, even and odd
	
	//frames:
	
	//	leg1	leg2	leg3	leg4	leg5	leg6
	//1:up		back	up		back	up		back
	//2:down	up		down	up		down	up
	//3:back	
	
	//	leg1	leg2	leg3	leg4	leg5	leg6
	//1:up		back	up		back	up		back
	
	

SweetSpot(piecenum)
{
	piecenum = turret;
}


RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	turn turret to y-axis <0.000000> speed <150.000000>;
	//turn turret to x-axis <0.000000> speed <150.000000>;
	wait-for-turn turret around y-axis;
	//wait-for-turn turret around x-axis;
	open=FALSE;
	firing=FALSE;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <150.000000>;
	//turn turret to x-axis 0 - pitch speed <150.000000>;
	wait-for-turn turret around y-axis;
	//wait-for-turn turret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}


AimFromPrimary(piecenum)
{
	piecenum = turret;
}


Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		explode turret type BITMAPONLY;
		explode barrel type FIRE | SMOKE | FALL;
		explode flare type BITMAPONLY;
		explode leg6a type BITMAPONLY;
		explode leg6b type BITMAPONLY;
		explode leg4a type BITMAPONLY;
		explode leg4b type BITMAPONLY;
		explode leg2a type BITMAPONLY;
		explode leg2b type BITMAPONLY;
		explode leg1a type FIRE | SMOKE | FALL;
		explode leg1b type FIRE | SMOKE | FALL;
		explode leg3a type BITMAPONLY;
		explode leg3b type BITMAPONLY;
		explode leg5a type BITMAPONLY;
		explode leg5b type BITMAPONLY;
		return(0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY;
		explode turret type FALL;
		explode barrel type FALL;
		explode flare type FIRE | SMOKE | FALL;
		explode leg6a type FIRE | SMOKE | FALL;
		explode leg6b type FIRE | SMOKE | FALL;
		explode leg4a type FIRE | SMOKE | FALL;
		explode leg4b type FIRE | SMOKE | FALL;
		explode leg2a type FIRE | SMOKE | FALL;
		explode leg2b type FIRE | SMOKE | FALL;
		explode leg1a type FALL;
		explode leg1b type FIRE | SMOKE | FALL;
		explode leg3a type FIRE | SMOKE | FALL;
		explode leg3b type FIRE | SMOKE | FALL;
		explode leg5a type FIRE | SMOKE | FALL;
		explode leg5b type FALL;
		return(0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL;
		explode turret type EXPLODE_ON_HIT | SMOKE | FALL;
		explode barrel type SMOKE | FALL;
		explode flare type EXPLODE_ON_HIT | SMOKE | FALL;
		explode leg6a type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode leg6b type EXPLODE_ON_HIT | SMOKE | FALL;
		explode leg4a type SMOKE | FALL;
		explode leg4b type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode leg2a type SMOKE | FALL;
		explode leg2b type FIRE | SMOKE | FALL;
		explode leg1a type FIRE | SMOKE | FALL;
		explode leg1b type FIRE | SMOKE | FALL;
		explode leg3a type FIRE | SMOKE | FALL;
		explode leg3b type SMOKE | FALL;
		explode leg5a type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode leg5b type EXPLODE_ON_HIT | SMOKE | FALL;
		return(0);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode leg6a type EXPLODE_ON_HIT | FIRE | FALL;
		explode leg6b type EXPLODE_ON_HIT | FIRE | FALL;
		explode leg4a type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode leg4b type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode leg2a type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode leg2b type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode leg1a type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode leg1b type EXPLODE_ON_HIT | FIRE | FALL;
		explode leg3a type EXPLODE_ON_HIT | FIRE | FALL;
		explode leg3b type EXPLODE_ON_HIT | FIRE | FALL;
		explode leg5a type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode leg5b type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
}
