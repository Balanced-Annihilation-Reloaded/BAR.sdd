
#include "sfxtype.h"
#include "exptype.h"

piece  base, blleg, bltrack, frleg, frtrack, flleg, fltrack, brleg, brtrack, rdoor, ldoor, turret, sleeve, barrel, flare;

static-var  Static_Var_1, bMoving, Static_Var_3, Static_Var_4, restore_delay,
            statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				4



OpenGun()
{
	turn frleg   to x-axis <90>  speed <90>;
	turn frtrack to x-axis <-90> speed <90>;
	turn flleg   to x-axis <90>  speed <90>;
	turn fltrack to x-axis <-90> speed <90>;
	turn brleg   to x-axis <-90>  speed <90>;
	turn brtrack to x-axis <90> speed <90>;
	turn blleg   to x-axis <-90>  speed <90>;
	turn bltrack to x-axis <90> speed <90>;
	move barrel to z-axis [1.6] speed [1.6];
	
	turn rdoor to z-axis <-90> speed <180>;
	turn ldoor to z-axis <90> speed <180>;
	move base to y-axis [1.8] speed [3.6];
	sleep 500;
	turn rdoor to z-axis <-180> speed <180>;
	turn ldoor to z-axis <180> speed <180>;
	move base to y-axis [3] speed [2];
	
	
	
	sleep 500;
}

FoldGun()
{

	move barrel to z-axis [0] speed [1.6];
	turn turret to y-axis <0> speed <360>;
	turn sleeve to x-axis <0> speed <360>;
//	wait-for-turn turret around y-axis;
	
	turn frleg   to x-axis <0>  speed <90>;
	turn frtrack to x-axis <0> speed <90>;
	turn flleg   to x-axis <0>  speed <90>;
	turn fltrack to x-axis <0> speed <90>;
	turn brleg   to x-axis <0>  speed <90>;
	turn brtrack to x-axis <0> speed <90>;
	turn blleg   to x-axis <0>  speed <90>;
	turn bltrack to x-axis <0> speed <90>;
	
	
	turn rdoor to z-axis <-90> speed <180>;
	turn ldoor to z-axis <90> speed <180>;
	move base to y-axis [1.8] speed [2.8];
	sleep 500;
	turn rdoor to z-axis <0> speed <180>;
	turn ldoor to z-axis <0> speed <180>;
	move base to y-axis [0] speed [3.6];
	
	sleep 500;
}

Go()
{
	Static_Var_3 = 1;
	if( !Static_Var_1 )
	{
		while( !Static_Var_4 )
		{
			sleep 150;
		}
		call-script OpenGun();
		Static_Var_1 = 1;
	}
}

Stop()
{
	if( Static_Var_1 )
	{
		Static_Var_1 = 0;
		call-script FoldGun();
	}
	Static_Var_3 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		sleep 100;
		if( statechg_DesiredState )
		{
			call-script Stop();
			currentstate = 1;
		}
		else
		{
			call-script Go();
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = Static_Var_3;
		if( moving )
		{
			sleep 100;
			if( aiming )
			{
				Static_Var_4 = 1;
			}
			else
			{
				Static_Var_4 = 0;
			}
			justmoved = TRUE;
		}
		else
		{
			Static_Var_4 = 1;
			if( justmoved )
			{

				justmoved = FALSE;
			}
			sleep 300;
		}
	}
}


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script MotionControl();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	bMoving = FALSE;
	Static_Var_3 = 0;
	Static_Var_4 = 1;
	Static_Var_1 = 0;
	restore_delay = 2000;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = 6000;
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	turn turret to y-axis <0.000000> speed <360.000000>;
	turn sleeve to x-axis <0.000000> speed <360.000000>;
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !Static_Var_1 )
	{
		sleep 200;
	}
	turn turret to y-axis heading speed <360.000000>;
	turn sleeve to x-axis <0> - pitch speed <3600.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{	
	show flare;
	move barrel to z-axis [0.4] now;
	move barrel to z-axis [1.6] speed [3.6];
	sleep 150;
	hide flare;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	return (0);

}
