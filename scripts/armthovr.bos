#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret1, wake, weight, turret2, doorr, doorl, boom2, boom3,
       boom1, boom4, link, boom5, boom6, boom7, boom8, boom9;

static-var  Static_Var_1, TurretToUnitDistance, TurretToUnitAngleY, TurretToUnitAngleX, bInDistance;

// Signal definitions
#define SIG_MOVE			2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = 4;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	start-script SmokeUnit();
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_1 == 2 OR Static_Var_1 == 1 )
		{
			emit-sfx 5 from wake;
			emit-sfx 3 from wake;
		}
		sleep 300;
	}
}

StopMoving()
{
	sleep 150;
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

StartDoorOpen()
{
	signal 4;
	set-signal-mask 4;
	turn doorr to z-axis <-90.000000> speed <100.000000>;
	turn doorl to z-axis <90.000000> speed <100.000000>;
	wait-for-turn doorr around z-axis;
	wait-for-turn doorl around z-axis;

	sleep 5000;

	turn doorr to z-axis <0.000000> speed <100.000000>;
	turn doorl to z-axis <0.000000> speed <100.000000>;
	wait-for-turn doorr around z-axis;
	wait-for-turn doorr around z-axis;

}

BoomCalc(posxz, posy)
{
	var Func_Var_3, Func_Var_4, Func_Var_5;
	Func_Var_3 = get PIECE_XZ(turret1) - posxz;
	Func_Var_4 = posy - get PIECE_Y(turret1) + [5.000000];
	Func_Var_5 = get XZ_HYPOT(Func_Var_3);
	TurretToUnitDistance = get HYPOT(Func_Var_5,Func_Var_4) - [15.000000];
	TurretToUnitAngleY = get XZ_ATAN(Func_Var_3);
	TurretToUnitAngleX = get ATAN(Func_Var_4,Func_Var_5);
	bInDistance = TurretToUnitDistance < [220.000000]; //MAX distance at which a unit is picked up/put down
//	get PRINT(1,bInDistance,TurretToUnitDistance/65000);
//	get PRINT(1,TurretToUnitAngleX/182, TurretToUnitAngleY/182);
}

BoomExtend()
{
	start-script StartDoorOpen();
	turn turret1 to y-axis TurretToUnitAngleY speed <200.000000>;
	wait-for-turn turret1 around y-axis;
	turn turret2 to x-axis <0.000000> - TurretToUnitAngleX speed <280.000000>;
	turn weight to x-axis TurretToUnitAngleX speed <280.000000>;
	wait-for-turn turret2 around x-axis;	
	move boom2 to z-axis TurretToUnitDistance / 8 speed [60.000000];
	move boom3 to z-axis TurretToUnitDistance / 8 speed [60.000000];
	move boom4 to z-axis TurretToUnitDistance / 8 speed [60.000000];
	move boom5 to z-axis TurretToUnitDistance / 8 speed [60.000000];
	move boom6 to z-axis TurretToUnitDistance / 8 speed [60.000000];
	move boom7 to z-axis TurretToUnitDistance / 8 speed [60.000000];
	move boom8 to z-axis TurretToUnitDistance / 8 speed [60.000000];
	move boom9 to z-axis TurretToUnitDistance / 8 speed [60.000000];

	wait-for-move boom2 along z-axis;
	wait-for-move boom3 along z-axis;
	wait-for-move boom4 along z-axis;
	wait-for-move boom5 along z-axis;
	wait-for-move boom6 along z-axis;
	wait-for-move boom7 along z-axis;
	wait-for-move boom8 along z-axis;
	wait-for-move boom9 along z-axis;
}

BoomReset()
{
	turn turret2 to x-axis <0.000000> speed <60.000000>;
	
	turn weight to x-axis <0.000000> speed <60.000000>;

	wait-for-turn turret2 around x-axis;
	turn turret1 to y-axis <0.000000> speed <200.000000>;
	move boom2 to z-axis [0.000000] speed [50.000000];
	move boom3 to z-axis [0.000000] speed [50.000000];
	move boom4 to z-axis [0.000000] speed [50.000000];
	move boom5 to z-axis [0.000000] speed [50.000000];
	move boom6 to z-axis [0.000000] speed [50.000000];
	move boom7 to z-axis [0.000000] speed [50.000000];
	move boom8 to z-axis [0.000000] speed [50.000000];
	move boom9 to z-axis [0.000000] speed [50.000000];
	wait-for-turn turret1 around y-axis;
	wait-for-move boom2 along z-axis;
	wait-for-move boom3 along z-axis;
	wait-for-move boom4 along z-axis;
	wait-for-move boom5 along z-axis;
	wait-for-move boom6 along z-axis;
	wait-for-move boom7 along z-axis;
	wait-for-move boom8 along z-axis;
	wait-for-move boom9 along z-axis;
}

BoomToPad()
{
	start-script StartDoorOpen();
	turn turret2 to x-axis <0.000000> speed <60.000000>;
	
	turn weight to x-axis <0.000000> speed <60.000000>;

	wait-for-turn boom1 around x-axis;
	turn turret1 to y-axis <0.000000> speed <200.000000>;
	move boom2 to z-axis [0.000000] speed [60.000000];
	move boom3 to z-axis [0.000000] speed [60.000000];
	move boom4 to z-axis [0.000000] speed [60.000000];
	move boom5 to z-axis [0.000000] speed [60.000000];
	move boom6 to z-axis [0.000000] speed [60.000000];
	move boom7 to z-axis [0.000000] speed [60.000000];
	move boom8 to z-axis [0.000000] speed [60.000000];
	move boom9 to z-axis [0.000000] speed [60.000000];
	wait-for-turn turret1 around y-axis;
	wait-for-turn turret2 around x-axis;
	wait-for-move boom2 along z-axis;
	wait-for-move boom3 along z-axis;
	wait-for-move boom4 along z-axis;
	wait-for-move boom5 along z-axis;
	wait-for-move boom6 along z-axis;
	wait-for-move boom7 along z-axis;
	wait-for-move boom8 along z-axis;
	wait-for-move boom9 along z-axis;
	turn turret2 to x-axis <30.000000> speed <60.000000>;
	
	turn weight to x-axis <-30.000000> speed <60.000000>;
	wait-for-turn turret2 around x-axis;
}

TransportPickup(unitid)
{
	call-script BoomCalc(get UNIT_XZ(unitid),get UNIT_Y(unitid) + get UNIT_HEIGHT(unitid));
	if( bInDistance AND get UNKNOWN_UNIT_VALUE(74)(unitid) == get UNKNOWN_UNIT_VALUE(74)(get UNKNOWN_UNIT_VALUE(71)) )
	{
		set BUSY to 1;
		call-script BoomExtend();
		move link to y-axis [0.000000] - get UNIT_HEIGHT(unitid) now;
		attach-unit unitid to link;
		call-script BoomToPad();
		attach-unit unitid to base;
		call-script BoomReset();
		set BUSY to 0;
	}
}

TransportDrop(unitid, position)
{
	call-script BoomCalc(position,get GROUND_HEIGHT(position) + get UNIT_HEIGHT(unitid));
	if( bInDistance )
	{
		set BUSY to 1;
		call-script BoomToPad();
		//move link to y-axis [0.000000] - get UNIT_HEIGHT(unitid) now;
		attach-unit unitid to link;
		call-script BoomExtend();
		drop-unit unitid;
		call-script BoomReset();
		set BUSY to 0;
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		explode doorr type BITMAPONLY;
		explode doorl type BITMAPONLY;
		explode turret1 type BITMAPONLY;
		explode turret2 type BITMAPONLY;
		explode weight type BITMAPONLY;
		explode boom1 type BITMAPONLY;
		explode boom2 type BITMAPONLY;
		explode boom3 type BITMAPONLY;
		explode boom4 type BITMAPONLY;
		explode boom5 type BITMAPONLY;
		explode boom6 type BITMAPONLY;
		explode boom7 type BITMAPONLY;
		explode boom8 type BITMAPONLY;
		explode boom9 type FIRE | SMOKE | FALL;
		explode link type BITMAPONLY;
		explode wake type BITMAPONLY;
		return(0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY;
		explode doorr type FALL;
		explode doorl type FIRE | SMOKE | FALL;
		explode turret1 type FALL;
		explode turret2 type FIRE | SMOKE | FALL;
		explode weight type FIRE | SMOKE | FALL;
		explode boom1 type FALL;
		explode boom2 type FIRE | SMOKE | FALL;
		explode boom3 type FIRE | SMOKE | FALL;
		explode boom4 type FALL;
		explode boom5 type FALL;
		explode boom6 type FIRE | SMOKE | FALL;
		explode boom7 type FIRE | SMOKE | FALL;
		explode boom8 type FALL;
		explode boom9 type FIRE | SMOKE | FALL;
		explode link type FIRE | SMOKE | FALL;
		explode wake type FALL;
		return(0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode doorr type EXPLODE_ON_HIT | SMOKE | FALL;
		explode doorl type EXPLODE_ON_HIT | SMOKE | FALL;
		explode turret1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode turret2 type EXPLODE_ON_HIT | SMOKE | FALL;
		explode weight type EXPLODE_ON_HIT | SMOKE | FALL;
		explode boom1 type EXPLODE_ON_HIT | SMOKE | FALL;
		explode boom2 type EXPLODE_ON_HIT | SMOKE | FALL;
		explode boom3 type SMOKE | FALL;
		explode boom4 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode boom5 type SMOKE | FALL;
		explode boom6 type FIRE | SMOKE | FALL;
		explode boom7 type SMOKE | FALL;
		explode boom8 type FIRE | SMOKE | FALL;
		explode boom9 type EXPLODE_ON_HIT | SMOKE | FALL;
		explode link type SMOKE | FALL;
		explode wake type EXPLODE_ON_HIT | SMOKE | FALL;
		return(0);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode doorr type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode doorl type EXPLODE_ON_HIT | FIRE | FALL;
		explode turret1 type EXPLODE_ON_HIT | FIRE | FALL;
		explode turret2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode weight type EXPLODE_ON_HIT | FIRE | FALL;
		explode boom1 type EXPLODE_ON_HIT | FIRE | FALL;
		explode boom2 type EXPLODE_ON_HIT | FIRE | FALL;
		explode boom3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode boom4 type EXPLODE_ON_HIT | FIRE | FALL;
		explode boom5 type EXPLODE_ON_HIT | FIRE | FALL;
		explode boom6 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode boom7 type EXPLODE_ON_HIT | FIRE | FALL;
		explode boom8 type EXPLODE_ON_HIT | FIRE | FALL;
		explode boom9 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode link type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode wake type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
}
