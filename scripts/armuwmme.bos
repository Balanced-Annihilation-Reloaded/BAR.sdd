#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, arm, head1, head2, claw1, claw2;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6, Static_Var_7, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE			2
#define SIG_WORK 4


fixGo()
{
	signal SIG_WORK;
	set-signal-mask SIG_WORK;
	
	spin claw1 around z-axis speed Static_Var_1 accelerate Static_Var_1/100.0;
	spin claw2 around z-axis speed -1*Static_Var_1 accelerate Static_Var_1/100.0;
	spin turret around y-axis speed Static_Var_1/3 accelerate Static_Var_1/300.0;
	while(TRUE){
		turn arm to z-axis <90> speed <45>;
		move head1 to x-axis [-12] speed [6];
		move head2 to y-axis [12] speed [6];
		sleep 3000;
		
		turn arm to z-axis <0> speed <45>;
		move head1 to x-axis [0] speed [6];
		move head2 to y-axis [0] speed [6];
		sleep 3000;
	
	}
}

Stop()
{

	stop-spin claw1 around z-axis decelerate Static_Var_1/100.0;
	stop-spin claw2 around z-axis decelerate Static_Var_1/100.0;
	stop-spin turret around y-axis decelerate Static_Var_1/300.0;
	turn arm to z-axis <0> speed <45>;
	move head1 to x-axis [0] speed [6];
	move head2 to y-axis [0] speed [6];
	sleep 3000;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			start-script fixGo();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			signal SIG_WORK;
			start-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	Static_Var_1 = 0;
	call-script InitState();
}

Activate()
{
	start-script RequestState(0);
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	while( TRUE )
	{
		emit-sfx 259 from claw1;
		emit-sfx 259 from claw2;
		sleep 250;
	}
}

Deactivate()
{
	start-script RequestState(1);
	signal SIG_ACTIVATE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

SetSpeed(Func_Var_1)
{
	Static_Var_1 = Func_Var_1 * 4;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		explode turret type BITMAPONLY;
		explode arm type BITMAPONLY;
		explode head1 type FIRE | SMOKE | FALL;
		explode head2 type BITMAPONLY;
		explode claw2 type BITMAPONLY;
		explode claw1 type BITMAPONLY;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY;
		explode turret type FIRE | SMOKE | FALL;
		explode arm type FALL;
		explode head1 type FIRE | SMOKE | FALL;
		explode head2 type FALL;
		explode claw2 type FALL;
		explode claw1 type FIRE | SMOKE | FALL;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode turret type SMOKE | FALL;
		explode arm type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode head1 type EXPLODE_ON_HIT | SMOKE | FALL;
		explode head2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode claw2 type EXPLODE_ON_HIT | SMOKE | FALL;
		explode claw1 type EXPLODE_ON_HIT | SMOKE | FALL;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL;
		explode arm type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode head1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode head2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode claw2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode claw1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
	return corpsetype;
}
