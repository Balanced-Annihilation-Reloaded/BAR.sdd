#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, main1, main2,main3,mid1,mid2,mid3,end1,end3,end2,nano1,nano2,nano3,beam1,beam2,beam3,cover1,cover2;

static-var  spray, unitviewer, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE			2


activatescr()
{
	turn mid1 to z-axis <60> speed <60>;
	turn mid3 to z-axis <-60> speed <60>;
	
	turn end1 to z-axis <-80> speed <80>;
	turn end3 to z-axis <80> speed <80>;
	
	turn cover1 to z-axis <45> speed <45>;
	turn cover2 to z-axis <-45> speed <45>;	
	
	turn end2 to x-axis <-90> speed <90>;
	sleep 1000;
	

	return (0);
}

deactivatescr()
{
	turn mid1 to z-axis <0> speed <60>;
	turn mid3 to z-axis <0> speed <60>;
	
	turn end1 to z-axis <0> speed <80>;
	turn end3 to z-axis <0> speed <80>;
	
	turn cover1 to z-axis <0> speed <45>;
	turn cover2 to z-axis <0> speed <45>;	
	
	turn end2 to x-axis <0> speed <90>;
	sleep 1000;
	

	return (0);
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
	return (0);
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
	return (0);
}

Go()
{

	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
	return (0);
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();

	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{

	spray = 0;
	unitviewer = FALSE;
	call-script InitState();
	return (0);
}

QueryNanoPiece(piecenum)
{
	piecenum=beam1+spray;
	spray=spray+1;
	if (spray>2) spray=0;
}


Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	if( !unitviewer )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
	return (0);
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	return (0);
}
