//            * Header Info *
// VersionSignature                     4
// NumberOfScripts                     6
// NumberOfPieces                      16
// LengthOfScripts                     29a
// NumberOfStaticVars                  0
// UKZero                              0
// OffsetToScriptCodeIndexArray        a94
// OffsetToScriptNameOffsetArray       aac
// OffsetToPieceNameOffsetArray        ac4
// OffsetToScriptCode                  2c
// OffsetToNameArray                   b04

// OffsetToFirstName                   b04

#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad1, pad2, pad3,pad0,nano;


SmokeUnit(healthpercent, sleeptime, smoketype)
/*     3:*/{
/*     6:*/	while( get BUILD_PERCENT_LEFT )
/*     8:*/	{
/*     a:*/		sleep 400;
/*     d:*/	}
/*     f:*/	while( TRUE )
/*    11:*/	{
/*    14:*/		healthpercent = get HEALTH;
/*    1b:*/		if( healthpercent < 66 )
/*    1d:*/		{
/*    22:*/			smoketype = 256 | 2;
/*    2c:*/			if( Rand( 1, 66 ) < healthpercent )
/*    2e:*/			{
/*    33:*/				smoketype = 256 | 1;
/*    35:*/			}
/*    37:*/			emit-sfx smoketype from nano;
/*    39:*/		}
/*    3e:*/		sleeptime = healthpercent * 50;
/*    45:*/		if( sleeptime < 200 )
/*    47:*/		{
/*    49:*/			sleeptime = 200;
/*    4b:*/		}
/*    4d:*/		sleep sleeptime;
/*    50:*/	}
/*    52:*/	return (0);
/*    53:*/	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
/*    80:*/}

Create()
/*    78:*/{
/*    78:*/	start-script SmokeUnit();
/*    7d:*/	return (0);
/*    7e:*/}

SweetSpot(piecenum)
/*    7f:*/{
/*    81:*/	piecenum = base;
/*    85:*/	return (0);
/*    86:*/}

QueryLandingPad(Func_Var_1, Func_Var_2, Func_Var_3, Func_Var_4)
/*    8a:*/{
/*    8c:*/	Func_Var_1 = 1;
/*    90:*/	Func_Var_2 = 2;
/*    94:*/	Func_Var_3 = 3;
/*    98:*/	Func_Var_4 = 4;
/*    9c:*/	return (0);
/*    9d:*/}

QueryNanoPiece(piecenum)
/*    9e:*/{
/*    a0:*/	piecenum = nano;
/*    a4:*/	return (0);
/*    a5:*/}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		explode pad1 type BITMAPONLY;
		explode pad2 type BITMAPONLY;
		explode pad3 type BITMAPONLY;
		explode pad0 type BITMAPONLY;
		explode nano type BITMAPONLY;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY;
		explode pad1 type FIRE | SMOKE | FALL;
		explode pad2 type FIRE | SMOKE | FALL;
		explode pad3 type FIRE | SMOKE | FALL;
		explode pad0 type FIRE | SMOKE | FALL;
		explode nano type FIRE | SMOKE | FALL;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode pad1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode pad2 type FIRE | SMOKE | FALL;
		explode pad3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode pad0 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode nano type SMOKE | FALL;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode pad1 type EXPLODE_ON_HIT | FIRE | FALL;
		explode pad2 type EXPLODE_ON_HIT | FIRE | FALL;
		explode pad3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode pad0 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode nano type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
	return corpsetype;
}
