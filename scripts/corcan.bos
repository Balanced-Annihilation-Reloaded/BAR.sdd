#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  torso, head, flare, belly, lleg, barrel,
       pelvis, rleg, lfoot, rfoot,turret;

static-var  restore_delay;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4


walk()
{
	while( TRUE )
	{
		if( TRUE )
		{
			move belly to y-axis [0.000000] now;
			move lleg to y-axis [0.000000] now;
			move lleg to y-axis [1.500000] now;
			move rleg to y-axis [0.000000] now;
			move torso to y-axis [-1.000000] now;
			move barrel to y-axis [0.000000] now;
			move flare to x-axis [0.000000] now;
			move flare to y-axis [0.000000] now;
			move flare to z-axis [0.000000] now;
			turn pelvis to z-axis <2.807692> now;
			turn rleg to x-axis <14.412088> now;
			turn lleg to x-axis <-44.648352> now;
			turn lleg to x-axis <-1.038462> now;
			turn lfoot to x-axis <10.890110> now;
			turn rleg to x-axis <6.318681> now;
			turn rfoot to x-axis <-13.708791> now;
			turn torso to x-axis <-0.335165> now;
			sleep 130;
		}
		if( TRUE )
		{
			move lleg to y-axis [1.500000] now;
			move lleg to y-axis [0.000000] now;
			move torso to y-axis [0.000000] now;
			move flare to x-axis [1.750000] now;
			move flare to y-axis [0.250000] now;
			move flare to z-axis [-6.750000] now;
			turn pelvis to z-axis <6.670330> now;
			turn rleg to x-axis <21.445055> now;
			turn lleg to x-axis <-23.901099> now;
			turn lleg to x-axis <7.379121> now;
			turn lfoot to x-axis <16.510989> now;
			turn rleg to x-axis <12.648352> now;
			turn rfoot to x-axis <-3.505495> now;
			turn torso to x-axis <2.807692> now;
			sleep 130;
		}
		if( TRUE )
		{
			sleep 130;
		}
		if( TRUE )
		{
			turn torso to x-axis <11.598901> now;
			sleep 130;
		}
		if( TRUE )
		{
			move rleg to y-axis [0.500000] now;
			move lleg to y-axis [0.625000] now;
			move rleg to y-axis [1.125000] now;
			move torso to y-axis [-0.375000] now;
			turn pelvis to z-axis <5.258242> now;
			turn rleg to x-axis <14.060440> now;
			turn lleg to x-axis <-14.401099> now;
			turn lfoot to x-axis <6.318681> now;
			turn rleg to x-axis <8.076923> now;
			turn rfoot to x-axis <-2.456044> now;
			turn torso to x-axis <5.269231> now;
			sleep 130;
		}
		if( TRUE )
		{
			move lleg to y-axis [0.250000] now;
			move rleg to y-axis [1.875000] now;
			move torso to y-axis [-0.500000] now;
			turn pelvis to z-axis <3.505495> now;
			turn rleg to x-axis <3.505495> now;
			turn lleg to x-axis <-1.395604> now;
			turn lfoot to x-axis <-5.967033> now;
			turn torso to x-axis <3.159341> now;
			sleep 120;
		}
		if( TRUE )
		{
			move lleg to y-axis [0.000000] now;
			move torso to y-axis [-0.250000] now;
			turn pelvis to z-axis <0.000000> now;
			turn rleg to x-axis <-6.670330> now;
			turn lleg to x-axis <4.208791> now;
			turn lfoot to x-axis <-11.598901> now;
			turn torso to x-axis <8.076923> now;
			sleep 110;
		}
		if( TRUE )
		{
			move rleg to y-axis [2.125000] now;
			move torso to y-axis [0.000000] now;
			turn pelvis to z-axis <-1.395604> now;
			turn rleg to x-axis <-17.923077> now;
			turn lleg to x-axis <8.769231> now;
			turn torso to x-axis <7.379121> now;
			sleep 110;
		}
		if( TRUE )
		{
			move rleg to y-axis [0.250000] now;
			turn pelvis to z-axis <-2.807692> now;
			turn rleg to x-axis <-36.906593> now;
			turn lleg to x-axis <15.818681> now;
			turn lfoot to x-axis <-6.318681> now;
			turn rleg to x-axis <-9.840659> now;
			turn torso to x-axis <1.747253> now;
			sleep 110;
		}
		if( TRUE )
		{
			move rleg to y-axis [1.500000] now;
			move lleg to y-axis [1.000000] now;
			move torso to y-axis [0.000000] - [0.000076] now;
			turn pelvis to z-axis <-6.670330> now;
			turn lleg to x-axis <22.851648> now;
			turn lfoot to x-axis <-2.807692> now;
			turn rleg to x-axis <10.192308> now;
			turn rfoot to x-axis <27.423077> now;
			turn torso to x-axis <-2.456044> now;
			sleep 130;
		}
		if( TRUE )
		{
			sleep 130;
		}
		if( TRUE )
		{
			turn torso to x-axis <8.428571> now;
			sleep 130;
		}
		if( TRUE )
		{
			move rleg to y-axis [0.625000] now;
			move lleg to y-axis [1.750000] now;
			move torso to y-axis [-0.375000] now;
			turn pelvis to z-axis <-5.269231> now;
			turn rleg to x-axis <-22.505495> now;
			turn lleg to x-axis <16.170330> now;
			turn lfoot to x-axis <0.000000> now;
			turn rfoot to x-axis <12.291209> now;
			turn torso to x-axis <1.747253> now;
			sleep 120;
		}
		if( TRUE )
		{
			move rleg to y-axis [0.250000] now;
			move lleg to y-axis [2.500000] now;
			move torso to y-axis [-0.500000] now;
			turn pelvis to z-axis <-3.505495> now;
			turn rleg to x-axis <-10.538462> now;
			turn lleg to x-axis <5.269231> now;
			turn lfoot to x-axis <-0.697802> now;
			turn rfoot to x-axis <0.335165> now;
			turn torso to x-axis <-3.857143> now;
			sleep 130;
		}
		if( TRUE )
		{
			move rleg to y-axis [0.000000] now;
			move torso to y-axis [-0.750000] now;
			turn pelvis to z-axis <0.000000> now;
			turn rleg to x-axis <0.697802> now;
			turn lleg to x-axis <-12.291209> now;
			turn rfoot to x-axis <-11.598901> now;
			turn torso to x-axis <-0.697802> now;
			sleep 130;
		}
		move lleg to y-axis [2.250000] now;
		move torso to y-axis [-1.000000] now;
		turn pelvis to z-axis <1.395604> now;
		turn rleg to x-axis <3.505495> now;
		turn lleg to x-axis <-23.203297> now;
		turn torso to x-axis <0.697802> now;
		sleep 130;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	call-script walk();
	return (0);
}

StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	turn pelvis to z-axis <0.000000> speed <150.000000>;
	turn belly to x-axis <0.000000> speed <150.000000>;
	move torso to y-axis [0.000000] speed [2.500000];
	turn torso to x-axis <0.000000> speed <150.000000>;
	turn rleg to x-axis <0.000000> speed <150.000000>;
	turn rleg to x-axis <0.000000> speed <150.000000>;
	turn rfoot to x-axis <0.000000> speed <150.000000>;
	turn lleg to x-axis <0.000000> speed <150.000000>;
	turn lleg to x-axis <0.000000> speed <150.000000>;
	turn lfoot to x-axis <0.000000> speed <150.000000>;
	return (0);
}

Create()
{
	hide flare;
	restore_delay = 3000;
	start-script StopMoving();
	start-script SmokeUnit();
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = torso;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = head;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <135.000000>;
	turn head to x-axis <0.000000> speed <85.000000>;
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <270.000000>;
	turn head to x-axis <0.000000> - pitch speed <170.000000>;
	wait-for-turn head around y-axis;
	wait-for-turn barrel around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	move barrel to z-axis [-3.750000] speed [62.500000];
	show flare;
	wait-for-move barrel along z-axis;
	move barrel to z-axis [0.000000] speed [2.500000];
	sleep 15;
	hide flare;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode flare type BITMAPONLY | BITMAP2;
		explode barrel type BITMAPONLY | BITMAP4;
		explode head type BITMAPONLY | BITMAP5;
		explode lfoot type BITMAPONLY | BITMAP1;
		explode lleg type BITMAPONLY | BITMAP2;
		explode pelvis type BITMAPONLY | BITMAP4;
		explode rfoot type BITMAPONLY | BITMAP5;
		explode rleg type BITMAPONLY | BITMAP1;
		explode torso type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode flare type FALL | BITMAP2;
		explode barrel type FALL | BITMAP4;
		explode head type FALL | BITMAP5;
		explode lfoot type FALL | BITMAP1;
		explode lleg type FALL | BITMAP2;
		explode pelvis type FALL | BITMAP4;
		explode rfoot type FALL | BITMAP5;
		explode rleg type FALL | BITMAP1;
		explode torso type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode head type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lleg type SHATTER | BITMAP3;
		explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode rleg type SHATTER | BITMAP2;
		explode torso type BITMAPONLY | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode head type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode lleg type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode rleg type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode torso type BITMAPONLY | BITMAP3;
	return (0);
}
