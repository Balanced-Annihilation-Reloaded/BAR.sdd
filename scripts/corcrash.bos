#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  lflare, rflare, torso, pelvis, lleg, rleg, lbarrel,
       rbarrel;

static-var  gun_3, restore_delay;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM_3			4


walk()
{
	while( TRUE )
	{
		if( TRUE )
		{
			move pelvis to y-axis [0.000000] now;
			move lleg to y-axis [0.000000] now;
			move lleg to z-axis [4.375000] now;
			move rleg to y-axis [0.000000] now;
			move rleg to z-axis [-4.000000] now;
			turn pelvis to x-axis <6.000000> now;
			turn lleg to x-axis <-6.000000> now;
			turn rleg to x-axis <0.000000> now;
			sleep 60;
		}
		if( TRUE )
		{
			move pelvis to y-axis [-1.250000] now;
			move lleg to y-axis [1.250000] now;
			move rleg to y-axis [1.250000] now;
			turn pelvis to x-axis <4.912088> now;
			turn lleg to x-axis <-4.912088> now;
			turn rleg to x-axis <1.049451> now;
			sleep 30;
		}
		if( TRUE )
		{
			move pelvis to y-axis [-0.750000] now;
			move lleg to y-axis [0.750000] now;
			move rleg to y-axis [0.750000] now;
			turn pelvis to x-axis <2.093407> now;
			turn lleg to x-axis <-2.093407> now;
			turn rleg to x-axis <2.802198> now;
			sleep 20;
		}
		if( TRUE )
		{
			move pelvis to y-axis [-0.250000] now;
			move lleg to y-axis [0.250000] now;
			move rleg to y-axis [0.250000] now;
			turn pelvis to x-axis <1.049451> now;
			turn lleg to x-axis <-1.038462> now;
			turn rleg to x-axis <3.159341> now;
			sleep 10;
		}
		if( TRUE )
		{
			move pelvis to y-axis [0.000000] now;
			move lleg to y-axis [0.000000] now;
			move rleg to y-axis [2.750000] now;
			move rleg to z-axis [-4.625000] now;
			turn pelvis to x-axis <0.000000> now;
			turn lleg to x-axis <0.000000> now;
			turn rleg to x-axis <0.000000> now;
			sleep 60;
		}
		if( TRUE )
		{
			move lleg to z-axis [2.500000] now;
			move rleg to z-axis [-0.875000] now;
			sleep 60;
		}
		if( TRUE )
		{
			move lleg to y-axis [0.000000] now;
			move lleg to z-axis [0.000000] now;
			move rleg to z-axis [0.000000] now;
			turn pelvis to x-axis <0.000000> now;
			turn lleg to x-axis <0.000000> now;
			turn rleg to x-axis <0.000000> now;
			sleep 60;
		}
		if( TRUE )
		{
			move lleg to z-axis [-1.500000] now;
			move rleg to z-axis [2.125000] now;
			turn rleg to x-axis <-9.137363> now;
			sleep 100;
		}
		if( TRUE )
		{
			move lleg to z-axis [-3.000000] now;
			move rleg to y-axis [0.000000] now;
			turn pelvis to x-axis <6.000000> now;
			turn rleg to x-axis <-6.000000> now;
			sleep 60;
		}
		if( TRUE )
		{
			move pelvis to y-axis [-1.224991] now;
			move lleg to y-axis [1.250000] now;
			move rleg to y-axis [1.250000] now;
			turn pelvis to x-axis <4.560440> now;
			turn lleg to x-axis <0.692308> now;
			turn rleg to x-axis <-4.912088> now;
			sleep 30;
		}
		if( TRUE )
		{
			move pelvis to y-axis [-0.699997] now;
			move lleg to y-axis [0.750000] now;
			move rleg to y-axis [0.750000] now;
			turn pelvis to x-axis <2.093407> now;
			turn lleg to x-axis <2.802198> now;
			turn rleg to x-axis <-2.093407> now;
			sleep 20;
		}
		if( TRUE )
		{
			move pelvis to y-axis [-0.250000] now;
			move lleg to y-axis [0.250000] now;
			move rleg to y-axis [0.250000] now;
			turn pelvis to x-axis <1.049451> now;
			turn lleg to x-axis <2.456044> now;
			turn rleg to x-axis <-1.038462> now;
			sleep 10;
		}
		if( TRUE )
		{
			move lleg to y-axis [2.750000] now;
			move lleg to z-axis [-3.875000] now;
			move rleg to y-axis [1.250000] now;
			turn pelvis to x-axis <0.000000> now;
			turn lleg to x-axis <0.000000> now;
			turn rleg to x-axis <0.000000> now;
			sleep 60;
		}
		if( TRUE )
		{
			move lleg to z-axis [-1.750000] now;
			move rleg to z-axis [0.500000] now;
			sleep 60;
		}
		if( TRUE )
		{
			move lleg to z-axis [1.125000] now;
			move rleg to y-axis [0.000000] now;
			move rleg to z-axis [-0.750000] now;
			turn rleg to x-axis <0.000000> now;
			sleep 60;
		}
		move lleg to z-axis [2.500000] now;
		move rleg to y-axis [0.000000] now;
		move rleg to z-axis [-3.250000] now;
		turn lleg to x-axis <-10.192308> now;
		turn rleg to x-axis <0.000000> now;
		sleep 100;
	}
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	call-script walk();
	return (0);
}

StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	return (0);
}

Create()
{
	gun_3 = lflare;
	restore_delay = 3000;
	start-script StopMoving();
	start-script SmokeUnit();
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 5;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = pelvis;
	return (0);
}

AimFromTertiary(piecenum)
{
	piecenum = torso;
	return (0);
}

QueryTertiary(piecenum)
{
	if( gun_3 == 0 )
	{
		piecenum = lflare;
	}
	if( gun_3 == 0 )
	{
		piecenum = rflare;
	}
	return (0);
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	turn torso to y-axis <0.000000> speed <90.000000>;
	return (0);
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn torso to y-axis heading speed <225.000000>;
	wait-for-turn torso around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireTertiary()
{
	if( gun_3 == 0 )
	{
		gun_3 = rflare;
		move lbarrel to z-axis [-3.750000] speed [62.500000];
		wait-for-move lbarrel along z-axis;
		move lbarrel to z-axis [0.000000] speed [7.500000];
		return (0);
	}
	if( gun_3 == 1 )
	{
		gun_3 = lflare;
		move rbarrel to z-axis [-3.750000] speed [62.500000];
		wait-for-move rbarrel along z-axis;
		move rbarrel to z-axis [0.000000] speed [7.500000];
	}
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode lflare type BITMAPONLY | BITMAP1;
		explode rflare type BITMAPONLY | BITMAP2;
		explode lbarrel type BITMAPONLY | BITMAP4;
		explode rbarrel type BITMAPONLY | BITMAP5;
		explode lleg type BITMAPONLY | BITMAP2;
		explode pelvis type BITMAPONLY | BITMAP3;
		explode rleg type BITMAPONLY | BITMAP4;
		explode torso type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode lflare type FALL | BITMAP1;
		explode rflare type FALL | BITMAP2;
		explode lbarrel type FALL | BITMAP4;
		explode rbarrel type FALL | BITMAP5;
		explode lleg type FALL | BITMAP2;
		explode pelvis type BITMAPONLY | BITMAP3;
		explode rleg type FALL | BITMAP4;
		explode torso type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode lflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode rbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode pelvis type BITMAPONLY | BITMAP3;
		explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode torso type BITMAPONLY | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode lflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode rbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode pelvis type BITMAPONLY | BITMAP3;
	explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode torso type BITMAPONLY | BITMAP5;
	return (0);
}
