#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, beam, door1, door2, wake, nano1, nano2;


#define SIG_MOVE		4

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging;




SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}


StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var waketime;
	while( TRUE )
	{
		emit-sfx 2 from wake;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if( waketime < 50 ) waketime = 50;
		sleep 10000 / waketime;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

Go()
{
	turn door1 to z-axis <-180> speed <180.362637>;
	turn door2 to z-axis <180> speed <180.362637>;
	sleep 771;
	move beam to y-axis [12] speed [24];
	turn beam to y-axis Static_Var_1 speed <160.038462>;
	wait-for-turn beam around y-axis;
	set INBUILDSTANCE to 1;
}

Stop()
{	
	turn beam to y-axis <0.000000> speed <160.038462>;
	wait-for-turn beam around y-axis;
	move beam to y-axis [0] speed [24];
	set INBUILDSTANCE to 0;
	turn door1 to z-axis <0> speed <180.362637>;
	turn door2 to z-axis <0> speed <180.362637>;
	sleep 771;

}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	Static_Var_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
	start-script RequestState(0);
}

StopBuilding()
{
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		explode door2 type FIRE | SMOKE | FALL;
		explode beam type BITMAPONLY;
		explode nano1 type BITMAPONLY;
		explode nano2 type BITMAPONLY;
		explode door1 type BITMAPONLY;
		explode wake type BITMAPONLY;
		return(0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY;
		explode door2 type FIRE | SMOKE | FALL;
		explode beam type FALL;
		explode nano1 type FALL;
		explode nano2 type FALL;
		explode door1 type FIRE | SMOKE | FALL;
		explode wake type FIRE | SMOKE | FALL;
		return(0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode door2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode beam type FIRE | SMOKE | FALL;
		explode nano1 type FIRE | SMOKE | FALL;
		explode nano2 type EXPLODE_ON_HIT | SMOKE | FALL;
		explode door1 type EXPLODE_ON_HIT | SMOKE | FALL;
		explode wake type SMOKE | FALL;
		return(0);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode door2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode beam type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode nano1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode nano2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode door1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode wake type EXPLODE_ON_HIT | FIRE | FALL;
}
