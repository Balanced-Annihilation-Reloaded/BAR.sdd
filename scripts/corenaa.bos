//            * Header Info *
// VersionSignature                     4
// NumberOfScripts                     12
// NumberOfPieces                      6
// LengthOfScripts                     4b6
// NumberOfStaticVars                  2
// UKZero                              0
// OffsetToScriptCodeIndexArray        1304
// OffsetToScriptNameOffsetArray       1334
// OffsetToPieceNameOffsetArray        1364
// OffsetToScriptCode                  2c
// OffsetToNameArray                   137c

// OffsetToFirstName                   137c

#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, turret, guns, base;

static-var  restore_delay, gun_1;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
/*     3:*/{
/*     6:*/	while( get BUILD_PERCENT_LEFT )
/*     8:*/	{
/*     a:*/		sleep 400;
/*     d:*/	}
/*     f:*/	while( TRUE )
/*    11:*/	{
/*    14:*/		healthpercent = get HEALTH;
/*    1b:*/		if( healthpercent < 66 )
/*    1d:*/		{
/*    22:*/			smoketype = 256 | 2;
/*    2c:*/			if( Rand( 1, 66 ) < healthpercent )
/*    2e:*/			{
/*    33:*/				smoketype = 256 | 1;
/*    35:*/			}
/*    37:*/			emit-sfx smoketype from base;
/*    39:*/		}
/*    3e:*/		sleeptime = healthpercent * 50;
/*    45:*/		if( sleeptime < 200 )
/*    47:*/		{
/*    49:*/			sleeptime = 200;
/*    4b:*/		}
/*    4d:*/		sleep sleeptime;
/*    50:*/	}
/*    52:*/	return (0);
/*    53:*/}

RockUnit(anglex, anglez)
/*    55:*/{
/*    59:*/	turn base to x-axis anglex speed <15.000000>;
/*    60:*/	turn base to z-axis anglez speed <15.000000>;
/*    63:*/	wait-for-turn base around z-axis;
/*    66:*/	wait-for-turn base around x-axis;
/*    70:*/	turn base to x-axis <0.000000> - anglex speed <12.000000>;
/*    7a:*/	turn base to z-axis <0.000000> - anglez speed <12.000000>;
/*    7d:*/	wait-for-turn base around z-axis;
/*    80:*/	wait-for-turn base around x-axis;
/*    8a:*/	turn base to x-axis anglex / <0.005495> speed <9.000000>;
/*    94:*/	turn base to z-axis anglez / <0.005495> speed <9.000000>;
/*    97:*/	wait-for-turn base around z-axis;
/*    9a:*/	wait-for-turn base around x-axis;
/*    a1:*/	turn base to x-axis <0.000000> speed <3.000000>;
/*    a8:*/	turn base to z-axis <0.000000> speed <3.000000>;
/*    ad:*/	return (0);
/*    ae:*/}

HitByWeapon(Func_Var_1, Func_Var_2)
/*    b0:*/{
/*    b4:*/	turn base to z-axis Func_Var_2 speed <105.021978>;
/*    bb:*/	turn base to x-axis Func_Var_1 speed <105.021978>;
/*    be:*/	wait-for-turn base around z-axis;
/*    c1:*/	wait-for-turn base around x-axis;
/*    c8:*/	turn base to z-axis <0.000000> speed <30.005495>;
/*    cf:*/	turn base to x-axis <0.000000> speed <30.005495>;
/*    d4:*/	return (0);
/*    d5:*/}

Create()
/*    d5:*/{
/*    d5:*/	hide flare1;
/*    d7:*/	hide flare2;
/*    db:*/	restore_delay = 3000;
/*    dd:*/	start-script SmokeUnit();
/*    e2:*/	gun_1 = flare1;
/*    e6:*/	return (0);
/*    e7:*/}

SetMaxReloadTime(Func_Var_1)
/*    e8:*/{
/*    ed:*/	restore_delay = Func_Var_1 * 2;
/*    f1:*/	return (0);
/*    f2:*/}

RestoreAfterDelay()
/*    f2:*/{
/*    f4:*/	sleep restore_delay;
/*    f9:*/	turn turret to y-axis <0.000000> speed <600.142857>;
/*   100:*/	turn guns to x-axis <0.000000> speed <550.131868>;
/*   105:*/	return (1);
/*   106:*/}

AimPrimary(heading, pitch)
/*   108:*/{
/*   10a:*/	signal SIG_AIM;
/*   10d:*/	set-signal-mask SIG_AIM;
/*   112:*/	turn turret to y-axis heading speed <670.159341>;
/*   11c:*/	turn guns to x-axis <0.000000> - pitch speed <670.159341>;
/*   11f:*/	wait-for-turn turret around y-axis;
/*   122:*/	wait-for-turn guns around x-axis;
/*   125:*/	start-script RestoreAfterDelay();
/*   12a:*/	return (1);
/*   12b:*/}

FirePrimary()
/*   12b:*/{
/*   130:*/	if( gun_1 == 0 )
/*   132:*/	{
/*   134:*/		move guns to z-axis [-10.005496] now;
/*   137:*/		show flare1;
/*   13b:*/		sleep 150;
/*   13c:*/		hide flare1;
/*   142:*/		move guns to z-axis [0.000000] speed [37.520611];
/*   145:*/	}
/*   14a:*/	if( gun_1 == 1 )
/*   14c:*/	{
/*   14e:*/		move guns to z-axis [-10.005496] now;
/*   151:*/		show flare2;
/*   155:*/		sleep 150;
/*   156:*/		hide flare2;
/*   15c:*/		move guns to z-axis [0.000000] speed [37.520611];
/*   15f:*/	}
/*   161:*/	sleep 50;
/*   167:*/	++gun_1;
/*   16e:*/	if( gun_1 == 1 )
/*   170:*/	{
/*   172:*/		gun_1 = flare1;
/*   174:*/	}
/*   176:*/	return (0);
/*   177:*/}

AimFromPrimary(piecenum)
/*   178:*/{
/*   17a:*/	piecenum = turret;
/*   17e:*/	return (0);
/*   17f:*/}

QueryPrimary(piecenum)
/*   180:*/{
/*   182:*/	piecenum = flare1;
/*   186:*/	return (0);
/*   187:*/}

SweetSpot(piecenum)
/*   188:*/{
/*   18a:*/	piecenum = turret;
/*   18e:*/	return (0);
/*   18f:*/}

Killed(severity, corpsetype)
/*   191:*/{
/*   191:*/	hide flare1;
/*   198:*/	if( severity <= 25 )
/*   19a:*/	{
/*   19c:*/		corpsetype = 1;
/*   1a3:*/		explode guns type BITMAPONLY | BITMAP1;
/*   1aa:*/		explode base type BITMAPONLY | BITMAP2;
/*   1b1:*/		explode flare1 type BITMAPONLY | BITMAP3;
/*   1b8:*/		explode turret type BITMAPONLY | BITMAP5;
/*   1bc:*/		return (0);
/*   1bd:*/	}
/*   1c2:*/	if( severity <= 50 )
/*   1c4:*/	{
/*   1c6:*/		corpsetype = 2;
/*   1cd:*/		explode guns type FALL | BITMAP1;
/*   1d4:*/		explode base type BITMAPONLY | BITMAP2;
/*   1db:*/		explode flare1 type FALL | BITMAP3;
/*   1e2:*/		explode turret type SHATTER | BITMAP5;
/*   1e6:*/		return (0);
/*   1e7:*/	}
/*   1ec:*/	if( severity <= 99 )
/*   1ee:*/	{
/*   1f0:*/		corpsetype = 3;
/*   200:*/		explode guns type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
/*   207:*/		explode base type BITMAPONLY | BITMAP2;
/*   217:*/		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
/*   21e:*/		explode turret type SHATTER | BITMAP5;
/*   222:*/		return (0);
/*   223:*/	}
/*   225:*/	corpsetype = 3;
/*   235:*/	explode guns type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
/*   23c:*/	explode base type BITMAPONLY | BITMAP2;
/*   24c:*/	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
/*   256:*/	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP5;
/*   25a:*/	return (0);
/*   25e:*/	
/*   4b6:*/}
