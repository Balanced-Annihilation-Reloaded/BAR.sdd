#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare6,flare7, flare5, flare4, flare3, flare2, base, turret;

static-var  Static_Var_1, gun_1, last_fire, firstaim;

// Signal definitions
#define SIG_AIM				2
#define CHANGE_TARGET       98
#define DELAY_UNIT_VAR 1024
#define GAME_FRAME 134

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{

	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	hide flare5;
	hide flare6;	
	hide flare7;
	gun_1 = flare1;
	firstaim = 1;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep 1000;
    firstaim = 1;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <250>;
	if (firstaim == 1) {
	  last_fire = (get GAME_FRAME) + (get DELAY_UNIT_VAR);
	  firstaim = 0;
	}
	while (last_fire > (get GAME_FRAME)) {
		sleep 150;
		set CHANGE_TARGET to 1;
	}
	wait-for-turn turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		show flare1;
		sleep 50;
		hide flare1;
	}
	if( gun_1 == 1 )
	{
		show flare2;
		sleep 50;
		hide flare2;
	}
	if( gun_1 == 2 )
	{
		show flare3;
		sleep 50;
		hide flare3;
	}
	if( gun_1 == 3 )
	{
		show flare4;
		sleep 50;
		hide flare4;
	}
	if( gun_1 == 4 )
	{
		show flare5;
		sleep 50;
		hide flare5;
	}
	if( gun_1 == 5 )
	{
		show flare6;
		sleep 50;
		hide flare6;
	}
	if( gun_1 == 6 )
	{
		show flare7;
		sleep 50;
		hide flare7;
	}
	++gun_1;
	if( gun_1 == 7 )
	{
		gun_1 = flare1;
	}
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1 type BITMAPONLY | BITMAP2;
		explode flare2 type BITMAPONLY | BITMAP2;
		explode flare3 type BITMAPONLY | BITMAP2;
		explode flare4 type BITMAPONLY | BITMAP2;
		explode flare5 type BITMAPONLY | BITMAP2;
		explode flare6 type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1 type FALL | BITMAP2;
		explode flare2 type FALL | BITMAP2;
		explode flare3 type FALL | BITMAP2;
		explode flare4 type FALL | BITMAP2;
		explode flare5 type FALL | BITMAP2;
		explode flare6 type FALL | BITMAP2;
		explode turret type SHATTER | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1 type FALL | SMOKE | gun_1 | EXPLODE_ON_HIT | BITMAP2;
		explode flare2 type FALL | SMOKE | gun_1 | EXPLODE_ON_HIT | BITMAP2;
		explode flare3 type FALL | SMOKE | gun_1 | EXPLODE_ON_HIT | BITMAP2;
		explode flare4 type FALL | SMOKE | gun_1 | EXPLODE_ON_HIT | BITMAP2;
		explode flare5 type FALL | SMOKE | gun_1 | EXPLODE_ON_HIT | BITMAP2;
		explode flare6 type FALL | SMOKE | gun_1 | EXPLODE_ON_HIT | BITMAP2;
		explode turret type SHATTER | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode flare1 type FALL | SMOKE | gun_1 | EXPLODE_ON_HIT | BITMAP2;
	explode flare2 type FALL | SMOKE | gun_1 | EXPLODE_ON_HIT | BITMAP2;
	explode flare3 type FALL | SMOKE | gun_1 | EXPLODE_ON_HIT | BITMAP2;
	explode flare4 type FALL | SMOKE | gun_1 | EXPLODE_ON_HIT | BITMAP2;
	explode flare5 type FALL | SMOKE | gun_1 | EXPLODE_ON_HIT | BITMAP2;
	explode flare6 type FALL | SMOKE | gun_1 | EXPLODE_ON_HIT | BITMAP2;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP3;
}
