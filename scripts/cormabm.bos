#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, dbl, dbr, dtr, dtl, dummy, turret;

static-var  Static_Var_1, Static_Var_2, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.000000>;
	turn base to x-axis Func_Var_1 speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
	return (0);
}

Go()
{
	Static_Var_1 = 1;
	return (0);
}

Stop()
{
	Static_Var_1 = 0;
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	Static_Var_1 = 0;
	Static_Var_2 = 10000;
	call-script InitState();
	start-script SmokeUnit();
	return (0);
}

StartMoving()
{
	start-script RequestState(0);
	return (0);
}

StopMoving()
{
	start-script RequestState(1);
	return (0);
}

RestoreAfterDelay()
{
	sleep Static_Var_2;
	set-signal-mask 0;
	move dbl to x-axis [0] speed [8];
	move dbl to z-axis [0] speed [8];
	move dbr to x-axis [0] speed [8];
	move dbr to z-axis [0] speed [8];
	move dtl to x-axis [0] speed [8];
	move dtl to z-axis [0] speed [8];
	move dtr to x-axis [0] speed [8];
	move dtr to z-axis [0] speed [8];
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	move dbl to x-axis [-3] speed [8];
	move dbl to z-axis [-3] speed [8];
	move dbr to x-axis [3] speed [8];
	move dbr to z-axis [-3] speed [8];
	move dtl to x-axis [-8] speed [8];
	move dtl to z-axis [3] speed [8];
	move dtr to x-axis [3] speed [8];
	move dtr to z-axis [3] speed [8];
	wait-for-move dtr along x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	sleep 100;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = dummy;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
/*   268:*/{
/*   26d:*/	if( severity <= 25 )
/*   26f:*/	{
/*   271:*/		corpsetype = 1;
/*   278:*/		explode base type BITMAPONLY | BITMAP1;
/*   27f:*/		explode dbl type BITMAPONLY | BITMAP2;
/*   286:*/		explode dbr type BITMAPONLY | BITMAP3;
/*   28d:*/		explode dtr type BITMAPONLY | BITMAP4;
/*   294:*/		explode dtl type BITMAPONLY | BITMAP5;
/*   29b:*/		explode dummy type BITMAPONLY | BITMAP1;
/*   2b4:*/		return (0);
/*   2b5:*/	}
/*   2ba:*/	if( severity <= 50 )
/*   2bc:*/	{
/*   2be:*/		corpsetype = 2;
/*   278:*/		explode base type BITMAPONLY | BITMAP1;
/*   27f:*/		explode dbl type BITMAPONLY | BITMAP2;
/*   286:*/		explode dbr type BITMAPONLY | BITMAP3;
/*   28d:*/		explode dtr type BITMAPONLY | BITMAP4;
/*   294:*/		explode dtl type BITMAPONLY | BITMAP5;
/*   29b:*/		explode dummy type BITMAPONLY | BITMAP1;
/*   301:*/		return (0);
/*   302:*/	}
/*   307:*/	if( severity <= 99 )
/*   309:*/	{
/*   30b:*/		corpsetype = 3;
/*   278:*/		explode base type BITMAPONLY | BITMAP1;
/*   27f:*/		explode dbl type BITMAPONLY | BITMAP2;
/*   286:*/		explode dbr type BITMAPONLY | BITMAP3;
/*   28d:*/		explode dtr type BITMAPONLY | BITMAP4;
/*   294:*/		explode dtl type BITMAPONLY | BITMAP5;
/*   29b:*/		explode dummy type BITMAPONLY | BITMAP1;
/*   369:*/		return (0);
/*   36a:*/	}
/*   36c:*/	corpsetype = 3;
/*   278:*/		explode base type BITMAPONLY | BITMAP1;
/*   27f:*/		explode dbl type BITMAPONLY | BITMAP2;
/*   286:*/		explode dbr type BITMAPONLY | BITMAP3;
/*   28d:*/		explode dtr type BITMAPONLY | BITMAP4;
/*   294:*/		explode dtl type BITMAPONLY | BITMAP5;
/*   29b:*/		explode dummy type BITMAPONLY | BITMAP1;
/*   3cd:*/	return (0);
/*   3ce:*/}
