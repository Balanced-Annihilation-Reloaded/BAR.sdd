#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, fan, tank1, tank2;

static-var  Static_Var_1, Static_Var_2;


activatescr()
{
	if( TRUE )
	{
		move tank1 to y-axis [5.000000] speed [5.000000];
		move tank2 to y-axis [-5.000000] speed [5.000000];
		wait-for-move tank1 along y-axis;
		spin fan around y-axis speed <86.000000> accelerate <2.5000000>;
	}
	sleep 266;
}

deactivatescr()
{
	if( TRUE )
	{
		move tank1 to y-axis [0.000000] speed [5.000000];
		move tank2 to y-axis [0.000000] speed [5.000000];
		wait-for-move tank1 along y-axis;
		spin fan around y-axis speed <30.000000> accelerate <0.500000>;
	}
	sleep 266;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	if( Static_Var_1 )
	{
		set ACTIVATION to 0;
		return (0);
	}
	call-script activatescr();
	set ARMORED to 0;
}

Stop()
{
	set ARMORED to 1;
	call-script deactivatescr();
}

ImAMetalMaker()
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 150;
	}
	Static_Var_2 = -1;
	while( TRUE )
	{
		if( get UNKNOWN_UNIT_VALUE(1024) == 1 )
		{
			if( Static_Var_2 != 1 )
			{
				call-script Go();
				Static_Var_2 = 1;
			}
		}
		else if( Static_Var_2 != 0 )
		{
			call-script Stop();
			Static_Var_2 = 0;
		}
		sleep 1000;
	}
}

Create()
{
	spin fan around y-axis speed <30.000000> accelerate <3.000000>;
	call-script ImAMetalMaker();
	start-script SmokeUnit();
	Static_Var_1 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	set ARMORED to 1;
}

Activate()
{
	start-script activatescr();
}

Deactivate()
{
	start-script deactivatescr();
}

HitByWeapon(anglex, anglez)
{
	if( get ACTIVATION )
	{
		Static_Var_1 = 1;
	}
	if( Static_Var_1 )
	{
		signal 2;
		set-signal-mask 2;
		set ACTIVATION to 0;
		sleep 8000;
		Static_Var_1 = 0;
		set ACTIVATION to 100;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode fan type BITMAPONLY | BITMAP2;
		explode tank1 type BITMAPONLY | BITMAP3;
		explode tank2 type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode fan type BITMAPONLY | BITMAP2;
		explode tank1 type BITMAPONLY | BITMAP3;
		explode tank2 type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode fan type BITMAPONLY | BITMAP2;
		explode tank1 type BITMAPONLY | BITMAP3;
		explode tank2 type BITMAPONLY | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode fan type BITMAPONLY | BITMAP2;
	explode tank1 type BITMAPONLY | BITMAP3;
	explode tank2 type BITMAPONLY | BITMAP4;
}
