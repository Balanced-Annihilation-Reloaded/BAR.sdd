#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, turret, base, sleeve, barrel1, barrel2,
       wake1, wake2;

static-var  bMoving, moveSpeed, currentSpeed, animSpeed, restore_delay, gun_1, terrain;

// Signal definitions
#define SIG_AIM				2

UnitSpeed()
{
	while(TRUE)
	{
		currentSpeed = (get CURRENT_SPEED)*20/moveSpeed;
		if (currentSpeed<4) currentSpeed=4;
		animSpeed = 1600 / currentSpeed;
		sleep 142;
	}
}

Smoke()
{
	while( TRUE )
	{
		if ( bMoving )
		{
			if( terrain == 4 )
			{
				emit-sfx 1024 + 0 from wake1;
				emit-sfx 1024 + 0 from wake2;
			}
		}
		sleep animSpeed;
	}
}


HitByWeapon(anglex, anglez)
{
	turn base to z-axis anglez speed <65.000000>;
	turn base to x-axis <0> - anglex speed <65.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}


RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.000000>;
	turn base to z-axis anglez speed <50.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}

EmitSFX()
{
	while( TRUE )
	{
		if( bMoving )
		{
			if( terrain == 1 )
			{
				emit-sfx 259 from wake1;
				emit-sfx 259 from wake2;
			} 
		}
		sleep 250;
	}
}

Create()
{
	bMoving = FALSE;
	moveSpeed = get (MAX_SPEED);
	animSpeed = 100;
	hide flare1;
	hide flare2;
	bMoving = FALSE;
	gun_1 = flare1;
	restore_delay = 3000;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script EmitSFX();
	start-script Smoke();
	start-script UnitSpeed();
}

setSFXoccupy(state)
{
	terrain = state;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <65.000000>;
	turn sleeve to x-axis <0.000000> speed <35.000000>;
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <75.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <45.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		show flare1;
		move barrel1 to z-axis [-2.400000] speed [500.000000];
		sleep 150;
		hide flare1;
		wait-for-move barrel1 along z-axis;
		move barrel1 to z-axis [0.000000] speed [3.000000];
	}
	if( gun_1 == 1 )
	{
		show flare2;
		move barrel2 to z-axis [-2.400000] speed [500.000000];
		sleep 150;
		hide flare2;
		wait-for-move barrel2 along z-axis;
		move barrel2 to z-axis [0.000000] speed [3.000000];
	}
	gun_1 = !gun_1;
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		explode turret type BITMAPONLY;
		explode sleeve type BITMAPONLY;
		explode barrel1 type FIRE | SMOKE | FALL;
		explode flare1 type BITMAPONLY;
		explode barrel2 type BITMAPONLY;
		explode flare2 type BITMAPONLY;
		explode wake1 type BITMAPONLY;
		explode wake2 type BITMAPONLY;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY;
		explode turret type FALL;
		explode sleeve type FIRE | SMOKE | FALL;
		explode barrel1 type FIRE | SMOKE | FALL;
		explode flare1 type FALL;
		explode barrel2 type FALL;
		explode flare2 type FALL;
		explode wake1 type FALL;
		explode wake2 type FIRE | SMOKE | FALL;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL;
		explode turret type FIRE | SMOKE | FALL;
		explode sleeve type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode barrel1 type EXPLODE_ON_HIT | SMOKE | FALL;
		explode flare1 type FIRE | SMOKE | FALL;
		explode barrel2 type FIRE | SMOKE | FALL;
		explode flare2 type SMOKE | FALL;
		explode wake1 type FIRE | SMOKE | FALL;
		explode wake2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL;
		explode sleeve type EXPLODE_ON_HIT | FIRE | FALL;
		explode barrel1 type EXPLODE_ON_HIT | FIRE | FALL;
		explode flare1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode barrel2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode flare2 type EXPLODE_ON_HIT | FIRE | FALL;
		explode wake1 type EXPLODE_ON_HIT | FIRE | FALL;
		explode wake2 type EXPLODE_ON_HIT | FIRE | FALL;
	return corpsetype;
}
