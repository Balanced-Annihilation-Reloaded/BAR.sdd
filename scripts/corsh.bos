#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare, turret, wake, fan, barrel;

static-var  Static_Var_1, restore_delay, Wobble_status;

// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			4

WobbleUnit()
{
	while( TRUE )
	{
		if( Wobble_status)
		{
			if( get GROUND_WATER_HEIGHT(get UNIT_XZ) < 0 ) //Over Water
			{
				move base to y-axis [-0.500000] speed [0.50000];
			}
			else
			{
				move base to y-axis [0.500000] speed [0.50000];
			}
		}
		else
		{
			if( get GROUND_WATER_HEIGHT(get UNIT_XZ) < 0 ) //Over Water
			{
				move base to y-axis [-1.500000] speed [0.50000];
			}
			else
			{
				move base to y-axis [1.500000] speed [0.50000];
			}
		}
		Wobble_status = !Wobble_status;
		sleep 260;
	}
}

BankControl()
{
	var lastHeading, currHeading, diffHeading;
	lastHeading = GET HEADING;
	while (TRUE)
	{
		currHeading = GET HEADING;
		diffHeading = currHeading - lastHeading;
		// Set values for tilt

		//Remove Extreme values
		if ( diffHeading > 1500 ) diffHeading = 1500;
		if ( diffHeading < -1500 ) diffHeading = -1500;
		//get PRINT(diffHeading);
		turn base to z-axis 1.0 * diffHeading speed <23>;
		
		lastHeading = currHeading;
		sleep 67;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script BankControl();
	start-script WobbleUnit();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis <0> - Func_Var_2 speed <105.000000>;
	turn base to x-axis <0> - Func_Var_1 speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
	return (0);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_1 == 1 )
		{
			emit-sfx 5 from wake;
			emit-sfx 5 from wake;
			emit-sfx 5 from wake;
			emit-sfx 5 from wake;
			emit-sfx 5 from wake;
			emit-sfx 5 from wake;
			emit-sfx 3 from wake;
			emit-sfx 3 from wake;
			emit-sfx 3 from wake;
			emit-sfx 3 from wake;
			emit-sfx 3 from wake;
			emit-sfx 3 from wake;
			emit-sfx 3 from wake;
			emit-sfx 3 from wake;
			emit-sfx 5 from wake;
			emit-sfx 5 from wake;
		}
		if( Static_Var_1 == 2 )
		{
			emit-sfx 5 from wake;
			emit-sfx 5 from wake;
			emit-sfx 5 from wake;
			emit-sfx 5 from wake;
			emit-sfx 5 from wake;
			emit-sfx 5 from wake;
			emit-sfx 3 from wake;
			emit-sfx 3 from wake;
			emit-sfx 3 from wake;
			emit-sfx 3 from wake;
			emit-sfx 3 from wake;
			emit-sfx 3 from wake;
			emit-sfx 3 from wake;
			emit-sfx 3 from wake;
			emit-sfx 5 from wake;
			emit-sfx 5 from wake;
		}
		sleep 300;
	}
	return (0);
}

StopMoving()
{
	sleep 150;
	return (0);
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
	return (0);
}

Create()
{
	spin fan around y-axis speed <-300>;
	hide flare;
	restore_delay = 3000;
	start-script SmokeUnit();
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <150.000000>;
	turn barrel to x-axis <0.000000> speed <100.000000>;
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <150.000000>;
	turn barrel to x-axis <0.000000> - pitch speed <100.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn barrel around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	show flare;
	sleep 150;
	hide flare;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		explode fan type BITMAPONLY;
		explode turret type BITMAPONLY;
		explode barrel type FIRE | SMOKE | FALL;
		explode flare type BITMAPONLY;
		explode wake type BITMAPONLY;
		return(0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY;
		explode fan type FIRE | SMOKE | FALL;
		explode turret type FIRE | SMOKE | FALL;
		explode barrel type FIRE | SMOKE | FALL;
		explode flare type FALL;
		explode wake type FALL;
		return(0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL;
		explode fan type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode turret type SMOKE | FALL;
		explode barrel type EXPLODE_ON_HIT | SMOKE | FALL;
		explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode wake type EXPLODE_ON_HIT | SMOKE | FALL;
		return(0);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode fan type EXPLODE_ON_HIT | FIRE | FALL;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode barrel type EXPLODE_ON_HIT | FIRE | FALL;
		explode flare type EXPLODE_ON_HIT | FIRE | FALL;
		explode wake type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
}
