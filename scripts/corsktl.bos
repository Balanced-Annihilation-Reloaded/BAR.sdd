#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, lbLeg, lbFoot, rbLeg, rbFoot, lfLeg, lfFoot, rfLeg,
       rfFoot;

static-var  bMoving;


MotionControl()
{
	while( TRUE )
	{
		if( bMoving )
		{
		//step 0 maxvelocity = 1.75
		turn rfleg to y-axis <0> speed <255.000000>;
		turn rfleg to z-axis <0> speed <135.000000>;
		turn rffoot to z-axis <0> speed <285.000000>;
		
		turn lfleg to y-axis <19> speed <405.000000>;
		turn lfleg to z-axis <-24> speed <300.000000>;
		turn lffoot to z-axis <13> speed <30.000000>;
		
		turn lbleg to y-axis <0> speed <405.000000>;
		turn lbleg to z-axis <0> speed <75.000000>;
		turn lbfoot to z-axis <0> speed <180.000000>;
		
		
		turn rbleg to y-axis <19> speed <285.000000>;
		turn rbleg to z-axis <24> speed <15.000000>;
		turn rbfoot to z-axis <-13> speed <90.000000>;
		
		
		sleep 60;
		}
		if( bMoving )
		{
		//step 1
		turn rfleg to y-axis <-27> speed <405.000000>;
		turn rfleg to z-axis <5> speed <75.000000>;
		turn rffoot to z-axis <-12> speed <180.000000>;
		
		turn lfleg to y-axis <0> speed <285.000000>;
		turn lfleg to z-axis <-23> speed <15.000000>;
		turn lffoot to z-axis <7> speed <90.000000>;
		
		turn lbleg to y-axis <17> speed <255.000000>;
		turn lbleg to z-axis <9> speed <135.000000>;
		turn lbfoot to z-axis <-19> speed <285.000000>;
		
		
		turn rbleg to y-axis <46> speed <405.000000>;
		turn rbleg to z-axis <4> speed <300.000000>;
		turn rbfoot to z-axis <-11> speed <30.000000>;
		
		sleep 60;
		}
		if( bMoving )
		{
		//step 2 
		turn rfleg to y-axis <-46> speed <285.000000>;
		turn rfleg to z-axis <4> speed <15.000000>;
		turn rffoot to z-axis <-11> speed <15.000000>;
		
		turn lfleg to y-axis <-17> speed <255.000000>;
		turn lfleg to z-axis <9> speed <480.000000>;
		turn lffoot to z-axis <-19> speed <390.000000>;
		
		turn lbleg to y-axis <0> speed <255.000000>;
		turn lbleg to z-axis <-23> speed <480.000000>;
		turn lbfoot to z-axis <7> speed <390.000000>;
		
		
		turn rbleg to y-axis <27> speed <285.000000>;
		turn rbleg to z-axis <5> speed <15.000000>;
		turn rbfoot to z-axis <-12> speed <15.000000>;
		
		sleep 60;
		}
		if( bMoving )
		{
		
		//step 3 
		turn rfleg to y-axis <-19> speed <405.000000>;
		turn rfleg to z-axis <24> speed <300.000000>;
		turn rffoot to z-axis <-13> speed <30.000000>;
		
		turn lfleg to y-axis <0> speed <255.000000>;
		turn lfleg to z-axis <0> speed <135.000000>;
		turn lffoot to z-axis <0> speed <285.000000>;
		
		turn lbleg to y-axis <-19> speed <285.000000>;
		turn lbleg to z-axis <-24> speed <15.000000>;
		turn lbfoot to z-axis <13> speed <90.000000>;
		
		
		turn rbleg to y-axis <0> speed <405.000000>;
		turn rbleg to z-axis <0> speed <75.000000>;
		turn rbfoot to z-axis <0> speed <180.000000>;
		
		
		sleep 60;
		}
		if( bMoving )
		{
		//step 4 
		turn rfleg to y-axis <0> speed <285.000000>;
		turn rfleg to z-axis <23> speed <15.000000>;
		turn rffoot to z-axis <-7> speed <90.000000>;
		
		turn lfleg to y-axis <27> speed <405.000000>;
		turn lfleg to z-axis <-5> speed <75.000000>;
		turn lffoot to z-axis <12> speed <180.000000>;
		
		turn lbleg to y-axis <-46> speed <405.000000>;
		turn lbleg to z-axis <-4> speed <300.000000>;
		turn lbfoot to z-axis <11> speed <30.000000>;
		
		turn rbleg to y-axis <-17> speed <255.000000>;
		turn rbleg to z-axis <-9> speed <135.000000>;
		turn rbfoot to z-axis <19> speed <285.000000>;
		
		sleep 60;
		}
		if( bMoving )
		{
		//step 5 
		turn rfleg to y-axis <17> speed <255.000000>;
		turn rfleg to z-axis <-9> speed <480.000000>;
		turn rffoot to z-axis <19> speed <390.000000>;
		
		
		turn lfleg to y-axis <46> speed <285.000000>;
		turn lfleg to z-axis <-4> speed <15.000000>;
		turn lffoot to z-axis <11> speed <15.000000>;
		
		turn lbleg to y-axis <-27> speed <285.000000>;
		turn lbleg to z-axis <-5> speed <15.000000>;
		turn lbfoot to z-axis <12> speed <15.000000>;
		
		turn rbleg to y-axis <0> speed <255.000000>;
		turn rbleg to z-axis <23> speed <480.000000>;
		turn rbfoot to z-axis <-7> speed <390.000000>;
		
		sleep 60;
		//step 0-6

		//step 0-6

		}
		if( !bMoving )
		{
			sleep 100;
		}
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Create()
{
	bMoving = FALSE;
	start-script MotionControl();
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
		turn rfleg to y-axis <0> speed <255.000000>;
		turn rfleg to z-axis <0> speed <135.000000>;
		turn rffoot to z-axis <0> speed <285.000000>;
		
		turn lfleg to y-axis <0> speed <405.000000>;
		turn lfleg to z-axis <0> speed <300.000000>;
		turn lffoot to z-axis <0> speed <30.000000>;
		
		turn lbleg to y-axis <0> speed <405.000000>;
		turn lbleg to z-axis <0> speed <75.000000>;
		turn lbfoot to z-axis <0> speed <180.000000>;
		
		
		turn rbleg to y-axis <0> speed <285.000000>;
		turn rbleg to z-axis <0> speed <15.000000>;
		turn rbfoot to z-axis <0> speed <90.000000>;
		
	sleep 150;
}

FireWeapon1()
{
	emit-sfx 4096 + 1 from base; //Weapon2 detonates the mine once weapon1 fires
}

QueryWeapon1(piecenum)
{
	piecenum = base;
}

AimFromWeapon1(piecenum)
{
	piecenum = base;
}


QueryWeapon2(piecenum)
{
	piecenum = base;
}

AimFromWeapon2(piecenum)
{
	piecenum = base;
}

FireWeapon2()
{
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		explode rfleg type BITMAPONLY;
		explode rffoot type FIRE | SMOKE | FALL;
		explode lfleg type BITMAPONLY;
		explode lffoot type BITMAPONLY;
		explode rbleg type BITMAPONLY;
		explode rbfoot type BITMAPONLY;
		explode lbleg type BITMAPONLY;
		explode lbfoot type BITMAPONLY;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY;
		explode rfleg type FIRE | SMOKE | FALL;
		explode rffoot type FIRE | SMOKE | FALL;
		explode lfleg type FIRE | SMOKE | FALL;
		explode lffoot type FALL;
		explode rbleg type FALL;
		explode rbfoot type FIRE | SMOKE | FALL;
		explode lbleg type FIRE | SMOKE | FALL;
		explode lbfoot type FIRE | SMOKE | FALL;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL;
		explode rfleg type SMOKE | FALL;
		explode rffoot type EXPLODE_ON_HIT | SMOKE | FALL;
		explode lfleg type EXPLODE_ON_HIT | SMOKE | FALL;
		explode lffoot type FIRE | SMOKE | FALL;
		explode rbleg type FIRE | SMOKE | FALL;
		explode rbfoot type FIRE | SMOKE | FALL;
		explode lbleg type EXPLODE_ON_HIT | SMOKE | FALL;
		explode lbfoot type SMOKE | FALL;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode rfleg type EXPLODE_ON_HIT | FIRE | FALL;
		explode rffoot type EXPLODE_ON_HIT | FIRE | FALL;
		explode lfleg type EXPLODE_ON_HIT | FIRE | FALL;
		explode lffoot type EXPLODE_ON_HIT | FIRE | FALL;
		explode rbleg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode rbfoot type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode lbleg type EXPLODE_ON_HIT | FIRE | FALL;
		explode lbfoot type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
	return corpsetype;
}
