#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  head, rthigh, lthigh, rfoot, lleg, lfoot, rleg, pelvis ;

static-var  bMoving, Static_Var_2, Static_Var_3;


walk()
{
//71 elmos per sec
//
//step 0

//step 0
if (bMoving)
{
	turn rthigh to x-axis <-24> speed <217.500000>;
	turn rleg to x-axis <18> speed <52.500000>;
	turn rfoot to x-axis <6> speed <157.500000>;
	turn lthigh to x-axis <0> speed <172.500000>;
	turn lleg to x-axis <0> speed <210.000000>;
	turn lfoot to x-axis <0> speed <442.500000>;

	move pelvis to y-axis [3] now;
	turn pelvis to x-axis <0> speed <7.500000>;
	turn pelvis to z-axis <0> speed <7.500000>;

	sleep 125;
}

//step 1
if (bMoving)
{
	turn rthigh to x-axis <0> speed <180.000000>;
	turn rleg to x-axis <49> speed <232.500000>;
	turn rfoot to x-axis <-49> speed <412.500000>;
	turn lthigh to x-axis <-64> speed <480.000000>;
	turn lleg to x-axis <5> speed <37.500000>;
	turn lfoot to x-axis <33> speed <247.500000>;

	move pelvis to y-axis [3] now;
	turn pelvis to x-axis <1> speed <7.500000>;
	turn pelvis to z-axis <-1> speed <7.500000>;

	sleep 125;
}

//step 2
if (bMoving)
{
	turn rthigh to x-axis <-2> speed <15.000000>;
	turn rleg to x-axis <97> speed <360.000000>;
	turn rfoot to x-axis <-72> speed <907.500000>;
	turn lthigh to x-axis <-84> speed <150.000000>;
	turn lleg to x-axis <29> speed <180.000000>;
	turn lfoot to x-axis <0> speed <247.500000>;

	move pelvis to y-axis [3] now;
	turn pelvis to x-axis <2> speed <7.500000>;
	turn pelvis to z-axis <-2> speed <7.500000>;

	sleep 125;
}

//step 3
if (bMoving)
{
	turn rthigh to x-axis <23> speed <187.500000>;
	turn rleg to x-axis <28> speed <517.500000>;
	turn rfoot to x-axis <-59> speed <982.500000>;
	turn lthigh to x-axis <-53> speed <232.500000>;
	turn lleg to x-axis <25> speed <30.000000>;
	turn lfoot to x-axis <27> speed <202.500000>;

	move pelvis to y-axis [3] now;
	turn pelvis to x-axis <1> speed <7.500000>;
	turn pelvis to z-axis <-1> speed <7.500000>;

	sleep 125;
}

//step 4
if (bMoving)
{
	turn rthigh to x-axis <0> speed <172.500000>;
	turn rleg to x-axis <0> speed <210.000000>;
	turn rfoot to x-axis <0> speed <442.500000>;
	turn lthigh to x-axis <-24> speed <217.500000>;
	turn lleg to x-axis <18> speed <52.500000>;
	turn lfoot to x-axis <6> speed <157.500000>;


	move pelvis to y-axis [3] now;
	turn pelvis to x-axis <0> speed <7.500000>;
	turn pelvis to z-axis <0> speed <7.500000>;

	sleep 125;
}

//step 5
if (bMoving)
{
	turn rthigh to x-axis <-64> speed <480.000000>;
	turn rleg to x-axis <5> speed <37.500000>;
	turn rfoot to x-axis <33> speed <247.500000>;
	turn lthigh to x-axis <0> speed <180.000000>;
	turn lleg to x-axis <49> speed <232.500000>;
	turn lfoot to x-axis <-49> speed <412.500000>;


	move pelvis to y-axis [3] now;
	turn pelvis to x-axis <1> speed <7.500000>;
	turn pelvis to z-axis <1> speed <7.500000>;

	sleep 125;
}

//step 6
if (bMoving)
{
	turn rthigh to x-axis <-84> speed <150.000000>;
	turn rleg to x-axis <29> speed <180.000000>;
	turn rfoot to x-axis <0> speed <247.500000>;
	turn lthigh to x-axis <-2> speed <15.000000>;
	turn lleg to x-axis <97> speed <360.000000>;
	turn lfoot to x-axis <-72> speed <907.500000>;

	move pelvis to y-axis [3] now;
	turn pelvis to x-axis <2> speed <7.500000>;
	turn pelvis to z-axis <2> speed <7.500000>;

	sleep 125;
}

//step 7
if (bMoving)
{
	turn rthigh to x-axis <-53> speed <232.500000>;
	turn rleg to x-axis <25> speed <30.000000>;
	turn rfoot to x-axis <27> speed <202.500000>;
	turn lthigh to x-axis <23> speed <187.500000>;
	turn lleg to x-axis <28> speed <517.500000>;
	turn lfoot to x-axis <-59> speed <982.500000>;

	move pelvis to y-axis [3] now;
	turn pelvis to x-axis <1> speed <7.500000>;
	turn pelvis to z-axis <1> speed <7.500000>;

	sleep 125;
}

}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from head;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl(Func_Var_1)
{
	while( TRUE )
	{
		Func_Var_1 = bMoving;
		if( Func_Var_1 )
		{
			call-script walk();
			if( Static_Var_2 == 3 )
			{
				emit-sfx 259 from lleg;
				emit-sfx 259 from rleg;
			}
		}
		if( !Func_Var_1 )
		{
			turn rthigh to x-axis <0> speed <180.000000>;
			turn rleg to x-axis <0> speed <232.500000>;
			turn rfoot to x-axis <0> speed <412.500000>;
			turn lthigh to x-axis <0> speed <480.000000>;
			turn lleg to x-axis <0> speed <237.500000>;
			turn lfoot to x-axis <0> speed <247.500000>;

			move pelvis to y-axis [0] speed [12];
			turn pelvis to x-axis <0> speed <7.500000>;
			turn pelvis to z-axis <0> speed <7.500000>;
			sleep 200;
		}
	}
}

Create()
{
	Static_Var_3 = 1;
	bMoving = FALSE;
	start-script MotionControl();
	start-script SmokeUnit();
}

Reload()
{
	sleep 5000;
	Static_Var_3 = 1;
}

QueryNanoPiece(piecenum)
{
	piecenum = head;
}

StartBuilding(Func_Var_1)
{
	while( !Static_Var_3 )
	{
		sleep 100;
	}
	Static_Var_3 = 0;
	set INBUILDSTANCE to 1;
	start-script Reload();
}

StopBuilding()
{
	set INBUILDSTANCE to 0;
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_2 = Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = head;
}

Killed(severity, corpsetype)
{
	if( Static_Var_2 == 1 )
	{
		if( severity <= 50 )
		{
			corpsetype = 2;
			explode head type SHATTER | BITMAP1;
			explode rthigh type FALL | BITMAP1;
			explode lthigh type FALL | BITMAP3;
			explode rfoot type FALL | BITMAP4;
			explode lleg type FALL | BITMAP2;
			explode lfoot type FALL | BITMAP1;
			explode rleg type FALL | BITMAP5;
			return (0);
		}
		corpsetype = 3;
		explode head type SHATTER | BITMAP1;
		explode rthigh type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode lthigh type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode rfoot type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode lleg type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode lfoot type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode rleg type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	if( Static_Var_2 == 2 )
	{
		if( severity <= 50 )
		{
			corpsetype = 2;
			explode head type SHATTER | BITMAP1;
			explode rthigh type FALL | BITMAP1;
			explode lthigh type FALL | BITMAP3;
			explode rfoot type FALL | BITMAP4;
			explode lleg type FALL | BITMAP2;
			explode lfoot type FALL | BITMAP1;
			explode rleg type FALL | BITMAP5;
			return (0);
		}
		corpsetype = 3;
		explode head type SHATTER | BITMAP1;
		explode rthigh type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode lthigh type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode rfoot type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode lleg type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode lfoot type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode rleg type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	if( Static_Var_2 == 3 )
	{
		if( severity <= 50 )
		{
			corpsetype = 2;
			explode head type SHATTER | BITMAP1;
			explode rthigh type FALL | BITMAP1;
			explode lthigh type FALL | BITMAP3;
			explode rfoot type FALL | BITMAP4;
			explode lleg type FALL | BITMAP2;
			explode lfoot type FALL | BITMAP1;
			explode rleg type FALL | BITMAP5;
			return (0);
		}
		corpsetype = 3;
		explode head type SHATTER | BITMAP1;
		explode rthigh type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode lthigh type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode rfoot type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode lleg type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode lfoot type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode rleg type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode head type BITMAPONLY | BITMAP1;
		explode rthigh type BITMAPONLY | BITMAP1;
		explode lthigh type BITMAPONLY | BITMAP3;
		explode rfoot type BITMAPONLY | BITMAP4;
		explode lleg type BITMAPONLY | BITMAP2;
		explode lfoot type BITMAPONLY | BITMAP1;
		explode rleg type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode head type SHATTER | BITMAP1;
		explode rthigh type FALL | BITMAP1;
		explode lthigh type FALL | BITMAP3;
		explode rfoot type FALL | BITMAP4;
		explode lleg type FALL | BITMAP2;
		explode lfoot type FALL | BITMAP1;
		explode rleg type FALL | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode head type SHATTER | BITMAP1;
		explode rthigh type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode lthigh type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode rfoot type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode lleg type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode lfoot type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode rleg type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode head type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode rthigh type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode lthigh type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode rfoot type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode lleg type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode lfoot type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode rleg type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	}
