#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare1, flare2, thrusta1, thrusta2, thrustb1, thrustb2;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, statechg_DesiredState, statechg_StateChanging;


activatescr()
{
	if( TRUE )
	{
	}
	sleep 20;
}

deactivatescr()
{
	if( TRUE )
	{
	}
	sleep 12;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(anglex, anglez)
{
	turn base to z-axis <0> - anglez speed <105.000000>;
	turn base to x-axis <0> - anglex speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <15.000000>;
	turn base to x-axis <0.000000> speed <15.000000>;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryPrimary(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		explode flare1 type BITMAPONLY;
		explode flare2 type BITMAPONLY;
		explode thrustb1 type BITMAPONLY;
		explode thrustb2 type BITMAPONLY;
		explode thrusta1 type BITMAPONLY;
		explode thrusta2 type BITMAPONLY;
		return(0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY;
		explode flare1 type FALL;
		explode flare2 type FALL;
		explode thrustb1 type FIRE | SMOKE | FALL;
		explode thrustb2 type FALL;
		explode thrusta1 type FIRE | SMOKE | FALL;
		explode thrusta2 type FIRE | SMOKE | FALL;
		return(0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode flare1 type EXPLODE_ON_HIT | SMOKE | FALL;
		explode flare2 type FIRE | SMOKE | FALL;
		explode thrustb1 type SMOKE | FALL;
		explode thrustb2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode thrusta1 type FIRE | SMOKE | FALL;
		explode thrusta2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		return(0);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode flare1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode flare2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode thrustb1 type EXPLODE_ON_HIT | FIRE | FALL;
		explode thrustb2 type EXPLODE_ON_HIT | FIRE | FALL;
		explode thrusta1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode thrusta2 type EXPLODE_ON_HIT | FIRE | FALL;
}
