#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  lturret, rturret, base, lprop, rprop, bprop;

static-var  gun_1;

// Signal definitions
#define SIG_MOVE			2

#define SIG_AIM				4
Create()
{
	gun_1 = lturret;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	spin lprop around z-axis speed <200>;
	spin rprop around z-axis speed <-200>;
	spin bprop around z-axis speed <200>;
	while( TRUE )
	{
		emit-sfx 256 | 3 from lprop;
		emit-sfx 256 | 3 from rprop;
		emit-sfx 256 | 3 from bprop;
		sleep 250;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	set-s-mask SIG_MOVE
	
	stop-spin lprop around z-axis ;
	stop-spin rprop around z-axis ;
	stop-spin bprop around z-axis ;
}

FirePrimary()
{
	gun_1 = !gun_1;
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

RestoreAfterDelay()
{
	sleep 5000;
	move rturret to x-axis [0] speed [10];
	move lturret to x-axis [0] speed [10];
	
	wait-for-move rturret along x-axis;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	move rturret to x-axis [9] speed [30];
	move lturret to x-axis [-9] speed [30];
	
	wait-for-move rturret along x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimFromPrimary(piecenum)
{
	piecenum = lturret;
}
Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
}
